
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

type {:datatype} Vec _;

function {:constructor} Vec<T>(v: [int]T, l: int): Vec T;

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := l#Vec(v);
    Vec(v#Vec(v)[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v#Vec(v)[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    l#Vec(v)
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    l#Vec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(v#Vec(v)[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v#Vec(v)[j] else v#Vec(v)[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := l#Vec(v1), v#Vec(v1), l#Vec(v2), v#Vec(v2);
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v);
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v#Vec(v)[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v#Vec(v)[i := elem], l#Vec(v))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(m[i := m[j]][j := m[i]], l#Vec(v)))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := l#Vec(v);
    (exists i: int :: InRangeVec(v, i) && v#Vec(v)[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#0'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), val: $1_Diem_PreburnWithMetadata'#0') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), val: $1_Diem_PreburnWithMetadata'#0'): Vec ($1_Diem_PreburnWithMetadata'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), other: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#0'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#2'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'#2'''(v1: Vec ($1_Diem_PreburnWithMetadata'#2'), v2: Vec ($1_Diem_PreburnWithMetadata'#2')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'#2''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#2'''(v: Vec ($1_Diem_PreburnWithMetadata'#2')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#2''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), e: $1_Diem_PreburnWithMetadata'#2'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#2''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), e: $1_Diem_PreburnWithMetadata'#2'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#2'), e: $1_Diem_PreburnWithMetadata'#2':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#2''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#2''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#2''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#2''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#2''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#2''(): Vec ($1_Diem_PreburnWithMetadata'#2') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#2''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#2')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#2''(): Vec ($1_Diem_PreburnWithMetadata'#2') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')), val: $1_Diem_PreburnWithMetadata'#2') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), val: $1_Diem_PreburnWithMetadata'#2'): Vec ($1_Diem_PreburnWithMetadata'#2') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2'))) returns (e: $1_Diem_PreburnWithMetadata'#2', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#2');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')), other: Vec ($1_Diem_PreburnWithMetadata'#2')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#2') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), i: int): $1_Diem_PreburnWithMetadata'#2' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#2'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#2');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), i: int): $1_Diem_PreburnWithMetadata'#2' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#2');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#2') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#2', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#2');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#2''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#2', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#2')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#2');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), e: $1_Diem_PreburnWithMetadata'#2') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#2''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#2''(v: Vec ($1_Diem_PreburnWithMetadata'#2'), e: $1_Diem_PreburnWithMetadata'#2') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#2''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XDX_XDX'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XUS_XUS'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_VASPDomain_VASPDomain`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_VASPDomain_VASPDomain''(v1: Vec ($1_VASPDomain_VASPDomain), v2: Vec ($1_VASPDomain_VASPDomain)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_VASPDomain_VASPDomain''(v: Vec ($1_VASPDomain_VASPDomain)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_VASPDomain_VASPDomain'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): int;
axiom (forall v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain:: {$IndexOfVec'$1_VASPDomain_VASPDomain'(v, e)}
    (var i := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
     if (!$ContainsVec'$1_VASPDomain_VASPDomain'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_VASPDomain_VASPDomain'() returns (v: Vec ($1_VASPDomain_VASPDomain)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), val: $1_VASPDomain_VASPDomain) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), val: $1_VASPDomain_VASPDomain): Vec ($1_VASPDomain_VASPDomain) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    var v: Vec ($1_VASPDomain_VASPDomain);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), other: Vec ($1_VASPDomain_VASPDomain)) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int) returns (dst: $1_VASPDomain_VASPDomain) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), index: int)
returns (dst: $Mutation ($1_VASPDomain_VASPDomain), m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int, j: int) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int, j: int): Vec ($1_VASPDomain_VASPDomain) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var len: int;
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res: bool)  {
    res := $ContainsVec'$1_VASPDomain_VASPDomain'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XDX_XDX`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_XDX_XDX''(v1: Vec ($1_XDX_XDX), v2: Vec ($1_XDX_XDX)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_XDX_XDX'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_XDX_XDX''(v: Vec ($1_XDX_XDX)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XDX_XDX'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): int;
axiom (forall v: Vec ($1_XDX_XDX), e: $1_XDX_XDX:: {$IndexOfVec'$1_XDX_XDX'(v, e)}
    (var i := $IndexOfVec'$1_XDX_XDX'(v, e);
     if (!$ContainsVec'$1_XDX_XDX'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XDX_XDX'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XDX_XDX'() returns (v: Vec ($1_XDX_XDX)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), val: $1_XDX_XDX) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), val: $1_XDX_XDX): Vec ($1_XDX_XDX) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX))) {
    var v: Vec ($1_XDX_XDX);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), other: Vec ($1_XDX_XDX)) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int) returns (dst: $1_XDX_XDX) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), index: int)
returns (dst: $Mutation ($1_XDX_XDX), m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int, j: int) returns (m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int, j: int): Vec ($1_XDX_XDX) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var len: int;
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res: bool)  {
    res := $ContainsVec'$1_XDX_XDX'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XDX_XDX'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XUS_XUS`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_XUS_XUS''(v1: Vec ($1_XUS_XUS), v2: Vec ($1_XUS_XUS)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_XUS_XUS'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_XUS_XUS''(v: Vec ($1_XUS_XUS)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XUS_XUS'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): int;
axiom (forall v: Vec ($1_XUS_XUS), e: $1_XUS_XUS:: {$IndexOfVec'$1_XUS_XUS'(v, e)}
    (var i := $IndexOfVec'$1_XUS_XUS'(v, e);
     if (!$ContainsVec'$1_XUS_XUS'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XUS_XUS'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XUS_XUS'() returns (v: Vec ($1_XUS_XUS)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), val: $1_XUS_XUS) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), val: $1_XUS_XUS): Vec ($1_XUS_XUS) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS))) {
    var v: Vec ($1_XUS_XUS);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), other: Vec ($1_XUS_XUS)) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int) returns (dst: $1_XUS_XUS) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), index: int)
returns (dst: $Mutation ($1_XUS_XUS), m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int, j: int) returns (m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int, j: int): Vec ($1_XUS_XUS) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var len: int;
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res: bool)  {
    res := $ContainsVec'$1_XUS_XUS'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XUS_XUS'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'u8''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_Signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_Signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function $1_Signer_is_txn_signer(s: $signer): bool;

function $1_Signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Event module




// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_VASPDomain_VASPDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(a: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', b: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(h: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    true
}

// Embed event `$1_VASPDomain_VASPDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_VASPDomain_VASPDomainEvent'(e: $1_VASPDomain_VASPDomainEvent): $EventRep;
axiom (forall v1, v2: $1_VASPDomain_VASPDomainEvent :: {$ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1), $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2)}
    $IsEqual'$1_VASPDomain_VASPDomainEvent'(v1, v2) <==> $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1) == $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_VASPDomain_VASPDomainEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    var handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_VASPDomain_VASPDomainEvent'(handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_VASPDomain_VASPDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
type #1;
function {:inline} $IsEqual'#1'(x1: #1, x2: #1): bool { x1 == x2 }
function {:inline} $IsValid'#1'(x: #1): bool { true }
type #2;
function {:inline} $IsEqual'#2'(x1: #2, x2: #2): bool { x1 == x2 }
function {:inline} $IsValid'#2'(x: #2): bool { true }
type #3;
function {:inline} $IsEqual'#3'(x1: #3, x2: #3): bool { x1 == x2 }
function {:inline} $IsValid'#3'(x: #3): bool { true }
type #4;
function {:inline} $IsEqual'#4'(x1: #4, x2: #4): bool { x1 == x2 }
function {:inline} $IsValid'#4'(x: #4): bool { true }
type #5;
function {:inline} $IsEqual'#5'(x1: #5, x2: #5): bool { x1 == x2 }
function {:inline} $IsValid'#5'(x: #5): bool { true }
type #6;
function {:inline} $IsEqual'#6'(x1: #6, x2: #6): bool { x1 == x2 }
function {:inline} $IsValid'#6'(x: #6): bool { true }

// spec fun at ../../../../language/move-stdlib/sources/Signer.move:12:5+77
function {:inline} $1_Signer_$address_of(s: $signer): int {
    $1_Signer_$borrow_address(s)
}

// fun Signer::address_of [baseline] at ../../../../language/move-stdlib/sources/Signer.move:12:5+77
procedure {:inline 1} $1_Signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at ../../../../language/move-stdlib/sources/Signer.move:12:5+1
    assume {:print "$at(16,389,390)"} true;
    assume {:print "$track_local(0,0,0):", $t0} $t0 == $t0;

    // $t1 := Signer::borrow_address($t0) on_abort goto L2 with $t2 at ../../../../language/move-stdlib/sources/Signer.move:13:10+17
    assume {:print "$at(16,443,460)"} true;
    call $t1 := $1_Signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(16,443,460)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(0,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at ../../../../language/move-stdlib/sources/Signer.move:13:9+18
    assume {:print "$track_return(0,0,0):", $t1} $t1 == $t1;

    // label L1 at ../../../../language/move-stdlib/sources/Signer.move:14:5+1
    assume {:print "$at(16,465,466)"} true;
L1:

    // return $t1 at ../../../../language/move-stdlib/sources/Signer.move:14:5+1
    $ret0 := $t1;
    return;

    // label L2 at ../../../../language/move-stdlib/sources/Signer.move:14:5+1
L2:

    // abort($t2) at ../../../../language/move-stdlib/sources/Signer.move:14:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:138:5+89
function {:inline} $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    !$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:158:5+90
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:120:10+104
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:20:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// fun DiemTimestamp::is_genesis [baseline] at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:138:5+89
procedure {:inline 1} $1_DiemTimestamp_is_genesis() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:139:42+9
    assume {:print "$at(10,5899,5908)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // $t1 := exists<DiemTimestamp::CurrentTimeMicroseconds>($t0) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:139:10+6
    $t1 := $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0);

    // $t2 := !($t1) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:139:9+1
    call $t2 := $Not($t1);

    // trace_return[0]($t2) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:139:9+43
    assume {:print "$track_return(3,2,0):", $t2} $t2 == $t2;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:140:5+1
    assume {:print "$at(10,5914,5915)"} true;
L1:

    // return $t2 at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:140:5+1
    $ret0 := $t2;
    return;

}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:485:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:489:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:493:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:497:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:501:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:505:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:509:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:513:9+126
function {:inline} $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:517:9+229
function {:inline} $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    (($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr)) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:523:9+169
function {:inline} $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId): bool {
    (exists a: int :: $IsValid'address'(a) && (($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Roles.move:527:9+149
function {:inline} $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId): bool {
    (exists a: int :: $IsValid'address'(a) && (($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, a))))
}

// struct Roles::RoleId at ../../../../diem-move/diem-framework/core/sources/Roles.move:57:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// fun Roles::grant_role [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<XUS::XUS, #1, #2, #3, #4, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'$1_XUS_XUS_#1_#2_#3_#4_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, XUS::XUS, #2, #3, #4, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_$1_XUS_XUS_#2_#3_#4_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, XUS::XUS, #3, #4, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_$1_XUS_XUS_#3_#4_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, #2, #3, #3, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_#2_#3_#3_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#3'_$memory#174: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#174 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_can_mint'#3'($1_Diem_CurrencyInfo'#3'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, #2, #3, #4, #3, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_#2_#3_#4_#3_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#3'_$memory#175: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#175 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#175) && $1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, #2, #3, #4, #4, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_#2_#3_#4_#4_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#4'_$memory#175: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#175 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#175) && $1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, #2, #3, #5, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_#2_#3_#5_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#3'_$memory#173: $Memory $1_Diem_CurrencyInfo'#3';
    var $1_Diem_CurrencyInfo'#5'_$memory#174: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#3''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#3'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#3'_$memory#173 := $1_Diem_CurrencyInfo'#3'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#174 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory), $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#5'($1_Diem_CurrencyInfo'#5'_$memory), $1_Diem_spec_can_mint'#5'($1_Diem_CurrencyInfo'#5'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, #2, #4, #4, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_#2_#4_#4_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#4'_$memory#173: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#173 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_xdx_exchange_rate'#4'($1_Diem_CurrencyInfo'#4'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::grant_role<#0, #1, #2, #5, #4, #5, #6> [verification] at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
procedure {:timeLimit 40} $1_Roles_grant_role'#0_#1_#2_#5_#4_#5_#6'$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#146: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#171: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#172: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Diem_CurrencyInfo'#5'_$memory#173: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_Diem_CurrencyInfo'#4'_$memory#174: $Memory $1_Diem_CurrencyInfo'#4';
    var $1_Diem_CurrencyInfo'#5'_$memory#175: $Memory $1_Diem_CurrencyInfo'#5';
    var $1_DualAttestation_Limit_$memory#176: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#177: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#1>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#1'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#1''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#2>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#2'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#2''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#2>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<#2>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#2'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#2''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#2'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#2'($to_burn#$1_Diem_Preburn'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(ReadVec($preburns#$1_Diem_PreburnQueue'#2'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#3>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#4>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#4''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#4'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#5>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#5''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#5'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#6>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#6'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#6''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t2, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:177:9+39
    assume {:print "$at(40,7455,7494)"} true;
    assume ($t2 == $1_Signer_$address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, a550c18)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:179:9+60
    assume {:print "$at(40,7553,7613)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 173345816));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t2, b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:180:9+80
    assume {:print "$at(40,7622,7702)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t2, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    assume {:print "$at(40,7956,7986)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @146 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:188:9+30
    $1_Roles_RoleId_$memory#146 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$at(40,7139,7140)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t3 := Signer::address_of($t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:33+27
    assume {:print "$at(40,7220,7247)"} true;
    call $t3 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(40,7220,7247)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := exists<Roles::RoleId>($t3) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:18+6
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t3);

    // $t6 := !($t5) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:17+1
    call $t6 := $Not($t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90

    // $t7 := 0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:89+8
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35
    assume $IsEqual'u64'($t8, 0);

    // $t8 := opaque end: Errors::already_published($t7) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:63+35

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    assume {:print "$at(40,7196,7286)"} true;
    assume {:print "$track_abort(4,12):", $t8} $t8 == $t8;

    // $t4 := move($t8) at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    $t4 := $t8;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:171:9+90
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:17+7
    assume {:print "$at(40,7304,7311)"} true;
L0:

    // $t9 := pack Roles::RoleId($t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:26+18
    $t9 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assert {:msg "assert_failed(40,7296,7303): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$addr#$signer($t0)];

    // @171 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    // state save for global update invariants
    assume {:print "$at(40,7139,7339)"} true;
    $1_Roles_RoleId_$memory#171 := $1_Roles_RoleId_$memory;

    // @172 := save_mem(ValidatorConfig::ValidatorConfig) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_ValidatorConfig_ValidatorConfig_$memory#172 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @173 := save_mem(Diem::CurrencyInfo<#3>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#173 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @174 := save_mem(Diem::CurrencyInfo<#4>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#4'_$memory#174 := $1_Diem_CurrencyInfo'#4'_$memory;

    // @175 := save_mem(Diem::CurrencyInfo<#5>) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_Diem_CurrencyInfo'#5'_$memory#175 := $1_Diem_CurrencyInfo'#5'_$memory;

    // @176 := save_mem(DualAttestation::Limit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_DualAttestation_Limit_$memory#176 := $1_DualAttestation_Limit_$memory;

    // @177 := save_mem(AccountFreezing::FreezingBit) at ../../../../diem-move/diem-framework/core/sources/Roles.move:170:5+200
    $1_AccountFreezing_FreezingBit_$memory#177 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t9, $t0) on_abort goto L3 with $t4 at ../../../../diem-move/diem-framework/core/sources/Roles.move:172:9+7
    assume {:print "$at(40,7296,7303)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $addr#$signer($t0), $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(40,7296,7303)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@171]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@171]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:382:9+189
    assume {:print "$at(40,15415,15604)"} true;
    assert {:msg "assert_failed(40,15415,15604): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#171, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#171, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume {:print "$at(40,19525,19616)"} true;
    assert {:msg "assert_failed(40,19525,19616): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume {:print "$at(40,20004,20125)"} true;
    assert {:msg "assert_failed(40,20004,20125): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume {:print "$at(40,20510,20629)"} true;
    assert {:msg "assert_failed(40,20510,20629): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume {:print "$at(40,20705,20834)"} true;
    assert {:msg "assert_failed(40,20705,20834): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume {:print "$at(40,20901,21020)"} true;
    assert {:msg "assert_failed(40,20901,21020): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume {:print "$at(40,21095,21223)"} true;
    assert {:msg "assert_failed(40,21095,21223): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume {:print "$at(40,21290,21416)"} true;
    assert {:msg "assert_failed(40,21290,21416): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume {:print "$at(40,21477,21597)"} true;
    assert {:msg "assert_failed(40,21477,21597): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume {:print "$at(40,21657,21776)"} true;
    assert {:msg "assert_failed(40,21657,21776): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume {:print "$at(9,3286,3423)"} true;
    assert {:msg "assert_failed(9,3286,3423): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@172]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@172]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:321:9+304
    assume {:print "$at(54,13781,14085)"} true;
    assert {:msg "assert_failed(54,13781,14085): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#172, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#172, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume {:print "$at(54,14569,14681)"} true;
    assert {:msg "assert_failed(54,14569,14681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume {:print "$at(54,14910,15022)"} true;
    assert {:msg "assert_failed(54,14910,15022): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume {:print "$at(54,15356,15463)"} true;
    assert {:msg "assert_failed(54,15356,15463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1612:9+197
    assume {:print "$at(50,75192,75389)"} true;
    assert {:msg "assert_failed(50,75192,75389): global memory invariant does not hold"}
      (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assert forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#1>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1691:9+188
    assume {:print "$at(50,79168,79356)"} true;
    assert {:msg "assert_failed(50,79168,79356): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#1'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#2>>(addr1), exists<Diem::Preburn<#2>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1758:9+220
    assume {:print "$at(50,83123,83343)"} true;
    assert {:msg "assert_failed(50,83123,83343): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#2'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#2'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assert Implies(Diem::spec_is_currency[@173]<#3>(), Implies(Neq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<#3>(), Diem::spec_xdx_exchange_rate[@173]<#3>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1817:9+228
    assume {:print "$at(50,85999,86227)"} true;
    assert {:msg "assert_failed(50,85999,86227): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#173) ==> (!$IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'#5'($1_Diem_CurrencyInfo'#5'_$memory), $1_Diem_spec_xdx_exchange_rate'#5'($1_Diem_CurrencyInfo'#5'_$memory#173)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(Diem::spec_is_currency[@174]<#4>(), Implies(Neq<bool>(Diem::spec_can_mint<#4>(), Diem::spec_can_mint[@174]<#4>()), Roles::spec_signed_by_treasury_compliance_role())) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1825:9+210
    assume {:print "$at(50,86378,86588)"} true;
    assert {:msg "assert_failed(50,86378,86588): global memory invariant does not hold"}
      ($1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory#174) ==> (!$IsEqual'bool'($1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory), $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory#174)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory)));

    // assert Implies(And(Not(Diem::spec_is_currency[@175]<#5>()), Diem::spec_is_currency<#5>()), Roles::spec_signed_by_diem_root_role()) at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Diem.move:1833:9+165
    assume {:print "$at(50,86729,86894)"} true;
    assert {:msg "assert_failed(50,86729,86894): global memory invariant does not hold"}
      ((!$1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory#175) && $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory)) ==> $1_Roles_spec_signed_by_diem_root_role($1_Roles_RoleId_$memory));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#6>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#6'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume {:print "$at(8,4049,4218)"} true;
    assert {:msg "assert_failed(8,4049,4218): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume {:print "$at(8,5635,5804)"} true;
    assert {:msg "assert_failed(8,5635,5804): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume {:print "$at(8,7604,7805)"} true;
    assert {:msg "assert_failed(8,7604,7805): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assert forall a: TypeDomain<address>() where exists[@176]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@176]()), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:558:9+214
    assume {:print "$at(11,24689,24903)"} true;
    assert {:msg "assert_failed(11,24689,24903): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#176, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#176)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume {:print "$at(11,25118,25327)"} true;
    assert {:msg "assert_failed(11,25118,25327): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@177]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@177]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:219:9+237
    assume {:print "$at(3,8689,8926)"} true;
    assert {:msg "assert_failed(3,8689,8926): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#177, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#177, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume {:print "$at(21,110174,110321)"} true;
    assert {:msg "assert_failed(21,110174,110321): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L2:

    // assert Not(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:185:9+62
    assume {:print "$at(40,7790,7852)"} true;
    assert {:msg "assert_failed(40,7790,7852): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:186:9+29
    assume {:print "$at(40,7861,7890)"} true;
    assert {:msg "assert_failed(40,7861,7890): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    assume {:print "$at(40,7899,7947)"} true;
    assert {:msg "assert_failed(40,7899,7947): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at ../../../../diem-move/diem-framework/core/sources/Roles.move:187:9+48
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/Roles.move:173:5+1
    assume {:print "$at(40,7338,7339)"} true;
L3:

    // assert exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assume {:print "$at(40,7344,7708)"} true;
    assert {:msg "assert_failed(40,7344,7708): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0));

    // assert And(exists[@146]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(0, $t4)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    assert {:msg "assert_failed(40,7344,7708): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#146, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t4));

    // abort($t4) at ../../../../diem-move/diem-framework/core/sources/Roles.move:174:5+364
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// spec fun at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:69:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:15:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsEqual'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s1), $human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s2))}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// spec fun at ../../../../language/move-stdlib/sources/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at ../../../../language/move-stdlib/sources/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// struct Option::Option<address> at ../../../../language/move-stdlib/sources/Option.move:8:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    $IsEqual'vec'address''($vec#$1_Option_Option'address'(s1), $vec#$1_Option_Option'address'(s2))}

// struct Option::Option<ValidatorConfig::Config> at ../../../../language/move-stdlib/sources/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsEqual'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s1), $vec#$1_Option_Option'$1_ValidatorConfig_Config'(s2))}

// struct Option::Option<DiemAccount::KeyRotationCapability> at ../../../../language/move-stdlib/sources/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s1), $vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s2))}

// struct Option::Option<DiemAccount::WithdrawCapability> at ../../../../language/move-stdlib/sources/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsEqual'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s1), $vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s2))}

// spec fun at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:87:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:232:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::ValidatorConfig at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:25:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s1), $config#$1_ValidatorConfig_ValidatorConfig(s2))
    && $IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s1), $operator_account#$1_ValidatorConfig_ValidatorConfig(s2))
    && $IsEqual'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s1), $human_name#$1_ValidatorConfig_ValidatorConfig(s2))}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// struct ValidatorConfig::Config at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:19:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    $IsEqual'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s1), $consensus_pubkey#$1_ValidatorConfig_Config(s2))
    && $IsEqual'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s1), $validator_network_addresses#$1_ValidatorConfig_Config(s2))
    && $IsEqual'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s1), $fullnode_network_addresses#$1_ValidatorConfig_Config(s2))}

// struct SlidingNonce::SlidingNonce at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:11:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:96:5+261
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:458:9+84
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:462:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:462:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:462:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:462:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:462:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816)
}

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:19:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsEqual'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:19:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s1), $payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s2))}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:19:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:19:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsEqual'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:19:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:32:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    s1 == s2
}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:42:5+65
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::NewEpochEvent at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:27:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:647:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:48:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    $IsEqual'u8'($scheme#$1_DiemSystem_DiemSystem(s1), $scheme#$1_DiemSystem_DiemSystem(s2))
    && $IsEqual'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s1), $validators#$1_DiemSystem_DiemSystem(s2))}

// struct DiemSystem::CapabilityHolder at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:39:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:18:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    $IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(s1), $addr#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s1), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s1), $config#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s1), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s2))}

// spec fun at ../../../../language/move-stdlib/sources/FixedPoint32.move:204:10+244
function {:inline} $1_FixedPoint32_spec_create_from_rational(numerator: int, denominator: int): $1_FixedPoint32_FixedPoint32 {
    (if ($IsEqual'num'(numerator, denominator)) then ($1_FixedPoint32_FixedPoint32(1)) else ($1_FixedPoint32_FixedPoint32(2)))
}

// struct FixedPoint32::FixedPoint32 at ../../../../language/move-stdlib/sources/FixedPoint32.move:17:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// struct RegisteredCurrencies::RegisteredCurrencies at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:13:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsEqual'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s1), $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s2))}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1415:5+102
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1415:5+102
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1427:5+235
function {:inline} $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    (var addr := 173345816; ($ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, addr))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1427:5+235
function {:inline} $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    (var addr := 173345816; ($ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, addr))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1465:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1465:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1859:9+108
function {:inline} $1_Diem_spec_is_currency'#3'($1_Diem_CurrencyInfo'#3'_$memory: $Memory $1_Diem_CurrencyInfo'#3'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#3'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1859:9+108
function {:inline} $1_Diem_spec_is_currency'#4'($1_Diem_CurrencyInfo'#4'_$memory: $Memory $1_Diem_CurrencyInfo'#4'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#4'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1859:9+108
function {:inline} $1_Diem_spec_is_currency'#5'($1_Diem_CurrencyInfo'#5'_$memory: $Memory $1_Diem_CurrencyInfo'#5'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#5'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1864:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1864:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1874:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1874:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#3'($1_Diem_CurrencyInfo'#3'_$memory: $Memory $1_Diem_CurrencyInfo'#3'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'($ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1874:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#4'($1_Diem_CurrencyInfo'#4'_$memory: $Memory $1_Diem_CurrencyInfo'#4'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'($ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1874:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#5'($1_Diem_CurrencyInfo'#5'_$memory: $Memory $1_Diem_CurrencyInfo'#5'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'($ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1879:9+114
function {:inline} $1_Diem_spec_can_mint'#3'($1_Diem_CurrencyInfo'#3'_$memory: $Memory $1_Diem_CurrencyInfo'#3'): bool {
    $can_mint#$1_Diem_CurrencyInfo'#3'($ResourceValue($1_Diem_CurrencyInfo'#3'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1879:9+114
function {:inline} $1_Diem_spec_can_mint'#4'($1_Diem_CurrencyInfo'#4'_$memory: $Memory $1_Diem_CurrencyInfo'#4'): bool {
    $can_mint#$1_Diem_CurrencyInfo'#4'($ResourceValue($1_Diem_CurrencyInfo'#4'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1879:9+114
function {:inline} $1_Diem_spec_can_mint'#5'($1_Diem_CurrencyInfo'#5'_$memory: $Memory $1_Diem_CurrencyInfo'#5'): bool {
    $can_mint#$1_Diem_CurrencyInfo'#5'($ResourceValue($1_Diem_CurrencyInfo'#5'_$memory, 173345816))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1885:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1891:9+122
function {:inline} $1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_BurnCapability'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1896:9+118
function {:inline} $1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/Diem.move:1901:9+107
function {:inline} $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr)
}

// struct Diem::Diem<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:26:5+134
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/Diem.move:26:5+134
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at ../../../../diem-move/diem-framework/core/sources/Diem.move:26:5+134
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::Diem<#2> at ../../../../diem-move/diem-framework/core/sources/Diem.move:26:5+134
type {:datatype} $1_Diem_Diem'#2';
function {:constructor} $1_Diem_Diem'#2'($value: int): $1_Diem_Diem'#2';
function {:inline} $Update'$1_Diem_Diem'#2''_value(s: $1_Diem_Diem'#2', x: int): $1_Diem_Diem'#2' {
    $1_Diem_Diem'#2'(x)
}
function $IsValid'$1_Diem_Diem'#2''(s: $1_Diem_Diem'#2'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#2'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#2''(s1: $1_Diem_Diem'#2', s2: $1_Diem_Diem'#2'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:39:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_BurnCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_BurnCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_BurnCapability'$1_XUS_XUS', x: bool): $1_Diem_BurnCapability'$1_XUS_XUS' {
    $1_Diem_BurnCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''(s: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XUS_XUS''(s1: $1_Diem_BurnCapability'$1_XUS_XUS', s2: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';

// struct Diem::BurnCapability<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/Diem.move:39:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnCapability<#1> at ../../../../diem-move/diem-framework/core/sources/Diem.move:39:5+58
type {:datatype} $1_Diem_BurnCapability'#1';
function {:constructor} $1_Diem_BurnCapability'#1'($dummy_field: bool): $1_Diem_BurnCapability'#1';
function {:inline} $Update'$1_Diem_BurnCapability'#1''_dummy_field(s: $1_Diem_BurnCapability'#1', x: bool): $1_Diem_BurnCapability'#1' {
    $1_Diem_BurnCapability'#1'(x)
}
function $IsValid'$1_Diem_BurnCapability'#1''(s: $1_Diem_BurnCapability'#1'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'#1'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'#1''(s1: $1_Diem_BurnCapability'#1', s2: $1_Diem_BurnCapability'#1'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'#1'_$memory: $Memory $1_Diem_BurnCapability'#1';

// struct Diem::BurnEvent at ../../../../diem-move/diem-framework/core/sources/Diem.move:60:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_BurnEvent(s1), $amount#$1_Diem_BurnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_BurnEvent(s1), $currency_code#$1_Diem_BurnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_BurnEvent(s1), $preburn_address#$1_Diem_BurnEvent(s2))}

// struct Diem::CancelBurnEvent at ../../../../diem-move/diem-framework/core/sources/Diem.move:85:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_CancelBurnEvent(s1), $amount#$1_Diem_CancelBurnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s1), $currency_code#$1_Diem_CancelBurnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_CancelBurnEvent(s1), $preburn_address#$1_Diem_CancelBurnEvent(s2))}

// struct Diem::CurrencyInfo<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:113:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/Diem.move:113:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#3> at ../../../../diem-move/diem-framework/core/sources/Diem.move:113:5+2308
type {:datatype} $1_Diem_CurrencyInfo'#3';
function {:constructor} $1_Diem_CurrencyInfo'#3'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#3';
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_total_value(s: $1_Diem_CurrencyInfo'#3', x: int): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'(x, $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_preburn_value(s: $1_Diem_CurrencyInfo'#3', x: int): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#3', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_is_synthetic(s: $1_Diem_CurrencyInfo'#3', x: bool): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_scaling_factor(s: $1_Diem_CurrencyInfo'#3', x: int): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_fractional_part(s: $1_Diem_CurrencyInfo'#3', x: int): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), x, $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_currency_code(s: $1_Diem_CurrencyInfo'#3', x: Vec (int)): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), x, $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_can_mint(s: $1_Diem_CurrencyInfo'#3', x: bool): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), x, $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_mint_events(s: $1_Diem_CurrencyInfo'#3', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), x, $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_burn_events(s: $1_Diem_CurrencyInfo'#3', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_preburn_events(s: $1_Diem_CurrencyInfo'#3', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#3', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#3''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#3', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#3' {
    $1_Diem_CurrencyInfo'#3'($total_value#$1_Diem_CurrencyInfo'#3'(s), $preburn_value#$1_Diem_CurrencyInfo'#3'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s), $fractional_part#$1_Diem_CurrencyInfo'#3'(s), $currency_code#$1_Diem_CurrencyInfo'#3'(s), $can_mint#$1_Diem_CurrencyInfo'#3'(s), $mint_events#$1_Diem_CurrencyInfo'#3'(s), $burn_events#$1_Diem_CurrencyInfo'#3'(s), $preburn_events#$1_Diem_CurrencyInfo'#3'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#3''(s: $1_Diem_CurrencyInfo'#3'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#3''(s1: $1_Diem_CurrencyInfo'#3', s2: $1_Diem_CurrencyInfo'#3'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#3'(s1), $total_value#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#3'(s1), $preburn_value#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'#3'(s1), $is_synthetic#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'#3'(s1), $scaling_factor#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'#3'(s1), $fractional_part#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#3'(s1), $currency_code#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#3'(s1), $can_mint#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#3'(s1), $mint_events#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#3'(s1), $burn_events#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#3'(s1), $preburn_events#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'#3'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#3'(s2))}
var $1_Diem_CurrencyInfo'#3'_$memory: $Memory $1_Diem_CurrencyInfo'#3';

// struct Diem::CurrencyInfo<#4> at ../../../../diem-move/diem-framework/core/sources/Diem.move:113:5+2308
type {:datatype} $1_Diem_CurrencyInfo'#4';
function {:constructor} $1_Diem_CurrencyInfo'#4'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#4';
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_total_value(s: $1_Diem_CurrencyInfo'#4', x: int): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'(x, $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_preburn_value(s: $1_Diem_CurrencyInfo'#4', x: int): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#4', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_is_synthetic(s: $1_Diem_CurrencyInfo'#4', x: bool): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_scaling_factor(s: $1_Diem_CurrencyInfo'#4', x: int): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_fractional_part(s: $1_Diem_CurrencyInfo'#4', x: int): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), x, $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_currency_code(s: $1_Diem_CurrencyInfo'#4', x: Vec (int)): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), x, $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_can_mint(s: $1_Diem_CurrencyInfo'#4', x: bool): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), x, $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_mint_events(s: $1_Diem_CurrencyInfo'#4', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), x, $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_burn_events(s: $1_Diem_CurrencyInfo'#4', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_preburn_events(s: $1_Diem_CurrencyInfo'#4', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#4', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#4''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#4', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#4' {
    $1_Diem_CurrencyInfo'#4'($total_value#$1_Diem_CurrencyInfo'#4'(s), $preburn_value#$1_Diem_CurrencyInfo'#4'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s), $fractional_part#$1_Diem_CurrencyInfo'#4'(s), $currency_code#$1_Diem_CurrencyInfo'#4'(s), $can_mint#$1_Diem_CurrencyInfo'#4'(s), $mint_events#$1_Diem_CurrencyInfo'#4'(s), $burn_events#$1_Diem_CurrencyInfo'#4'(s), $preburn_events#$1_Diem_CurrencyInfo'#4'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#4''(s: $1_Diem_CurrencyInfo'#4'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#4''(s1: $1_Diem_CurrencyInfo'#4', s2: $1_Diem_CurrencyInfo'#4'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#4'(s1), $total_value#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#4'(s1), $preburn_value#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'#4'(s1), $is_synthetic#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'#4'(s1), $scaling_factor#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'#4'(s1), $fractional_part#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#4'(s1), $currency_code#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#4'(s1), $can_mint#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#4'(s1), $mint_events#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#4'(s1), $burn_events#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#4'(s1), $preburn_events#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'#4'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#4'(s2))}
var $1_Diem_CurrencyInfo'#4'_$memory: $Memory $1_Diem_CurrencyInfo'#4';

// struct Diem::CurrencyInfo<#5> at ../../../../diem-move/diem-framework/core/sources/Diem.move:113:5+2308
type {:datatype} $1_Diem_CurrencyInfo'#5';
function {:constructor} $1_Diem_CurrencyInfo'#5'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#5';
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_total_value(s: $1_Diem_CurrencyInfo'#5', x: int): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'(x, $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_preburn_value(s: $1_Diem_CurrencyInfo'#5', x: int): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#5', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_is_synthetic(s: $1_Diem_CurrencyInfo'#5', x: bool): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_scaling_factor(s: $1_Diem_CurrencyInfo'#5', x: int): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_fractional_part(s: $1_Diem_CurrencyInfo'#5', x: int): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), x, $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_currency_code(s: $1_Diem_CurrencyInfo'#5', x: Vec (int)): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), x, $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_can_mint(s: $1_Diem_CurrencyInfo'#5', x: bool): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), x, $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_mint_events(s: $1_Diem_CurrencyInfo'#5', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), x, $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_burn_events(s: $1_Diem_CurrencyInfo'#5', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_preburn_events(s: $1_Diem_CurrencyInfo'#5', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#5', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#5''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#5', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#5' {
    $1_Diem_CurrencyInfo'#5'($total_value#$1_Diem_CurrencyInfo'#5'(s), $preburn_value#$1_Diem_CurrencyInfo'#5'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s), $fractional_part#$1_Diem_CurrencyInfo'#5'(s), $currency_code#$1_Diem_CurrencyInfo'#5'(s), $can_mint#$1_Diem_CurrencyInfo'#5'(s), $mint_events#$1_Diem_CurrencyInfo'#5'(s), $burn_events#$1_Diem_CurrencyInfo'#5'(s), $preburn_events#$1_Diem_CurrencyInfo'#5'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#5''(s: $1_Diem_CurrencyInfo'#5'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#5''(s1: $1_Diem_CurrencyInfo'#5', s2: $1_Diem_CurrencyInfo'#5'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#5'(s1), $total_value#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#5'(s1), $preburn_value#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'#5'(s1), $is_synthetic#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'#5'(s1), $scaling_factor#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'#5'(s1), $fractional_part#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#5'(s1), $currency_code#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#5'(s1), $can_mint#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#5'(s1), $mint_events#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#5'(s1), $burn_events#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#5'(s1), $preburn_events#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'#5'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#5'(s2))}
var $1_Diem_CurrencyInfo'#5'_$memory: $Memory $1_Diem_CurrencyInfo'#5';

// struct Diem::MintCapability<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:35:5+58
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/Diem.move:35:5+58
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at ../../../../diem-move/diem-framework/core/sources/Diem.move:35:5+58
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at ../../../../diem-move/diem-framework/core/sources/Diem.move:46:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_MintEvent(s1), $amount#$1_Diem_MintEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_MintEvent(s1), $currency_code#$1_Diem_MintEvent(s2))}

// struct Diem::Preburn<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:172:5+240
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/Diem.move:172:5+240
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at ../../../../diem-move/diem-framework/core/sources/Diem.move:172:5+240
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::Preburn<#2> at ../../../../diem-move/diem-framework/core/sources/Diem.move:172:5+240
type {:datatype} $1_Diem_Preburn'#2';
function {:constructor} $1_Diem_Preburn'#2'($to_burn: $1_Diem_Diem'#2'): $1_Diem_Preburn'#2';
function {:inline} $Update'$1_Diem_Preburn'#2''_to_burn(s: $1_Diem_Preburn'#2', x: $1_Diem_Diem'#2'): $1_Diem_Preburn'#2' {
    $1_Diem_Preburn'#2'(x)
}
function $IsValid'$1_Diem_Preburn'#2''(s: $1_Diem_Preburn'#2'): bool {
    $IsValid'$1_Diem_Diem'#2''($to_burn#$1_Diem_Preburn'#2'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#2''(s1: $1_Diem_Preburn'#2', s2: $1_Diem_Preburn'#2'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#2'_$memory: $Memory $1_Diem_Preburn'#2';

// struct Diem::PreburnEvent at ../../../../diem-move/diem-framework/core/sources/Diem.move:72:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_PreburnEvent(s1), $amount#$1_Diem_PreburnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_PreburnEvent(s1), $currency_code#$1_Diem_PreburnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_PreburnEvent(s1), $preburn_address#$1_Diem_PreburnEvent(s2))}

// struct Diem::PreburnQueue<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:196:5+152
type {:datatype} $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnQueue'$1_XUS_XUS'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XUS_XUS''_preburns(s: $1_Diem_PreburnQueue'$1_XUS_XUS', x: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS' {
    $1_Diem_PreburnQueue'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''(s: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XUS_XUS''(s1: $1_Diem_PreburnQueue'$1_XUS_XUS', s2: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s1), $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s2))}
var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';

// struct Diem::PreburnQueue<#2> at ../../../../diem-move/diem-framework/core/sources/Diem.move:196:5+152
type {:datatype} $1_Diem_PreburnQueue'#2';
function {:constructor} $1_Diem_PreburnQueue'#2'($preburns: Vec ($1_Diem_PreburnWithMetadata'#2')): $1_Diem_PreburnQueue'#2';
function {:inline} $Update'$1_Diem_PreburnQueue'#2''_preburns(s: $1_Diem_PreburnQueue'#2', x: Vec ($1_Diem_PreburnWithMetadata'#2')): $1_Diem_PreburnQueue'#2' {
    $1_Diem_PreburnQueue'#2'(x)
}
function $IsValid'$1_Diem_PreburnQueue'#2''(s: $1_Diem_PreburnQueue'#2'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'#2'''($preburns#$1_Diem_PreburnQueue'#2'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'#2''(s1: $1_Diem_PreburnQueue'#2', s2: $1_Diem_PreburnQueue'#2'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'#2'''($preburns#$1_Diem_PreburnQueue'#2'(s1), $preburns#$1_Diem_PreburnQueue'#2'(s2))}
var $1_Diem_PreburnQueue'#2'_$memory: $Memory $1_Diem_PreburnQueue'#2';

// struct Diem::PreburnWithMetadata<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/Diem.move:180:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn: $1_Diem_Preburn'$1_XUS_XUS', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s1: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', s2: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s1), $preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s1), $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s2))}

// struct Diem::PreburnWithMetadata<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/Diem.move:180:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn: $1_Diem_Preburn'$1_XDX_XDX', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s1: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', s2: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s1), $preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s1), $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s2))}

// struct Diem::PreburnWithMetadata<#0> at ../../../../diem-move/diem-framework/core/sources/Diem.move:180:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'#0';
function {:constructor} $1_Diem_PreburnWithMetadata'#0'($preburn: $1_Diem_Preburn'#0', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#0';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_preburn(s: $1_Diem_PreburnWithMetadata'#0', x: $1_Diem_Preburn'#0'): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'(x, $metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_metadata(s: $1_Diem_PreburnWithMetadata'#0', x: Vec (int)): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#0''(s: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsValid'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#0''(s1: $1_Diem_PreburnWithMetadata'#0', s2: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsEqual'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s1), $preburn#$1_Diem_PreburnWithMetadata'#0'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s1), $metadata#$1_Diem_PreburnWithMetadata'#0'(s2))}

// struct Diem::PreburnWithMetadata<#2> at ../../../../diem-move/diem-framework/core/sources/Diem.move:180:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'#2';
function {:constructor} $1_Diem_PreburnWithMetadata'#2'($preburn: $1_Diem_Preburn'#2', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#2';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#2''_preburn(s: $1_Diem_PreburnWithMetadata'#2', x: $1_Diem_Preburn'#2'): $1_Diem_PreburnWithMetadata'#2' {
    $1_Diem_PreburnWithMetadata'#2'(x, $metadata#$1_Diem_PreburnWithMetadata'#2'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#2''_metadata(s: $1_Diem_PreburnWithMetadata'#2', x: Vec (int)): $1_Diem_PreburnWithMetadata'#2' {
    $1_Diem_PreburnWithMetadata'#2'($preburn#$1_Diem_PreburnWithMetadata'#2'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#2''(s: $1_Diem_PreburnWithMetadata'#2'): bool {
    $IsValid'$1_Diem_Preburn'#2''($preburn#$1_Diem_PreburnWithMetadata'#2'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#2'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#2''(s1: $1_Diem_PreburnWithMetadata'#2', s2: $1_Diem_PreburnWithMetadata'#2'): bool {
    $IsEqual'$1_Diem_Preburn'#2''($preburn#$1_Diem_PreburnWithMetadata'#2'(s1), $preburn#$1_Diem_PreburnWithMetadata'#2'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#2'(s1), $metadata#$1_Diem_PreburnWithMetadata'#2'(s2))}

// struct Diem::ToXDXExchangeRateUpdateEvent at ../../../../diem-move/diem-framework/core/sources/Diem.move:96:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsEqual'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s1), $currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s2))
    && $IsEqual'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s1), $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s2))}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:337:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_definition)))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:337:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_definition)))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:337:9+263
function {:inline} $1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'#0'(window) + $time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_definition)))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:343:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    (if ($1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XUS_XUS'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(window), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))) else (window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:343:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    (if ($1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XDX_XDX'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(window), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))) else (window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:343:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): $1_AccountLimits_Window'#0' {
    (if ($1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'#0'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'#0'(window), $limit_address#$1_AccountLimits_Window'#0'(window))) else (window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:423:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:423:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:423:10+159
function {:inline} $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_LimitsDefinition'#0' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'(window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:427:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:427:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:427:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): bool {
    $1_AccountLimits_spec_is_unrestricted'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:431:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:431:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:431:10+167
function {:inline} $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:435:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:435:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:435:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', receiving: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:442:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'(receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(receiving) + amount))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:442:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'(receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(receiving) + amount))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:442:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'#0'(receiving: $1_AccountLimits_Window'#0', amount: int): $1_AccountLimits_Window'#0' {
    $Update'$1_AccountLimits_Window'#0''_tracked_balance($Update'$1_AccountLimits_Window'#0''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'#0'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'#0'(receiving) + amount))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:506:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:506:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:506:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', sending: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:511:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'(sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(sending) + amount)), (if ((amount >= $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(sending) - amount))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:511:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'(sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(sending) + amount)), (if ((amount >= $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(sending) - amount))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:511:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'#0'(sending: $1_AccountLimits_Window'#0', amount: int): $1_AccountLimits_Window'#0' {
    $Update'$1_AccountLimits_Window'#0''_tracked_balance($Update'$1_AccountLimits_Window'#0''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'#0'(sending) + amount)), (if ((amount >= $tracked_balance#$1_AccountLimits_Window'#0'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'#0'(sending) - amount))))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:532:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), 86400000000))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:532:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), 86400000000))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:532:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'#0'(limits_def: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_def), 86400000000))
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:555:9+115
function {:inline} $1_AccountLimits_spec_has_window_published'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'#0'_$memory, addr)
}

// struct AccountLimits::AccountLimitMutationCapability at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:13:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:19:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:19:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// struct AccountLimits::LimitsDefinition<#0> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:19:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'#0';
function {:constructor} $1_AccountLimits_LimitsDefinition'#0'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'#0';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'#0''(s: $1_AccountLimits_LimitsDefinition'#0'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'#0''(s1: $1_AccountLimits_LimitsDefinition'#0', s2: $1_AccountLimits_LimitsDefinition'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0';

// struct AccountLimits::Window<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:39:5+492
type {:datatype} $1_AccountLimits_Window'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_Window'$1_XUS_XUS'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_start(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'(x, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''(s: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''(s1: $1_AccountLimits_Window'$1_XUS_XUS', s2: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS';

// struct AccountLimits::Window<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:39:5+492
type {:datatype} $1_AccountLimits_Window'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_Window'$1_XDX_XDX'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_start(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'(x, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''(s: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''(s1: $1_AccountLimits_Window'$1_XDX_XDX', s2: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX';

// struct AccountLimits::Window<#0> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:39:5+492
type {:datatype} $1_AccountLimits_Window'#0';
function {:constructor} $1_AccountLimits_Window'#0'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#0';
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_start(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'(x, $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_inflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), x, $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_outflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), x, $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_tracked_balance(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), x, $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_limit_address(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#0''(s: $1_AccountLimits_Window'#0'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#0'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#0''(s1: $1_AccountLimits_Window'#0', s2: $1_AccountLimits_Window'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0';

// struct AccountLimits::Window<#6> at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:39:5+492
type {:datatype} $1_AccountLimits_Window'#6';
function {:constructor} $1_AccountLimits_Window'#6'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#6';
function {:inline} $Update'$1_AccountLimits_Window'#6''_window_start(s: $1_AccountLimits_Window'#6', x: int): $1_AccountLimits_Window'#6' {
    $1_AccountLimits_Window'#6'(x, $window_inflow#$1_AccountLimits_Window'#6'(s), $window_outflow#$1_AccountLimits_Window'#6'(s), $tracked_balance#$1_AccountLimits_Window'#6'(s), $limit_address#$1_AccountLimits_Window'#6'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#6''_window_inflow(s: $1_AccountLimits_Window'#6', x: int): $1_AccountLimits_Window'#6' {
    $1_AccountLimits_Window'#6'($window_start#$1_AccountLimits_Window'#6'(s), x, $window_outflow#$1_AccountLimits_Window'#6'(s), $tracked_balance#$1_AccountLimits_Window'#6'(s), $limit_address#$1_AccountLimits_Window'#6'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#6''_window_outflow(s: $1_AccountLimits_Window'#6', x: int): $1_AccountLimits_Window'#6' {
    $1_AccountLimits_Window'#6'($window_start#$1_AccountLimits_Window'#6'(s), $window_inflow#$1_AccountLimits_Window'#6'(s), x, $tracked_balance#$1_AccountLimits_Window'#6'(s), $limit_address#$1_AccountLimits_Window'#6'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#6''_tracked_balance(s: $1_AccountLimits_Window'#6', x: int): $1_AccountLimits_Window'#6' {
    $1_AccountLimits_Window'#6'($window_start#$1_AccountLimits_Window'#6'(s), $window_inflow#$1_AccountLimits_Window'#6'(s), $window_outflow#$1_AccountLimits_Window'#6'(s), x, $limit_address#$1_AccountLimits_Window'#6'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#6''_limit_address(s: $1_AccountLimits_Window'#6', x: int): $1_AccountLimits_Window'#6' {
    $1_AccountLimits_Window'#6'($window_start#$1_AccountLimits_Window'#6'(s), $window_inflow#$1_AccountLimits_Window'#6'(s), $window_outflow#$1_AccountLimits_Window'#6'(s), $tracked_balance#$1_AccountLimits_Window'#6'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#6''(s: $1_AccountLimits_Window'#6'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#6'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#6'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#6'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#6'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#6'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#6''(s1: $1_AccountLimits_Window'#6', s2: $1_AccountLimits_Window'#6'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#6'_$memory: $Memory $1_AccountLimits_Window'#6';

// fun AccountLimits::current_time [baseline] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
procedure {:inline 1} $1_AccountLimits_current_time() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t1 := DiemTimestamp::is_genesis() on_abort goto L5 with $t2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:13+27
    assume {:print "$at(35,26740,26767)"} true;
    call $t1 := $1_DiemTimestamp_is_genesis();
    if ($abort_flag) {
        assume {:print "$at(35,26740,26767)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(20,2):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
L1:

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    goto L2;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
L0:

    // $t3 := opaque begin: DiemTimestamp::now_microseconds() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33

    // assume Identical($t4, Not(DiemTimestamp::$is_operating())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume ($t4 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L7 else goto L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    if ($t4) { goto L7; } else { goto L6; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(0, $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t2));

    // trace_abort($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume {:print "$at(35,26776,26809)"} true;
    assume {:print "$track_abort(20,2):", $t2} $t2 == $t2;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    goto L5;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
L6:

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, DiemTimestamp::spec_now_microseconds()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume $IsEqual'u64'($t3, $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // $t3 := opaque end: DiemTimestamp::now_microseconds() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33

    // $t0 := $t3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    $t0 := $t3;

    // trace_local[tmp#$0]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    assume {:print "$track_local(20,2,0):", $t3} $t3 == $t3;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    goto L3;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:42+1
L2:

    // $t5 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:42+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t0 := $t5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    $t0 := $t5;

    // trace_local[tmp#$0]($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    assume {:print "$track_local(20,2,0):", $t5} $t5 == $t5;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
L3:

    // trace_return[0]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    assume {:print "$track_return(20,2,0):", $t0} $t0 == $t0;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
    assume {:print "$at(35,26814,26815)"} true;
L4:

    // return $t0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
    $ret0 := $t0;
    return;

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
L5:

    // abort($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun AccountLimits::current_time [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
procedure {:timeLimit 40} $1_AccountLimits_current_time$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $temp_0'u64': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume {:print "$at(35,26702,26703)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:560:5+113
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // $t1 := DiemTimestamp::is_genesis() on_abort goto L5 with $t2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:13+27
    assume {:print "$at(35,26740,26767)"} true;
    call $t1 := $1_DiemTimestamp_is_genesis();
    if ($abort_flag) {
        assume {:print "$at(35,26740,26767)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(20,2):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
L1:

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    goto L2;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
L0:

    // $t3 := opaque begin: DiemTimestamp::now_microseconds() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33

    // assume Identical($t4, Not(DiemTimestamp::$is_operating())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume ($t4 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t4) goto L7 else goto L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    if ($t4) { goto L7; } else { goto L6; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(0, $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t2));

    // trace_abort($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume {:print "$at(35,26776,26809)"} true;
    assume {:print "$track_abort(20,2):", $t2} $t2 == $t2;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    goto L5;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
L6:

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, DiemTimestamp::spec_now_microseconds()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33
    assume $IsEqual'u64'($t3, $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // $t3 := opaque end: DiemTimestamp::now_microseconds() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:49+33

    // $t0 := $t3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    $t0 := $t3;

    // trace_local[tmp#$0]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    assume {:print "$track_local(20,2,0):", $t3} $t3 == $t3;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    goto L3;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:42+1
L2:

    // $t5 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:42+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t0 := $t5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    $t0 := $t5;

    // trace_local[tmp#$0]($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    assume {:print "$track_local(20,2,0):", $t5} $t5 == $t5;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
L3:

    // trace_return[0]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:561:9+73
    assume {:print "$track_return(20,2,0):", $t0} $t0 == $t0;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
    assume {:print "$at(35,26814,26815)"} true;
L4:

    // return $t0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
    $ret0 := $t0;
    return;

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
L5:

    // abort($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:562:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_receive_and_update_window [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
procedure {:timeLimit 40} $1_AccountLimits_can_receive_and_update_window$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'#0')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: $1_AccountLimits_LimitsDefinition'#0';
    var $t5: $1_AccountLimits_Window'#0';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_AccountLimits_LimitsDefinition'#0';
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_AccountLimits_Window'#0';
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t41: $Mutation (int);
    var $t42: int;
    var $t43: int;
    var $t44: $Mutation (int);
    var $t45: bool;
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'#0');
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#158: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t41));
    assume IsEmptyVec(p#$Mutation($t44));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume {:print "$at(35,17328,17329)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @159 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @158 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#158 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // $t5 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $t5 := $Dereference($t1);

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t6 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:52+23
    assume {:print "$at(35,17527,17550)"} true;
    $t6 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t7 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:17+6
    $t7 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t6);

    // if ($t7) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111

    // $t8 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:100+18
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41

    // assume WellFormed($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41
    assume $IsEqual'u64'($t9, 0);

    // $t9 := opaque end: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    assume {:print "$at(35,17484,17595)"} true;
    assume {:print "$track_abort(20,0):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    $t10 := $t9;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    goto L13;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:75+9
    assume {:print "$at(35,17671,17680)"} true;
L0:

    // $t11 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:75+23
    $t11 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t12 := get_global<AccountLimits::LimitsDefinition<#0>>($t11) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(35,17629,17642)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // trace_local[limits_definition]($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:13+17
    assume {:print "$track_local(20,0,4):", $t12} $t12 == $t12;

    // $t13 := opaque begin: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume {:print "$at(35,17780,17814)"} true;

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume $IsValid'bool'($t13);

    // assume Eq<bool>($t13, AccountLimits::spec_is_unrestricted<#0>($t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume $IsEqual'bool'($t13, $1_AccountLimits_spec_is_unrestricted'#0'($t12));

    // $t13 := opaque end: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34

    // if ($t13) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:9+51
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11

    // $t14 := true at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:56+4
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    assume {:print "$track_return(20,0,0):", $t14} $t14 == $t14;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t15 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    $t15 := $t14;

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    goto L12;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:22+9
    assume {:print "$at(35,17851,17860)"} true;
L2:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42

    // $t16 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    $t16 := $Dereference($t1);

    // assume Identical($t17, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume ($t17 == ((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t12)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t17) goto L15 else goto L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    if ($t17) { goto L15; } else { goto L14; }

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
L15:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Eq(0, $t10)), And(Not(DiemTimestamp::$is_operating()), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume (((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t12)) > $MAX_U64) && $IsEqual'num'(0, $t10)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t10)));

    // trace_abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume {:print "$at(35,17838,17880)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    goto L13;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
L14:

    // @160 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@160]<#0>($t16, $t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160, $t16, $t12));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42

    // $t18 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:17+23
    assume {:print "$at(35,18051,18074)"} true;
    $t18 := $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t19 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:44+7
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:52+1
    call $t20 := $Sub($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18086,18087)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t21 := <=($t18, $t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:41+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    if ($t21) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
L5:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:85+7
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31

    // assume WellFormed($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31
    assume $IsEqual'u64'($t23, 0);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31

    // trace_abort($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    assume {:print "$at(35,18043,18128)"} true;
    assume {:print "$track_abort(20,0):", $t23} $t23 == $t23;

    // $t10 := move($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    $t10 := $t23;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    goto L13;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:26+9
    assume {:print "$at(35,18155,18164)"} true;
L4:

    // $t24 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:26+23
    $t24 := $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t25 := +($t24, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:50+1
    call $t25 := $AddU64($t24, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18179,18180)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t26 := get_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:63+28
    $t26 := $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t12);

    // $t27 := <=($t25, $t26) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:60+2
    call $t27 := $Le($t25, $t26);

    // trace_local[inflow_ok]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:13+9
    assume {:print "$track_local(20,0,3):", $t27} $t27 == $t27;

    // $t28 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:17+25
    assume {:print "$at(35,18296,18321)"} true;
    $t28 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t29 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:46+7
    $t29 := 18446744073709551615;
    assume $IsValid'u64'($t29);

    // $t30 := -($t29, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:54+1
    call $t30 := $Sub($t29, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18333,18334)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t31 := <=($t28, $t30) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:43+2
    call $t31 := $Le($t28, $t30);

    // if ($t31) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    if ($t31) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
L7:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87

    // $t32 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:87+7
    $t32 := 0;
    assume $IsValid'u64'($t32);

    // $t33 := opaque begin: Errors::limit_exceeded($t32) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31

    // assume WellFormed($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31
    assume $IsValid'u64'($t33);

    // assume Eq<u64>($t33, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31
    assume $IsEqual'u64'($t33, 0);

    // $t33 := opaque end: Errors::limit_exceeded($t32) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31

    // trace_abort($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    assume {:print "$at(35,18288,18375)"} true;
    assume {:print "$track_abort(20,0):", $t33} $t33 == $t33;

    // $t10 := move($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    $t10 := $t33;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    goto L13;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:27+9
    assume {:print "$at(35,18403,18412)"} true;
L6:

    // $t34 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:27+25
    $t34 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t35 := +($t34, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:53+1
    call $t35 := $AddU64($t34, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18429,18430)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t36 := get_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:66+29
    $t36 := $max_holding#$1_AccountLimits_LimitsDefinition'#0'($t12);

    // $t37 := <=($t35, $t36) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:63+2
    call $t37 := $Le($t35, $t36);

    // trace_local[holding_ok]($t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:13+10
    assume {:print "$track_local(20,0,2):", $t37} $t37 == $t37;

    // $t38 := &&($t27, $t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:23+2
    assume {:print "$at(35,18580,18582)"} true;
    call $t38 := $And($t27, $t37);

    // if ($t38) goto L8 else goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    if ($t38) { goto L8; } else { goto L9; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
L9:

    // goto L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    goto L10;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
L8:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188

    // goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    goto L11;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:39+9
    assume {:print "$at(35,18635,18644)"} true;
L10:

    // $t39 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:39+23
    $t39 := $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t40 := +($t39, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:63+1
    call $t40 := $AddU64($t39, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18659,18660)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t41 := borrow_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+23
    $t41 := $ChildMutation($t1, 1, $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t41, $t40) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+58
    $t41 := $UpdateMutation($t41, $t40);

    // write_back[Reference($t1).window_inflow (u64)]($t41) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+58
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_window_inflow($Dereference($t1), $Dereference($t41)));

    // $t42 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:41+25
    assume {:print "$at(35,18709,18734)"} true;
    $t42 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t43 := +($t42, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:67+1
    call $t43 := $AddU64($t42, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18735,18736)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t44 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+25
    $t44 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t44, $t43) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+62
    $t44 := $UpdateMutation($t44, $t43);

    // write_back[Reference($t1).tracked_balance (u64)]($t44) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+62
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_tracked_balance($Dereference($t1), $Dereference($t44)));

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+9
    assume {:print "$at(35,18764,18773)"} true;
L11:

    // $t45 := &&($t27, $t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:19+2
    call $t45 := $And($t27, $t37);

    // trace_return[0]($t45) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    assume {:print "$track_return(20,0,0):", $t45} $t45 == $t45;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t15 := move($t45) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    $t15 := $t45;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:389:5+1
    assume {:print "$at(35,18792,18793)"} true;
L12:

    // assert Not(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:398:9+98
    assume {:print "$at(35,19068,19166)"} true;
    assert {:msg "assert_failed(35,19068,19166): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $limit_address#$1_AccountLimits_Window'#0'($t5));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:408:9+102
    assume {:print "$at(35,19563,19665)"} true;
    assert {:msg "assert_failed(35,19563,19665): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:409:9+104
    assume {:print "$at(35,19674,19778)"} true;
    assert {:msg "assert_failed(35,19674,19778): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159));

    // assert Eq<bool>($t15, AccountLimits::spec_receiving_limits_ok<#0>($t5, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:415:9+67
    assume {:print "$at(35,19919,19986)"} true;
    assert {:msg "assert_failed(35,19919,19986): post-condition does not hold"}
      $IsEqual'bool'($t15, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t5, $t0));

    // assert (if And($t15, Not(AccountLimits::spec_window_unrestricted<#0>($t5))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t5), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t5)), Eq<AccountLimits::Window<#0>>($t1, $t5))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    assume {:print "$at(35,19995,20274)"} true;
    assert {:msg "assert_failed(35,19995,20274): post-condition does not hold"}
      (if (($t15 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t5))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t5), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t5)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $t5))));

    // return $t15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:389:5+1
    assume {:print "$at(35,18792,18793)"} true;
L13:

    // assert Or(Or(Or(Or(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    assume {:print "$at(35,18798,18954)"} true;
    assert {:msg "assert_failed(35,18798,18954): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $limit_address#$1_AccountLimits_Window'#0'($t5)) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159)));

    // assert Or(Or(Or(Or(And(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), Eq(0, $t10)), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]())), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    assert {:msg "assert_failed(35,18798,18954): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $limit_address#$1_AccountLimits_Window'#0'($t5)) && $IsEqual'num'(0, $t10)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5)) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5)) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5))) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159)) && $IsEqual'num'(0, $t10)));

    // abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_receive_and_update_window<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
procedure {:timeLimit 40} $1_AccountLimits_can_receive_and_update_window'$1_XUS_XUS'$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS'))
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t5: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t41: $Mutation (int);
    var $t42: int;
    var $t43: int;
    var $t44: $Mutation (int);
    var $t45: bool;
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'': $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t41));
    assume IsEmptyVec(p#$Mutation($t44));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume {:print "$at(35,17328,17329)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @159 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @158 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // $t5 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $t5 := $Dereference($t1);

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t6 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:52+23
    assume {:print "$at(35,17527,17550)"} true;
    $t6 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t7 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:17+6
    $t7 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t6);

    // if ($t7) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111

    // $t8 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:100+18
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41

    // assume WellFormed($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41
    assume $IsEqual'u64'($t9, 0);

    // $t9 := opaque end: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    assume {:print "$at(35,17484,17595)"} true;
    assume {:print "$track_abort(20,0):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    $t10 := $t9;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    goto L13;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:75+9
    assume {:print "$at(35,17671,17680)"} true;
L0:

    // $t11 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:75+23
    $t11 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t12 := get_global<AccountLimits::LimitsDefinition<#0>>($t11) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(35,17629,17642)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // trace_local[limits_definition]($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:13+17
    assume {:print "$track_local(20,0,4):", $t12} $t12 == $t12;

    // $t13 := opaque begin: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume {:print "$at(35,17780,17814)"} true;

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume $IsValid'bool'($t13);

    // assume Eq<bool>($t13, AccountLimits::spec_is_unrestricted<#0>($t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume $IsEqual'bool'($t13, $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($t12));

    // $t13 := opaque end: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34

    // if ($t13) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:9+51
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11

    // $t14 := true at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:56+4
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    assume {:print "$track_return(20,0,0):", $t14} $t14 == $t14;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t15 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    $t15 := $t14;

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    goto L12;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:22+9
    assume {:print "$at(35,17851,17860)"} true;
L2:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42

    // $t16 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    $t16 := $Dereference($t1);

    // assume Identical($t17, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume ($t17 == ((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t17) goto L15 else goto L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    if ($t17) { goto L15; } else { goto L14; }

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
L15:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Eq(0, $t10)), And(Not(DiemTimestamp::$is_operating()), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume (((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12)) > $MAX_U64) && $IsEqual'num'(0, $t10)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t10)));

    // trace_abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume {:print "$at(35,17838,17880)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    goto L13;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
L14:

    // @160 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@160]<#0>($t16, $t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160, $t16, $t12));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42

    // $t18 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:17+23
    assume {:print "$at(35,18051,18074)"} true;
    $t18 := $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t19 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:44+7
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:52+1
    call $t20 := $Sub($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18086,18087)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t21 := <=($t18, $t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:41+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    if ($t21) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
L5:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:85+7
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31

    // assume WellFormed($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31
    assume $IsEqual'u64'($t23, 0);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31

    // trace_abort($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    assume {:print "$at(35,18043,18128)"} true;
    assume {:print "$track_abort(20,0):", $t23} $t23 == $t23;

    // $t10 := move($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    $t10 := $t23;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    goto L13;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:26+9
    assume {:print "$at(35,18155,18164)"} true;
L4:

    // $t24 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:26+23
    $t24 := $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t25 := +($t24, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:50+1
    call $t25 := $AddU64($t24, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18179,18180)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t26 := get_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:63+28
    $t26 := $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12);

    // $t27 := <=($t25, $t26) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:60+2
    call $t27 := $Le($t25, $t26);

    // trace_local[inflow_ok]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:13+9
    assume {:print "$track_local(20,0,3):", $t27} $t27 == $t27;

    // $t28 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:17+25
    assume {:print "$at(35,18296,18321)"} true;
    $t28 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t29 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:46+7
    $t29 := 18446744073709551615;
    assume $IsValid'u64'($t29);

    // $t30 := -($t29, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:54+1
    call $t30 := $Sub($t29, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18333,18334)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t31 := <=($t28, $t30) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:43+2
    call $t31 := $Le($t28, $t30);

    // if ($t31) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    if ($t31) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
L7:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87

    // $t32 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:87+7
    $t32 := 0;
    assume $IsValid'u64'($t32);

    // $t33 := opaque begin: Errors::limit_exceeded($t32) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31

    // assume WellFormed($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31
    assume $IsValid'u64'($t33);

    // assume Eq<u64>($t33, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31
    assume $IsEqual'u64'($t33, 0);

    // $t33 := opaque end: Errors::limit_exceeded($t32) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31

    // trace_abort($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    assume {:print "$at(35,18288,18375)"} true;
    assume {:print "$track_abort(20,0):", $t33} $t33 == $t33;

    // $t10 := move($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    $t10 := $t33;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    goto L13;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:27+9
    assume {:print "$at(35,18403,18412)"} true;
L6:

    // $t34 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:27+25
    $t34 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t35 := +($t34, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:53+1
    call $t35 := $AddU64($t34, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18429,18430)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t36 := get_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:66+29
    $t36 := $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12);

    // $t37 := <=($t35, $t36) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:63+2
    call $t37 := $Le($t35, $t36);

    // trace_local[holding_ok]($t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:13+10
    assume {:print "$track_local(20,0,2):", $t37} $t37 == $t37;

    // $t38 := &&($t27, $t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:23+2
    assume {:print "$at(35,18580,18582)"} true;
    call $t38 := $And($t27, $t37);

    // if ($t38) goto L8 else goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    if ($t38) { goto L8; } else { goto L9; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
L9:

    // goto L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    goto L10;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
L8:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188

    // goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    goto L11;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:39+9
    assume {:print "$at(35,18635,18644)"} true;
L10:

    // $t39 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:39+23
    $t39 := $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t40 := +($t39, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:63+1
    call $t40 := $AddU64($t39, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18659,18660)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t41 := borrow_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+23
    $t41 := $ChildMutation($t1, 1, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t41, $t40) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+58
    $t41 := $UpdateMutation($t41, $t40);

    // write_back[Reference($t1).window_inflow (u64)]($t41) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+58
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow($Dereference($t1), $Dereference($t41)));

    // $t42 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:41+25
    assume {:print "$at(35,18709,18734)"} true;
    $t42 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t43 := +($t42, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:67+1
    call $t43 := $AddU64($t42, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18735,18736)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t44 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+25
    $t44 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t44, $t43) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+62
    $t44 := $UpdateMutation($t44, $t43);

    // write_back[Reference($t1).tracked_balance (u64)]($t44) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+62
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Dereference($t1), $Dereference($t44)));

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+9
    assume {:print "$at(35,18764,18773)"} true;
L11:

    // $t45 := &&($t27, $t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:19+2
    call $t45 := $And($t27, $t37);

    // trace_return[0]($t45) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    assume {:print "$track_return(20,0,0):", $t45} $t45 == $t45;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t15 := move($t45) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    $t15 := $t45;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:389:5+1
    assume {:print "$at(35,18792,18793)"} true;
L12:

    // assert Not(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:398:9+98
    assume {:print "$at(35,19068,19166)"} true;
    assert {:msg "assert_failed(35,19068,19166): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t5));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:408:9+102
    assume {:print "$at(35,19563,19665)"} true;
    assert {:msg "assert_failed(35,19563,19665): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:409:9+104
    assume {:print "$at(35,19674,19778)"} true;
    assert {:msg "assert_failed(35,19674,19778): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159));

    // assert Eq<bool>($t15, AccountLimits::spec_receiving_limits_ok<#0>($t5, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:415:9+67
    assume {:print "$at(35,19919,19986)"} true;
    assert {:msg "assert_failed(35,19919,19986): post-condition does not hold"}
      $IsEqual'bool'($t15, $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5, $t0));

    // assert (if And($t15, Not(AccountLimits::spec_window_unrestricted<#0>($t5))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t5), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t5)), Eq<AccountLimits::Window<#0>>($t1, $t5))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    assume {:print "$at(35,19995,20274)"} true;
    assert {:msg "assert_failed(35,19995,20274): post-condition does not hold"}
      (if (($t15 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $t5))));

    // return $t15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:389:5+1
    assume {:print "$at(35,18792,18793)"} true;
L13:

    // assert Or(Or(Or(Or(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    assume {:print "$at(35,18798,18954)"} true;
    assert {:msg "assert_failed(35,18798,18954): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t5)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159)));

    // assert Or(Or(Or(Or(And(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), Eq(0, $t10)), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]())), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    assert {:msg "assert_failed(35,18798,18954): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t5)) && $IsEqual'num'(0, $t10)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5)) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5)) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5))) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159)) && $IsEqual'num'(0, $t10)));

    // abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_receive_and_update_window<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
procedure {:timeLimit 40} $1_AccountLimits_can_receive_and_update_window'$1_XDX_XDX'$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX'))
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t5: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t41: $Mutation (int);
    var $t42: int;
    var $t43: int;
    var $t44: $Mutation (int);
    var $t45: bool;
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'': $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t41));
    assume IsEmptyVec(p#$Mutation($t44));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume {:print "$at(35,17328,17329)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1465
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @159 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @158 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // $t5 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $t5 := $Dereference($t1);

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:366:5+1
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t6 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:52+23
    assume {:print "$at(35,17527,17550)"} true;
    $t6 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t7 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:17+6
    $t7 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t6);

    // if ($t7) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111

    // $t8 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:100+18
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41

    // assume WellFormed($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41
    assume $IsEqual'u64'($t9, 0);

    // $t9 := opaque end: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:78+41

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    assume {:print "$at(35,17484,17595)"} true;
    assume {:print "$track_abort(20,0):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    $t10 := $t9;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:370:9+111
    goto L13;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:75+9
    assume {:print "$at(35,17671,17680)"} true;
L0:

    // $t11 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:75+23
    $t11 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t12 := get_global<AccountLimits::LimitsDefinition<#0>>($t11) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(35,17629,17642)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // trace_local[limits_definition]($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:371:13+17
    assume {:print "$track_local(20,0,4):", $t12} $t12 == $t12;

    // $t13 := opaque begin: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume {:print "$at(35,17780,17814)"} true;

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume $IsValid'bool'($t13);

    // assume Eq<bool>($t13, AccountLimits::spec_is_unrestricted<#0>($t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34
    assume $IsEqual'bool'($t13, $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($t12));

    // $t13 := opaque end: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:13+34

    // if ($t13) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:9+51
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11

    // $t14 := true at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:56+4
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    assume {:print "$track_return(20,0,0):", $t14} $t14 == $t14;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t15 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    $t15 := $t14;

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:373:49+11
    goto L12;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:22+9
    assume {:print "$at(35,17851,17860)"} true;
L2:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42

    // $t16 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    $t16 := $Dereference($t1);

    // assume Identical($t17, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume ($t17 == ((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t17) goto L15 else goto L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    if ($t17) { goto L15; } else { goto L14; }

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
L15:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Eq(0, $t10)), And(Not(DiemTimestamp::$is_operating()), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume (((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12)) > $MAX_U64) && $IsEqual'num'(0, $t10)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t10)));

    // trace_abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume {:print "$at(35,17838,17880)"} true;
    assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    goto L13;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
L14:

    // @160 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@160]<#0>($t16, $t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42
    assume $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#160, $t16, $t12));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:375:9+42

    // $t18 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:17+23
    assume {:print "$at(35,18051,18074)"} true;
    $t18 := $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t19 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:44+7
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:52+1
    call $t20 := $Sub($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18086,18087)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t21 := <=($t18, $t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:41+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    if ($t21) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
L5:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:85+7
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31

    // assume WellFormed($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31
    assume $IsEqual'u64'($t23, 0);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:62+31

    // trace_abort($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    assume {:print "$at(35,18043,18128)"} true;
    assume {:print "$track_abort(20,0):", $t23} $t23 == $t23;

    // $t10 := move($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    $t10 := $t23;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:378:9+85
    goto L13;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:26+9
    assume {:print "$at(35,18155,18164)"} true;
L4:

    // $t24 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:26+23
    $t24 := $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t25 := +($t24, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:50+1
    call $t25 := $AddU64($t24, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18179,18180)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t26 := get_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:63+28
    $t26 := $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12);

    // $t27 := <=($t25, $t26) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:60+2
    call $t27 := $Le($t25, $t26);

    // trace_local[inflow_ok]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:379:13+9
    assume {:print "$track_local(20,0,3):", $t27} $t27 == $t27;

    // $t28 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:17+25
    assume {:print "$at(35,18296,18321)"} true;
    $t28 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t29 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:46+7
    $t29 := 18446744073709551615;
    assume $IsValid'u64'($t29);

    // $t30 := -($t29, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:54+1
    call $t30 := $Sub($t29, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18333,18334)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t31 := <=($t28, $t30) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:43+2
    call $t31 := $Le($t28, $t30);

    // if ($t31) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    if ($t31) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
L7:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87

    // $t32 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:87+7
    $t32 := 0;
    assume $IsValid'u64'($t32);

    // $t33 := opaque begin: Errors::limit_exceeded($t32) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31

    // assume WellFormed($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31
    assume $IsValid'u64'($t33);

    // assume Eq<u64>($t33, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31
    assume $IsEqual'u64'($t33, 0);

    // $t33 := opaque end: Errors::limit_exceeded($t32) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:64+31

    // trace_abort($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    assume {:print "$at(35,18288,18375)"} true;
    assume {:print "$track_abort(20,0):", $t33} $t33 == $t33;

    // $t10 := move($t33) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    $t10 := $t33;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:381:9+87
    goto L13;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:27+9
    assume {:print "$at(35,18403,18412)"} true;
L6:

    // $t34 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:27+25
    $t34 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t35 := +($t34, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:53+1
    call $t35 := $AddU64($t34, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18429,18430)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t36 := get_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:66+29
    $t36 := $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12);

    // $t37 := <=($t35, $t36) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:63+2
    call $t37 := $Le($t35, $t36);

    // trace_local[holding_ok]($t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:382:13+10
    assume {:print "$track_local(20,0,2):", $t37} $t37 == $t37;

    // $t38 := &&($t27, $t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:23+2
    assume {:print "$at(35,18580,18582)"} true;
    call $t38 := $And($t27, $t37);

    // if ($t38) goto L8 else goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    if ($t38) { goto L8; } else { goto L9; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
L9:

    // goto L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    goto L10;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
L8:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188

    // goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:384:9+188
    goto L11;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:39+9
    assume {:print "$at(35,18635,18644)"} true;
L10:

    // $t39 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:39+23
    $t39 := $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t40 := +($t39, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:63+1
    call $t40 := $AddU64($t39, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18659,18660)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t41 := borrow_field<AccountLimits::Window<#0>>.window_inflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+23
    $t41 := $ChildMutation($t1, 1, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t41, $t40) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+58
    $t41 := $UpdateMutation($t41, $t40);

    // write_back[Reference($t1).window_inflow (u64)]($t41) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:385:13+58
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow($Dereference($t1), $Dereference($t41)));

    // $t42 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:41+25
    assume {:print "$at(35,18709,18734)"} true;
    $t42 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t43 := +($t42, $t0) on_abort goto L13 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:67+1
    call $t43 := $AddU64($t42, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,18735,18736)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,0):", $t10} $t10 == $t10;
        goto L13;
    }

    // $t44 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+25
    $t44 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t44, $t43) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+62
    $t44 := $UpdateMutation($t44, $t43);

    // write_back[Reference($t1).tracked_balance (u64)]($t44) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:386:13+62
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Dereference($t1), $Dereference($t44)));

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+9
    assume {:print "$at(35,18764,18773)"} true;
L11:

    // $t45 := &&($t27, $t37) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:19+2
    call $t45 := $And($t27, $t37);

    // trace_return[0]($t45) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    assume {:print "$track_return(20,0,0):", $t45} $t45 == $t45;

    // trace_local[receiving]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(20,0,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t15 := move($t45) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:388:9+23
    $t15 := $t45;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:389:5+1
    assume {:print "$at(35,18792,18793)"} true;
L12:

    // assert Not(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:398:9+98
    assume {:print "$at(35,19068,19166)"} true;
    assert {:msg "assert_failed(35,19068,19166): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t5));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:408:9+102
    assume {:print "$at(35,19563,19665)"} true;
    assert {:msg "assert_failed(35,19563,19665): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:409:9+104
    assume {:print "$at(35,19674,19778)"} true;
    assert {:msg "assert_failed(35,19674,19778): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159));

    // assert Eq<bool>($t15, AccountLimits::spec_receiving_limits_ok<#0>($t5, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:415:9+67
    assume {:print "$at(35,19919,19986)"} true;
    assert {:msg "assert_failed(35,19919,19986): post-condition does not hold"}
      $IsEqual'bool'($t15, $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5, $t0));

    // assert (if And($t15, Not(AccountLimits::spec_window_unrestricted<#0>($t5))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t5), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t5)), Eq<AccountLimits::Window<#0>>($t1, $t5))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    assume {:print "$at(35,19995,20274)"} true;
    assert {:msg "assert_failed(35,19995,20274): post-condition does not hold"}
      (if (($t15 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $t5))));

    // return $t15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:389:5+1
    assume {:print "$at(35,18792,18793)"} true;
L13:

    // assert Or(Or(Or(Or(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    assume {:print "$at(35,18798,18954)"} true;
    assert {:msg "assert_failed(35,18798,18954): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t5)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159)));

    // assert Or(Or(Or(Or(And(Not(exists[@158]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), Eq(0, $t10)), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@159, @158]<#0>($t5)), $t0), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@158]<#0>($t5))), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@158]<#0>($t5)), Not(DiemTimestamp::$is_operating[@159]())), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    assert {:msg "assert_failed(35,18798,18954): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t5)) && $IsEqual'num'(0, $t10)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5)) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5)) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5))) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#158, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#159)) && $IsEqual'num'(0, $t10)));

    // abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:390:5+156
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_withdraw_and_update_window [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
procedure {:timeLimit 40} $1_AccountLimits_can_withdraw_and_update_window$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'#0')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: $1_AccountLimits_LimitsDefinition'#0';
    var $t4: bool;
    var $t5: $1_AccountLimits_Window'#0';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_AccountLimits_LimitsDefinition'#0';
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_AccountLimits_Window'#0';
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation (int);
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation (int);
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'#0');
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#155: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t30));
    assume IsEmptyVec(p#$Mutation($t36));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume {:print "$at(35,22038,22039)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @156 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @155 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#155 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // $t5 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $t5 := $Dereference($t1);

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume {:print "$track_local(20,1,0):", $t0} $t0 == $t0;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t6 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:52+21
    assume {:print "$at(35,22236,22257)"} true;
    $t6 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t7 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:17+6
    $t7 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t6);

    // if ($t7) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109

    // $t8 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:98+18
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41

    // assume WellFormed($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41
    assume $IsEqual'u64'($t9, 0);

    // $t9 := opaque end: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    assume {:print "$at(35,22193,22302)"} true;
    assume {:print "$track_abort(20,1):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    $t10 := $t9;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    goto L15;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:75+7
    assume {:print "$at(35,22378,22385)"} true;
L0:

    // $t11 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:75+21
    $t11 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t12 := get_global<AccountLimits::LimitsDefinition<#0>>($t11) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(35,22336,22349)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // trace_local[limits_definition]($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:13+17
    assume {:print "$track_local(20,1,3):", $t12} $t12 == $t12;

    // $t13 := opaque begin: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume {:print "$at(35,22485,22519)"} true;

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume $IsValid'bool'($t13);

    // assume Eq<bool>($t13, AccountLimits::spec_is_unrestricted<#0>($t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume $IsEqual'bool'($t13, $1_AccountLimits_spec_is_unrestricted'#0'($t12));

    // $t13 := opaque end: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34

    // if ($t13) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:9+51
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11

    // $t14 := true at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:56+4
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    assume {:print "$track_return(20,1,0):", $t14} $t14 == $t14;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t15 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    $t15 := $t14;

    // goto L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    goto L14;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:22+7
    assume {:print "$at(35,22556,22563)"} true;
L2:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40

    // $t16 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    $t16 := $Dereference($t1);

    // assume Identical($t17, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume ($t17 == ((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t12)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t17) goto L17 else goto L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    if ($t17) { goto L17; } else { goto L16; }

    // label L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
L17:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Eq(0, $t10)), And(Not(DiemTimestamp::$is_operating()), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume (((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t12)) > $MAX_U64) && $IsEqual'num'(0, $t10)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t10)));

    // trace_abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume {:print "$at(35,22543,22583)"} true;
    assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    goto L15;

    // label L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
L16:

    // @157 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@157]<#0>($t16, $t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157, $t16, $t12));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40

    // $t18 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:17+22
    assume {:print "$at(35,22632,22654)"} true;
    $t18 := $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t19 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:43+7
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:51+1
    call $t20 := $Sub($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22666,22667)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t21 := <=($t18, $t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:40+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    if ($t21) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
L5:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:84+7
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31

    // assume WellFormed($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31
    assume $IsEqual'u64'($t23, 0);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31

    // trace_abort($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    assume {:print "$at(35,22624,22708)"} true;
    assume {:print "$track_abort(20,1):", $t23} $t23 == $t23;

    // $t10 := move($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    $t10 := $t23;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    goto L15;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:26+7
    assume {:print "$at(35,22735,22742)"} true;
L4:

    // $t24 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:26+22
    $t24 := $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t25 := +($t24, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:49+1
    call $t25 := $AddU64($t24, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22758,22759)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t26 := get_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:61+29
    $t26 := $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t12);

    // $t27 := <=($t25, $t26) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:58+2
    call $t27 := $Le($t25, $t26);

    // trace_local[outflow_ok]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:13+10
    assume {:print "$track_local(20,1,4):", $t27} $t27 == $t27;

    // if ($t27) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    assume {:print "$at(35,22846,23100)"} true;
    if ($t27) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
L7:

    // goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    goto L8;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
L6:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254

    // goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    goto L9;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:38+7
    assume {:print "$at(35,22901,22908)"} true;
L8:

    // $t28 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:38+22
    $t28 := $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t29 := +($t28, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:61+1
    call $t29 := $AddU64($t28, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22924,22925)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t30 := borrow_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+22
    $t30 := $ChildMutation($t1, 2, $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t30, $t29) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+56
    $t30 := $UpdateMutation($t30, $t29);

    // write_back[Reference($t1).window_outflow (u64)]($t30) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+56
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_window_outflow($Dereference($t1), $Dereference($t30)));

    // $t31 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:53+23
    assume {:print "$at(35,22986,23009)"} true;
    $t31 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t32 := >=($t0, $t31) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:50+2
    call $t32 := $Ge($t0, $t31);

    // if ($t32) goto L10 else goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    if ($t32) { goto L10; } else { goto L11; }

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
L11:

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    goto L12;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:45+7
    assume {:print "$at(35,23057,23064)"} true;
L10:

    // $t33 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:45+23
    $t33 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t34 := -($t33, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:69+1
    call $t34 := $Sub($t33, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,23081,23082)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t2 := $t34 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$at(35,22972,23089)"} true;
    $t2 := $t34;

    // trace_local[tmp#$2]($t34) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$track_local(20,1,2):", $t34} $t34 == $t34;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    goto L13;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:78+1
L12:

    // $t35 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:78+1
    $t35 := 0;
    assume $IsValid'u64'($t35);

    // $t2 := $t35 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    $t2 := $t35;

    // trace_local[tmp#$2]($t35) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$track_local(20,1,2):", $t35} $t35 == $t35;

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
L13:

    // $t36 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+23
    $t36 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t36, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+143
    $t36 := $UpdateMutation($t36, $t2);

    // write_back[Reference($t1).tracked_balance (u64)]($t36) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+143
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_tracked_balance($Dereference($t1), $Dereference($t36)));

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    assume {:print "$at(35,23110,23120)"} true;
L9:

    // trace_return[0]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    assume {:print "$track_return(20,1,0):", $t27} $t27 == $t27;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t15 := move($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    $t15 := $t27;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:473:5+1
    assume {:print "$at(35,23125,23126)"} true;
L14:

    // assert Not(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:482:9+96
    assume {:print "$at(35,23408,23504)"} true;
    assert {:msg "assert_failed(35,23408,23504): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $limit_address#$1_AccountLimits_Window'#0'($t5));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:492:9+99
    assume {:print "$at(35,23890,23989)"} true;
    assert {:msg "assert_failed(35,23890,23989): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5)) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156));

    // assert Eq<bool>($t15, AccountLimits::spec_withdrawal_limits_ok<#0>($t5, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:498:9+66
    assume {:print "$at(35,24134,24200)"} true;
    assert {:msg "assert_failed(35,24134,24200): post-condition does not hold"}
      $IsEqual'bool'($t15, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t5, $t0));

    // assert (if And($t15, Not(AccountLimits::spec_window_unrestricted<#0>($t5))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t5), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t5)), Eq<AccountLimits::Window<#0>>($t1, $t5))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    assume {:print "$at(35,24209,24475)"} true;
    assert {:msg "assert_failed(35,24209,24475): post-condition does not hold"}
      (if (($t15 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t5))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t5), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t5)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $t5))));

    // return $t15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:473:5+1
    assume {:print "$at(35,23125,23126)"} true;
L15:

    // assert Or(Or(Or(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    assume {:print "$at(35,23131,23290)"} true;
    assert {:msg "assert_failed(35,23131,23290): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $limit_address#$1_AccountLimits_Window'#0'($t5)) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5)) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156)));

    // assert Or(Or(Or(And(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), Eq(0, $t10)), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615)), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]())), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    assert {:msg "assert_failed(35,23131,23290): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $limit_address#$1_AccountLimits_Window'#0'($t5)) && $IsEqual'num'(0, $t10)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5)) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5))) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156)) && $IsEqual'num'(0, $t10)));

    // abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_withdraw_and_update_window<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
procedure {:timeLimit 40} $1_AccountLimits_can_withdraw_and_update_window'$1_XUS_XUS'$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS'))
{
    // declare local variables
    var $t2: int;
    var $t3: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t4: bool;
    var $t5: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation (int);
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation (int);
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'': $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t30));
    assume IsEmptyVec(p#$Mutation($t36));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume {:print "$at(35,22038,22039)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @156 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @155 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // $t5 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $t5 := $Dereference($t1);

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume {:print "$track_local(20,1,0):", $t0} $t0 == $t0;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t6 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:52+21
    assume {:print "$at(35,22236,22257)"} true;
    $t6 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t7 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:17+6
    $t7 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t6);

    // if ($t7) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109

    // $t8 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:98+18
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41

    // assume WellFormed($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41
    assume $IsEqual'u64'($t9, 0);

    // $t9 := opaque end: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    assume {:print "$at(35,22193,22302)"} true;
    assume {:print "$track_abort(20,1):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    $t10 := $t9;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    goto L15;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:75+7
    assume {:print "$at(35,22378,22385)"} true;
L0:

    // $t11 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:75+21
    $t11 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t12 := get_global<AccountLimits::LimitsDefinition<#0>>($t11) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(35,22336,22349)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // trace_local[limits_definition]($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:13+17
    assume {:print "$track_local(20,1,3):", $t12} $t12 == $t12;

    // $t13 := opaque begin: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume {:print "$at(35,22485,22519)"} true;

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume $IsValid'bool'($t13);

    // assume Eq<bool>($t13, AccountLimits::spec_is_unrestricted<#0>($t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume $IsEqual'bool'($t13, $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($t12));

    // $t13 := opaque end: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34

    // if ($t13) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:9+51
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11

    // $t14 := true at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:56+4
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    assume {:print "$track_return(20,1,0):", $t14} $t14 == $t14;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t15 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    $t15 := $t14;

    // goto L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    goto L14;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:22+7
    assume {:print "$at(35,22556,22563)"} true;
L2:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40

    // $t16 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    $t16 := $Dereference($t1);

    // assume Identical($t17, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume ($t17 == ((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t17) goto L17 else goto L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    if ($t17) { goto L17; } else { goto L16; }

    // label L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
L17:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Eq(0, $t10)), And(Not(DiemTimestamp::$is_operating()), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume (((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12)) > $MAX_U64) && $IsEqual'num'(0, $t10)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t10)));

    // trace_abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume {:print "$at(35,22543,22583)"} true;
    assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    goto L15;

    // label L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
L16:

    // @157 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@157]<#0>($t16, $t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157, $t16, $t12));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40

    // $t18 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:17+22
    assume {:print "$at(35,22632,22654)"} true;
    $t18 := $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t19 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:43+7
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:51+1
    call $t20 := $Sub($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22666,22667)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t21 := <=($t18, $t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:40+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    if ($t21) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
L5:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:84+7
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31

    // assume WellFormed($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31
    assume $IsEqual'u64'($t23, 0);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31

    // trace_abort($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    assume {:print "$at(35,22624,22708)"} true;
    assume {:print "$track_abort(20,1):", $t23} $t23 == $t23;

    // $t10 := move($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    $t10 := $t23;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    goto L15;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:26+7
    assume {:print "$at(35,22735,22742)"} true;
L4:

    // $t24 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:26+22
    $t24 := $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t25 := +($t24, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:49+1
    call $t25 := $AddU64($t24, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22758,22759)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t26 := get_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:61+29
    $t26 := $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t12);

    // $t27 := <=($t25, $t26) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:58+2
    call $t27 := $Le($t25, $t26);

    // trace_local[outflow_ok]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:13+10
    assume {:print "$track_local(20,1,4):", $t27} $t27 == $t27;

    // if ($t27) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    assume {:print "$at(35,22846,23100)"} true;
    if ($t27) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
L7:

    // goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    goto L8;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
L6:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254

    // goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    goto L9;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:38+7
    assume {:print "$at(35,22901,22908)"} true;
L8:

    // $t28 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:38+22
    $t28 := $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t29 := +($t28, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:61+1
    call $t29 := $AddU64($t28, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22924,22925)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t30 := borrow_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+22
    $t30 := $ChildMutation($t1, 2, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t30, $t29) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+56
    $t30 := $UpdateMutation($t30, $t29);

    // write_back[Reference($t1).window_outflow (u64)]($t30) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+56
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow($Dereference($t1), $Dereference($t30)));

    // $t31 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:53+23
    assume {:print "$at(35,22986,23009)"} true;
    $t31 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t32 := >=($t0, $t31) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:50+2
    call $t32 := $Ge($t0, $t31);

    // if ($t32) goto L10 else goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    if ($t32) { goto L10; } else { goto L11; }

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
L11:

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    goto L12;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:45+7
    assume {:print "$at(35,23057,23064)"} true;
L10:

    // $t33 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:45+23
    $t33 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t34 := -($t33, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:69+1
    call $t34 := $Sub($t33, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,23081,23082)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t2 := $t34 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$at(35,22972,23089)"} true;
    $t2 := $t34;

    // trace_local[tmp#$2]($t34) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$track_local(20,1,2):", $t34} $t34 == $t34;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    goto L13;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:78+1
L12:

    // $t35 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:78+1
    $t35 := 0;
    assume $IsValid'u64'($t35);

    // $t2 := $t35 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    $t2 := $t35;

    // trace_local[tmp#$2]($t35) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$track_local(20,1,2):", $t35} $t35 == $t35;

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
L13:

    // $t36 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+23
    $t36 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t36, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+143
    $t36 := $UpdateMutation($t36, $t2);

    // write_back[Reference($t1).tracked_balance (u64)]($t36) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+143
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Dereference($t1), $Dereference($t36)));

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    assume {:print "$at(35,23110,23120)"} true;
L9:

    // trace_return[0]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    assume {:print "$track_return(20,1,0):", $t27} $t27 == $t27;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t15 := move($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    $t15 := $t27;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:473:5+1
    assume {:print "$at(35,23125,23126)"} true;
L14:

    // assert Not(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:482:9+96
    assume {:print "$at(35,23408,23504)"} true;
    assert {:msg "assert_failed(35,23408,23504): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t5));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:492:9+99
    assume {:print "$at(35,23890,23989)"} true;
    assert {:msg "assert_failed(35,23890,23989): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5)) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156));

    // assert Eq<bool>($t15, AccountLimits::spec_withdrawal_limits_ok<#0>($t5, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:498:9+66
    assume {:print "$at(35,24134,24200)"} true;
    assert {:msg "assert_failed(35,24134,24200): post-condition does not hold"}
      $IsEqual'bool'($t15, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5, $t0));

    // assert (if And($t15, Not(AccountLimits::spec_window_unrestricted<#0>($t5))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t5), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t5)), Eq<AccountLimits::Window<#0>>($t1, $t5))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    assume {:print "$at(35,24209,24475)"} true;
    assert {:msg "assert_failed(35,24209,24475): post-condition does not hold"}
      (if (($t15 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t5)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $t5))));

    // return $t15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:473:5+1
    assume {:print "$at(35,23125,23126)"} true;
L15:

    // assert Or(Or(Or(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    assume {:print "$at(35,23131,23290)"} true;
    assert {:msg "assert_failed(35,23131,23290): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t5)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5)) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156)));

    // assert Or(Or(Or(And(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), Eq(0, $t10)), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615)), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]())), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    assert {:msg "assert_failed(35,23131,23290): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t5)) && $IsEqual'num'(0, $t10)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5)) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5))) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156)) && $IsEqual'num'(0, $t10)));

    // abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_withdraw_and_update_window<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
procedure {:timeLimit 40} $1_AccountLimits_can_withdraw_and_update_window'$1_XDX_XDX'$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX'))
{
    // declare local variables
    var $t2: int;
    var $t3: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t4: bool;
    var $t5: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t16: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation (int);
    var $t31: int;
    var $t32: bool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation (int);
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'': $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t30));
    assume IsEmptyVec(p#$Mutation($t36));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume {:print "$at(35,22038,22039)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1088
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @156 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @155 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // $t5 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $t5 := $Dereference($t1);

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    assume {:print "$track_local(20,1,0):", $t0} $t0 == $t0;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:453:5+1
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t6 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:52+21
    assume {:print "$at(35,22236,22257)"} true;
    $t6 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t7 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:17+6
    $t7 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t6);

    // if ($t7) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109

    // $t8 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:98+18
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41

    // assume WellFormed($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41
    assume $IsEqual'u64'($t9, 0);

    // $t9 := opaque end: Errors::not_published($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:76+41

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    assume {:print "$at(35,22193,22302)"} true;
    assume {:print "$track_abort(20,1):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    $t10 := $t9;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:457:9+109
    goto L15;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:75+7
    assume {:print "$at(35,22378,22385)"} true;
L0:

    // $t11 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:75+21
    $t11 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t12 := get_global<AccountLimits::LimitsDefinition<#0>>($t11) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(35,22336,22349)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // trace_local[limits_definition]($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:458:13+17
    assume {:print "$track_local(20,1,3):", $t12} $t12 == $t12;

    // $t13 := opaque begin: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume {:print "$at(35,22485,22519)"} true;

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume $IsValid'bool'($t13);

    // assume Eq<bool>($t13, AccountLimits::spec_is_unrestricted<#0>($t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34
    assume $IsEqual'bool'($t13, $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($t12));

    // $t13 := opaque end: AccountLimits::is_unrestricted<#0>($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:13+34

    // if ($t13) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:9+51
    if ($t13) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11

    // $t14 := true at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:56+4
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    assume {:print "$track_return(20,1,0):", $t14} $t14 == $t14;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t15 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    $t15 := $t14;

    // goto L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:460:49+11
    goto L14;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:22+7
    assume {:print "$at(35,22556,22563)"} true;
L2:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40

    // $t16 := read_ref($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    $t16 := $Dereference($t1);

    // assume Identical($t17, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume ($t17 == ((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t17) goto L17 else goto L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    if ($t17) { goto L17; } else { goto L16; }

    // label L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
L17:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t12)), MaxU64()), Eq(0, $t10)), And(Not(DiemTimestamp::$is_operating()), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume (((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12)) > $MAX_U64) && $IsEqual'num'(0, $t10)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t10)));

    // trace_abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume {:print "$at(35,22543,22583)"} true;
    assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    goto L15;

    // label L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
L16:

    // @157 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@157]<#0>($t16, $t12)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40
    assume $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#157, $t16, $t12));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:462:9+40

    // $t18 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:17+22
    assume {:print "$at(35,22632,22654)"} true;
    $t18 := $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t19 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:43+7
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:51+1
    call $t20 := $Sub($t19, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22666,22667)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t21 := <=($t18, $t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:40+2
    call $t21 := $Le($t18, $t20);

    // if ($t21) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    if ($t21) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
L5:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84

    // destroy($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:84+7
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31

    // assume WellFormed($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31
    assume $IsEqual'u64'($t23, 0);

    // $t23 := opaque end: Errors::limit_exceeded($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:61+31

    // trace_abort($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    assume {:print "$at(35,22624,22708)"} true;
    assume {:print "$track_abort(20,1):", $t23} $t23 == $t23;

    // $t10 := move($t23) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    $t10 := $t23;

    // goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:464:9+84
    goto L15;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:26+7
    assume {:print "$at(35,22735,22742)"} true;
L4:

    // $t24 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:26+22
    $t24 := $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t25 := +($t24, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:49+1
    call $t25 := $AddU64($t24, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22758,22759)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t26 := get_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:61+29
    $t26 := $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t12);

    // $t27 := <=($t25, $t26) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:58+2
    call $t27 := $Le($t25, $t26);

    // trace_local[outflow_ok]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:465:13+10
    assume {:print "$track_local(20,1,4):", $t27} $t27 == $t27;

    // if ($t27) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    assume {:print "$at(35,22846,23100)"} true;
    if ($t27) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
L7:

    // goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    goto L8;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
L6:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254

    // goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:467:9+254
    goto L9;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:38+7
    assume {:print "$at(35,22901,22908)"} true;
L8:

    // $t28 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:38+22
    $t28 := $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t29 := +($t28, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:61+1
    call $t29 := $AddU64($t28, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,22924,22925)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t30 := borrow_field<AccountLimits::Window<#0>>.window_outflow($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+22
    $t30 := $ChildMutation($t1, 2, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t30, $t29) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+56
    $t30 := $UpdateMutation($t30, $t29);

    // write_back[Reference($t1).window_outflow (u64)]($t30) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:468:13+56
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow($Dereference($t1), $Dereference($t30)));

    // $t31 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:53+23
    assume {:print "$at(35,22986,23009)"} true;
    $t31 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t32 := >=($t0, $t31) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:50+2
    call $t32 := $Ge($t0, $t31);

    // if ($t32) goto L10 else goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    if ($t32) { goto L10; } else { goto L11; }

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
L11:

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    goto L12;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:45+7
    assume {:print "$at(35,23057,23064)"} true;
L10:

    // $t33 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:45+23
    $t33 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t34 := -($t33, $t0) on_abort goto L15 with $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:470:69+1
    call $t34 := $Sub($t33, $t0);
    if ($abort_flag) {
        assume {:print "$at(35,23081,23082)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(20,1):", $t10} $t10 == $t10;
        goto L15;
    }

    // $t2 := $t34 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$at(35,22972,23089)"} true;
    $t2 := $t34;

    // trace_local[tmp#$2]($t34) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$track_local(20,1,2):", $t34} $t34 == $t34;

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    goto L13;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:78+1
L12:

    // $t35 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:78+1
    $t35 := 0;
    assume $IsValid'u64'($t35);

    // $t2 := $t35 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    $t2 := $t35;

    // trace_local[tmp#$2]($t35) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
    assume {:print "$track_local(20,1,2):", $t35} $t35 == $t35;

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:39+117
L13:

    // $t36 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+23
    $t36 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t36, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+143
    $t36 := $UpdateMutation($t36, $t2);

    // write_back[Reference($t1).tracked_balance (u64)]($t36) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:469:13+143
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Dereference($t1), $Dereference($t36)));

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    assume {:print "$at(35,23110,23120)"} true;
L9:

    // trace_return[0]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    assume {:print "$track_return(20,1,0):", $t27} $t27 == $t27;

    // trace_local[sending]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(20,1,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t15 := move($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:472:9+10
    $t15 := $t27;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:473:5+1
    assume {:print "$at(35,23125,23126)"} true;
L14:

    // assert Not(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:482:9+96
    assume {:print "$at(35,23408,23504)"} true;
    assert {:msg "assert_failed(35,23408,23504): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t5));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:492:9+99
    assume {:print "$at(35,23890,23989)"} true;
    assert {:msg "assert_failed(35,23890,23989): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5)) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156));

    // assert Eq<bool>($t15, AccountLimits::spec_withdrawal_limits_ok<#0>($t5, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:498:9+66
    assume {:print "$at(35,24134,24200)"} true;
    assert {:msg "assert_failed(35,24134,24200): post-condition does not hold"}
      $IsEqual'bool'($t15, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5, $t0));

    // assert (if And($t15, Not(AccountLimits::spec_window_unrestricted<#0>($t5))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t5), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t5)), Eq<AccountLimits::Window<#0>>($t1, $t5))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    assume {:print "$at(35,24209,24475)"} true;
    assert {:msg "assert_failed(35,24209,24475): post-condition does not hold"}
      (if (($t15 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t5)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $t5))));

    // return $t15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:473:5+1
    assume {:print "$at(35,23125,23126)"} true;
L15:

    // assert Or(Or(Or(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    assume {:print "$at(35,23131,23290)"} true;
    assert {:msg "assert_failed(35,23131,23290): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t5)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5)) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156)));

    // assert Or(Or(Or(And(Not(exists[@155]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t5))), Eq(0, $t10)), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@156, @155]<#0>($t5)), $t0), 18446744073709551615)), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@155]<#0>($t5))), MaxU64())), Eq(0, $t10))), And(And(Not(AccountLimits::spec_window_unrestricted[@155]<#0>($t5)), Not(DiemTimestamp::$is_operating[@156]())), Eq(0, $t10))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    assert {:msg "assert_failed(35,23131,23290): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t5)) && $IsEqual'num'(0, $t10)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5)) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5))) > $MAX_U64)) && $IsEqual'num'(0, $t10))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#155, $t5) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#156)) && $IsEqual'num'(0, $t10)));

    // abort($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:474:5+159
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun AccountLimits::grant_mutation_capability [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
procedure {:timeLimit 40} $1_AccountLimits_grant_mutation_capability$verify(_$t0: $signer) returns ($ret0: $1_AccountLimits_AccountLimitMutationCapability)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $1_AccountLimits_AccountLimitMutationCapability;
    var $t0: $signer;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'signer': $signer;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#153: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#154: $Memory $1_Roles_RoleId;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume {:print "$at(35,2572,2573)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+224
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t1, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t1 == $1_Signer_$address_of($t0));

    // @153 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume {:print "$at(35,2572,2573)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#153 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @154 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    $1_Roles_RoleId_$memory#154 := $1_Roles_RoleId_$memory;

    // trace_local[dr_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:63:5+1
    assume {:print "$track_local(20,3,0):", $t0} $t0 == $t0;

    // opaque begin: DiemTimestamp::assert_genesis() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
    assume {:print "$at(35,2672,2703)"} true;

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(0, $t3)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t3));

    // trace_abort($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
    assume {:print "$at(35,2672,2703)"} true;
    assume {:print "$track_abort(20,3):", $t3} $t3 == $t3;

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
    goto L2;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:64:9+31

    // assume Identical($t4, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t4 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
    assume {:print "$at(35,2713,2748)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::$address_of($t0), a550c18), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::$address_of($t0), a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
    assume ($t5 == (((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816)));

    // if ($t5) goto L6 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t3)), And(Not(exists<Roles::RoleId>($t4)), Eq(0, $t3))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(0, $t3))), And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
    assume ((((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t3)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(0, $t3))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'num'(0, $t3))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t3)));

    // trace_abort($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
    assume {:print "$at(35,2713,2748)"} true;
    assume {:print "$track_abort(20,3):", $t3} $t3 == $t3;

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
    goto L2;

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:65:9+35

    // $t6 := false at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:66:9+32
    assume {:print "$at(35,2758,2790)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack AccountLimits::AccountLimitMutationCapability($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:66:9+32
    $t7 := $1_AccountLimits_AccountLimitMutationCapability($t6);

    // trace_return[0]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:66:9+32
    assume {:print "$track_return(20,3,0):", $t7} $t7 == $t7;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:67:5+1
    assume {:print "$at(35,2795,2796)"} true;
L1:

    // assert Not(Not(DiemTimestamp::$is_genesis[@153]())) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:153:9+51
    assume {:print "$at(10,6293,6344)"} true;
    assert {:msg "assert_failed(10,6293,6344): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#153);

    // assert Not(Not(exists[@154]<Roles::RoleId>($t1))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:542:9+59
    assume {:print "$at(40,24116,24175)"} true;
    assert {:msg "assert_failed(40,24116,24175): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#154, $t1);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@154]<Roles::RoleId>($t1)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:543:9+87
    assume {:print "$at(40,24184,24271)"} true;
    assert {:msg "assert_failed(40,24184,24271): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#154, $t1)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    assume {:print "$at(28,1380,1461)"} true;
    assert {:msg "assert_failed(28,1380,1461): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 173345816);

    // return $t7 at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    $ret0 := $t7;
    return;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:67:5+1
    assume {:print "$at(35,2795,2796)"} true;
L2:

    // assert Or(Or(Or(Not(DiemTimestamp::$is_genesis[@153]()), Not(exists[@154]<Roles::RoleId>($t1))), Neq<u64>(select Roles::RoleId.role_id(global[@154]<Roles::RoleId>($t1)), 0)), Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:68:5+154
    assume {:print "$at(35,2801,2955)"} true;
    assert {:msg "assert_failed(35,2801,2955): abort not covered by any of the `aborts_if` clauses"}
      (((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#153) || !$ResourceExists($1_Roles_RoleId_$memory#154, $t1)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#154, $t1)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816));

    // assert Or(Or(Or(And(Not(DiemTimestamp::$is_genesis[@153]()), Eq(0, $t3)), And(Not(exists[@154]<Roles::RoleId>($t1)), Eq(0, $t3))), And(Neq<u64>(select Roles::RoleId.role_id(global[@154]<Roles::RoleId>($t1)), 0), Eq(0, $t3))), And(Neq<address>(Signer::$address_of[]($t0), a550c18), Eq(0, $t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:68:5+154
    assert {:msg "assert_failed(35,2801,2955): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#153) && $IsEqual'num'(0, $t3)) || (!$ResourceExists($1_Roles_RoleId_$memory#154, $t1) && $IsEqual'num'(0, $t3))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#154, $t1)), 0) && $IsEqual'num'(0, $t3))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t3)));

    // abort($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:68:5+154
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun AccountLimits::has_limits_published [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
procedure {:timeLimit 40} $1_AccountLimits_has_limits_published$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume {:print "$at(35,26207,26208)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // trace_local[addr]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume {:print "$track_local(20,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::LimitsDefinition<#0>>($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:545:9+6
    assume {:print "$at(35,26280,26286)"} true;
    $t1 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t0);

    // trace_return[0]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:545:9+40
    assume {:print "$track_return(20,4,0):", $t1} $t1 == $t1;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:546:5+1
    assume {:print "$at(35,26325,26326)"} true;
L1:

    // return $t1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:546:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::has_limits_published<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
procedure {:timeLimit 40} $1_AccountLimits_has_limits_published'$1_XUS_XUS'$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume {:print "$at(35,26207,26208)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // trace_local[addr]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume {:print "$track_local(20,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::LimitsDefinition<#0>>($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:545:9+6
    assume {:print "$at(35,26280,26286)"} true;
    $t1 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0);

    // trace_return[0]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:545:9+40
    assume {:print "$track_return(20,4,0):", $t1} $t1 == $t1;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:546:5+1
    assume {:print "$at(35,26325,26326)"} true;
L1:

    // return $t1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:546:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::has_limits_published<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
procedure {:timeLimit 40} $1_AccountLimits_has_limits_published'$1_XDX_XDX'$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume {:print "$at(35,26207,26208)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+119
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // trace_local[addr]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:544:5+1
    assume {:print "$track_local(20,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::LimitsDefinition<#0>>($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:545:9+6
    assume {:print "$at(35,26280,26286)"} true;
    $t1 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0);

    // trace_return[0]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:545:9+40
    assume {:print "$track_return(20,4,0):", $t1} $t1 == $t1;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:546:5+1
    assume {:print "$at(35,26325,26326)"} true;
L1:

    // return $t1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:546:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::has_window_published [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+109
procedure {:timeLimit 40} $1_AccountLimits_has_window_published$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+1
    assume {:print "$at(35,26332,26333)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+109
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+109
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_local[addr]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:548:5+1
    assume {:print "$track_local(20,5,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::Window<#0>>($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:549:9+6
    assume {:print "$at(35,26405,26411)"} true;
    $t1 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t0);

    // trace_return[0]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:549:9+30
    assume {:print "$track_return(20,5,0):", $t1} $t1 == $t1;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:550:5+1
    assume {:print "$at(35,26440,26441)"} true;
L1:

    // assert Eq<bool>($t1, AccountLimits::spec_has_window_published<#0>($t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:552:9+60
    assume {:print "$at(35,26482,26542)"} true;
    assert {:msg "assert_failed(35,26482,26542): post-condition does not hold"}
      $IsEqual'bool'($t1, $1_AccountLimits_spec_has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, $t0));

    // return $t1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:552:9+60
    $ret0 := $t1;
    return;

}

// fun AccountLimits::is_unrestricted [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:519:5+260
procedure {:timeLimit 40} $1_AccountLimits_is_unrestricted$verify(_$t0: $1_AccountLimits_LimitsDefinition'#0') returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t0: $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($t0), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($t0), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($t0), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($t0), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:519:5+1
    assume {:print "$at(35,25247,25248)"} true;
    assume ($IsValid'$1_AccountLimits_LimitsDefinition'#0''($t0) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0)));

    // trace_local[limits_def]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:519:5+1
    assume {:print "$track_local(20,6,0):", $t0} $t0 == $t0;

    // $t4 := get_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+21
    assume {:print "$at(35,25334,25355)"} true;
    $t4 := $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t5 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:34+7
    $t5 := 18446744073709551615;
    assume $IsValid'u64'($t5);

    // $t6 := ==($t4, $t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:31+2
    $t6 := $IsEqual'u64'($t4, $t5);

    // if ($t6) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
L1:

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    goto L2;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:521:9+10
    assume {:print "$at(35,25378,25388)"} true;
L0:

    // $t7 := get_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:521:9+22
    $t7 := $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t8 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:521:35+7
    $t8 := 18446744073709551615;
    assume $IsValid'u64'($t8);

    // $t9 := ==($t7, $t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:521:32+2
    $t9 := $IsEqual'u64'($t7, $t8);

    // $t1 := $t9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    assume {:print "$at(35,25334,25411)"} true;
    $t1 := $t9;

    // trace_local[tmp#$1]($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    assume {:print "$track_local(20,6,1):", $t9} $t9 == $t9;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    goto L3;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
L2:

    // $t10 := false at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t1 := $t10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    $t1 := $t10;

    // trace_local[tmp#$1]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
    assume {:print "$track_local(20,6,1):", $t10} $t10 == $t10;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+77
L3:

    // if ($t1) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    if ($t1) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
L5:

    // goto L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    goto L6;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:522:9+10
    assume {:print "$at(35,25423,25433)"} true;
L4:

    // $t11 := get_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:522:9+22
    $t11 := $max_holding#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t12 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:522:35+7
    $t12 := 18446744073709551615;
    assume $IsValid'u64'($t12);

    // $t13 := ==($t11, $t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:522:32+2
    $t13 := $IsEqual'u64'($t11, $t12);

    // $t2 := $t13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    assume {:print "$at(35,25334,25456)"} true;
    $t2 := $t13;

    // trace_local[tmp#$2]($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    assume {:print "$track_local(20,6,2):", $t13} $t13 == $t13;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    goto L7;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
L6:

    // $t14 := false at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    $t14 := false;
    assume $IsValid'bool'($t14);

    // $t2 := $t14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    $t2 := $t14;

    // trace_local[tmp#$2]($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
    assume {:print "$track_local(20,6,2):", $t14} $t14 == $t14;

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+122
L7:

    // if ($t2) goto L8 else goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    if ($t2) { goto L8; } else { goto L9; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
L9:

    // goto L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    goto L10;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:523:9+10
    assume {:print "$at(35,25468,25478)"} true;
L8:

    // $t15 := get_field<AccountLimits::LimitsDefinition<#0>>.time_period($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:523:9+22
    $t15 := $time_period#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t16 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:523:35+7
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := ==($t15, $t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:523:32+2
    $t17 := $IsEqual'u64'($t15, $t16);

    // $t3 := $t17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    assume {:print "$at(35,25334,25501)"} true;
    $t3 := $t17;

    // trace_local[tmp#$3]($t17) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    assume {:print "$track_local(20,6,3):", $t17} $t17 == $t17;

    // goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    goto L11;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
L10:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167

    // $t18 := false at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    $t18 := false;
    assume $IsValid'bool'($t18);

    // $t3 := $t18 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    $t3 := $t18;

    // trace_local[tmp#$3]($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    assume {:print "$track_local(20,6,3):", $t18} $t18 == $t18;

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
L11:

    // trace_return[0]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:520:9+167
    assume {:print "$track_return(20,6,0):", $t3} $t3 == $t3;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:524:5+1
    assume {:print "$at(35,25506,25507)"} true;
L12:

    // assert Not(false) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:527:9+16
    assume {:print "$at(35,25566,25582)"} true;
    assert {:msg "assert_failed(35,25566,25582): function does not abort under this condition"}
      !false;

    // assert Eq<bool>($t3, AccountLimits::spec_is_unrestricted<#0>($t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:528:9+51
    assume {:print "$at(35,25591,25642)"} true;
    assert {:msg "assert_failed(35,25591,25642): post-condition does not hold"}
      $IsEqual'bool'($t3, $1_AccountLimits_spec_is_unrestricted'#0'($t0));

    // return $t3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:528:9+51
    $ret0 := $t3;
    return;

}

// fun AccountLimits::limits_definition_address [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+154
procedure {:timeLimit 40} $1_AccountLimits_limits_definition_address$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_AccountLimits_Window'#0';
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+1
    assume {:print "$at(35,26047,26048)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+154
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+154
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_local[addr]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:540:5+1
    assume {:print "$track_local(20,7,0):", $t0} $t0 == $t0;

    // $t1 := get_global<AccountLimits::Window<#0>>($t0) on_abort goto L2 with $t2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:541:9+13
    assume {:print "$at(35,26144,26157)"} true;
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(35,26144,26157)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(20,7):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:541:9+51
    $t3 := $limit_address#$1_AccountLimits_Window'#0'($t1);

    // trace_return[0]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:541:9+51
    assume {:print "$track_return(20,7,0):", $t3} $t3 == $t3;

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:542:5+1
    assume {:print "$at(35,26200,26201)"} true;
L1:

    // return $t3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:542:5+1
    $ret0 := $t3;
    return;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:542:5+1
L2:

    // abort($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:542:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_unrestricted_limits [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+524
procedure {:timeLimit 40} $1_AccountLimits_publish_unrestricted_limits$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $signer;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_AccountLimits_LimitsDefinition'#0';
    var $t0: $signer;
    var $temp_0'signer': $signer;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#145: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#170: $Memory $1_AccountLimits_LimitsDefinition'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+1
    assume {:print "$at(35,8105,8106)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+524
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // @145 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#145 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // trace_local[publish_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+1
    assume {:print "$track_local(20,8,0):", $t0} $t0 == $t0;

    // $t6 := Signer::address_of($t0) on_abort goto L3 with $t7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:191:49+35
    assume {:print "$at(35,8255,8290)"} true;
    call $t6 := $1_Signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(35,8255,8290)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(20,8):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := exists<AccountLimits::LimitsDefinition<#0>>($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:191:14+6
    $t8 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t6);

    // $t9 := !($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:191:13+1
    call $t9 := $Not($t8);

    // if ($t9) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:190:9+162
    assume {:print "$at(35,8198,8360)"} true;
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:190:9+162
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:190:9+162

    // $t10 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:192:39+18
    assume {:print "$at(35,8331,8349)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := opaque begin: Errors::already_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:192:13+45

    // assume WellFormed($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:192:13+45
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:192:13+45
    assume $IsEqual'u64'($t11, 0);

    // $t11 := opaque end: Errors::already_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:192:13+45

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:190:9+162
    assume {:print "$at(35,8198,8360)"} true;
    assume {:print "$track_abort(20,8):", $t11} $t11 == $t11;

    // $t7 := move($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:190:9+162
    $t7 := $t11;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:190:9+162
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:195:13+15
    assume {:print "$at(35,8391,8406)"} true;
L0:

    // trace_local[tmp#$5]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:195:13+15
    assume {:print "$track_local(20,8,5):", $t0} $t0 == $t0;

    // $t12 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:197:29+7
    assume {:print "$at(35,8477,8484)"} true;
    $t12 := 18446744073709551615;
    assume $IsValid'u64'($t12);

    // $t13 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:198:30+7
    assume {:print "$at(35,8515,8522)"} true;
    $t13 := 18446744073709551615;
    assume $IsValid'u64'($t13);

    // $t14 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:200:30+7
    assume {:print "$at(35,8591,8598)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:199:30+7
    assume {:print "$at(35,8553,8560)"} true;
    $t15 := 18446744073709551615;
    assume $IsValid'u64'($t15);

    // $t16 := pack AccountLimits::LimitsDefinition<#0>($t12, $t13, $t14, $t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:196:13+193
    assume {:print "$at(35,8420,8613)"} true;
    $t16 := $1_AccountLimits_LimitsDefinition'#0'($t12, $t13, $t14, $t15);

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t16), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t16) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t16), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t16) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t16), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'#0'($t16) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t16), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t16) > 0);

    // @170 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:189:5+524
    // state save for global update invariants
    assume {:print "$at(35,8105,8629)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory#170 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // move_to<AccountLimits::LimitsDefinition<#0>>($t16, $t0) on_abort goto L3 with $t7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:194:9+7
    assume {:print "$at(35,8370,8377)"} true;
    if ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $addr#$signer($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_LimitsDefinition'#0'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'#0'_$memory, $addr#$signer($t0), $t16);
    }
    if ($abort_flag) {
        assume {:print "$at(35,8370,8377)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(20,8):", $t7} $t7 == $t7;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@170]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#170, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:203:5+1
    assume {:print "$at(35,8628,8629)"} true;
L2:

    // assert Not(exists[@145]<AccountLimits::LimitsDefinition<#0>>(Signer::$address_of[]($t0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:210:9+125
    assume {:print "$at(35,8885,9010)"} true;
    assert {:msg "assert_failed(35,8885,9010): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#145, $1_Signer_$address_of($t0));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:210:9+125
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:203:5+1
    assume {:print "$at(35,8628,8629)"} true;
L3:

    // assert exists[@145]<AccountLimits::LimitsDefinition<#0>>(Signer::$address_of[]($t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:204:5+147
    assume {:print "$at(35,8634,8781)"} true;
    assert {:msg "assert_failed(35,8634,8781): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#145, $1_Signer_$address_of($t0));

    // assert And(exists[@145]<AccountLimits::LimitsDefinition<#0>>(Signer::$address_of[]($t0)), Eq(0, $t7)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:204:5+147
    assert {:msg "assert_failed(35,8634,8781): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#145, $1_Signer_$address_of($t0)) && $IsEqual'num'(0, $t7));

    // abort($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:204:5+147
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_window [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
procedure {:timeLimit 40} $1_AccountLimits_publish_window$verify(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_AccountLimits_Window'#0';
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#161: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_Window'#0'_$memory#162: $Memory $1_AccountLimits_Window'#0';
    var $1_Roles_RoleId_$memory#163: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'#0'_$memory#182: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$at(35,6165,6166)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($addr#$signer($t1));

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume Identical($t3, Signer::$address_of($t1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:585:9+39
    assume {:print "$at(40,25941,25980)"} true;
    assume ($t3 == $1_Signer_$address_of($t1));

    // assume Identical($t4, select Roles::RoleId.role_id(global<Roles::RoleId>($t3))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:587:9+43
    assume {:print "$at(40,26057,26100)"} true;
    assume ($t4 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)));

    // assume Identical($t5, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t5 == $1_Signer_$address_of($t0));

    // @163 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$at(35,6165,6166)"} true;
    $1_Roles_RoleId_$memory#163 := $1_Roles_RoleId_$memory;

    // @161 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#161 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @162 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    $1_AccountLimits_Window'#0'_$memory#162 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[dr_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,0):", $t0} $t0 == $t0;

    // trace_local[to_limit]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,1):", $t1} $t1 == $t1;

    // trace_local[limit_address]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,2):", $t2} $t2 == $t2;

    // assume Identical($t6, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t6 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume {:print "$at(35,6306,6341)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::$address_of($t0), a550c18), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::$address_of($t0), a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816)));

    // if ($t7) goto L7 else goto L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(0, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(0, $t8))), And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume ((((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(0, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'num'(0, $t8))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)));

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume {:print "$at(35,6306,6341)"} true;
    assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    goto L5;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:17+6
    assume {:print "$at(35,6359,6365)"} true;
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t2);

    // if ($t9) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101

    // $t10 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:90+18
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := opaque begin: Errors::not_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41

    // assume WellFormed($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41
    assume $IsEqual'u64'($t11, 0);

    // $t11 := opaque end: Errors::not_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    assume {:print "$at(35,6351,6452)"} true;
    assume {:print "$track_abort(20,10):", $t11} $t11 == $t11;

    // $t8 := move($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    $t8 := $t11;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    goto L5;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:49+8
    assume {:print "$at(35,6502,6510)"} true;
L0:

    // assume Identical($t12, Signer::$address_of($t1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:585:9+39
    assume {:print "$at(40,25941,25980)"} true;
    assume ($t12 == $1_Signer_$address_of($t1));

    // assume Identical($t13, select Roles::RoleId.role_id(global<Roles::RoleId>($t12))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:587:9+43
    assume {:print "$at(40,26057,26100)"} true;
    assume ($t13 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)));

    // opaque begin: Roles::assert_parent_vasp_or_child_vasp($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume {:print "$at(35,6462,6511)"} true;

    // assume Identical($t14, Or(Not(exists<Roles::RoleId>($t12)), And(Neq<u64>($t13, 0), Neq<u64>($t13, 0)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume ($t14 == (!$ResourceExists($1_Roles_RoleId_$memory, $t12) || (!$IsEqual'u64'($t13, 0) && !$IsEqual'u64'($t13, 0))));

    // if ($t14) goto L9 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    if ($t14) { goto L9; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t12)), Eq(0, $t8)), And(And(Neq<u64>($t13, 0), Neq<u64>($t13, 0)), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(0, $t8)) || ((!$IsEqual'u64'($t13, 0) && !$IsEqual'u64'($t13, 0)) && $IsEqual'num'(0, $t8)));

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume {:print "$at(35,6462,6511)"} true;
    assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    goto L5;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
L8:

    // opaque end: Roles::assert_parent_vasp_or_child_vasp($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49

    // $t15 := Signer::address_of($t1) on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:39+28
    assume {:print "$at(35,6568,6596)"} true;
    call $t15 := $1_Signer_address_of($t1);
    if ($abort_flag) {
        assume {:print "$at(35,6568,6596)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t16 := exists<AccountLimits::Window<#0>>($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:14+6
    $t16 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t15);

    // $t17 := !($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:13+1
    call $t17 := $Not($t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    assume {:print "$at(35,6521,6655)"} true;
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134

    // $t18 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:39+7
    assume {:print "$at(35,6637,6644)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::already_published($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34

    // assume WellFormed($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34
    assume $IsEqual'u64'($t19, 0);

    // $t19 := opaque end: Errors::already_published($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34

    // trace_abort($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    assume {:print "$at(35,6521,6655)"} true;
    assume {:print "$track_abort(20,10):", $t19} $t19 == $t19;

    // $t8 := move($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    $t8 := $t19;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    goto L5;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:158:13+8
    assume {:print "$at(35,6686,6694)"} true;
L2:

    // $t20 := AccountLimits::current_time() on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:160:31+14
    assume {:print "$at(35,6757,6771)"} true;
    call $t20 := $1_AccountLimits_current_time();
    if ($abort_flag) {
        assume {:print "$at(35,6757,6771)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t21 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:161:32+1
    assume {:print "$at(35,6804,6805)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:162:33+1
    assume {:print "$at(35,6839,6840)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:163:34+1
    assume {:print "$at(35,6875,6876)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := pack AccountLimits::Window<#0>($t20, $t21, $t22, $t23, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:159:13+214
    assume {:print "$at(35,6708,6922)"} true;
    $t24 := $1_AccountLimits_Window'#0'($t20, $t21, $t22, $t23, $t2);

    // @182 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // state save for global update invariants
    assume {:print "$at(35,6165,6938)"} true;
    $1_AccountLimits_Window'#0'_$memory#182 := $1_AccountLimits_Window'#0'_$memory;

    // move_to<AccountLimits::Window<#0>>($t24, $t1) on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:157:9+7
    assume {:print "$at(35,6665,6672)"} true;
    if ($ResourceExists($1_AccountLimits_Window'#0'_$memory, $addr#$signer($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $addr#$signer($t1), $t24);
    }
    if ($abort_flag) {
        assume {:print "$at(35,6665,6672)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // assert forall window_addr: TypeDomain<address>() where exists[@182]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#182, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:167:5+1
    assume {:print "$at(35,6937,6938)"} true;
L4:

    // assert Not(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:179:9+88
    assume {:print "$at(35,7462,7550)"} true;
    assert {:msg "assert_failed(35,7462,7550): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#161, $t2);

    // assert Not(exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:180:9+96
    assume {:print "$at(35,7559,7655)"} true;
    assert {:msg "assert_failed(35,7559,7655): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_Window'#0'_$memory#162, $1_Signer_$address_of($t1));

    // assert Not(Not(exists[@163]<Roles::RoleId>($t3))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:586:9+59
    assume {:print "$at(40,25989,26048)"} true;
    assert {:msg "assert_failed(40,25989,26048): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#163, $t3);

    // assert Not(And(Neq<u64>($t4, 0), Neq<u64>($t4, 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:588:9+113
    assume {:print "$at(40,26109,26222)"} true;
    assert {:msg "assert_failed(40,26109,26222): function does not abort under this condition"}
      !(!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0));

    // assert Not(Not(exists[@163]<Roles::RoleId>($t5))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:542:9+59
    assume {:print "$at(40,24116,24175)"} true;
    assert {:msg "assert_failed(40,24116,24175): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#163, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:543:9+87
    assume {:print "$at(40,24184,24271)"} true;
    assert {:msg "assert_failed(40,24184,24271): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    assume {:print "$at(28,1380,1461)"} true;
    assert {:msg "assert_failed(28,1380,1461): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 173345816);

    // return () at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    return;

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:167:5+1
    assume {:print "$at(35,6937,6938)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2)), exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1))), Not(exists[@163]<Roles::RoleId>($t3))), And(Neq<u64>($t4, 0), Neq<u64>($t4, 0))), Not(exists[@163]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    assume {:print "$at(35,6943,7019)"} true;
    assert {:msg "assert_failed(35,6943,7019): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#161, $t2) || $ResourceExists($1_AccountLimits_Window'#0'_$memory#162, $1_Signer_$address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#163, $t3)) || (!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0))) || !$ResourceExists($1_Roles_RoleId_$memory#163, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2)), Eq(0, $t8)), And(exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1)), Eq(0, $t8))), And(Not(exists[@163]<Roles::RoleId>($t3)), Eq(0, $t8))), And(And(Neq<u64>($t4, 0), Neq<u64>($t4, 0)), Eq(0, $t8))), And(Not(exists[@163]<Roles::RoleId>($t5)), Eq(0, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0), Eq(0, $t8))), And(Neq<address>(Signer::$address_of[]($t0), a550c18), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    assert {:msg "assert_failed(35,6943,7019): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#161, $t2) && $IsEqual'num'(0, $t8)) || ($ResourceExists($1_AccountLimits_Window'#0'_$memory#162, $1_Signer_$address_of($t1)) && $IsEqual'num'(0, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#163, $t3) && $IsEqual'num'(0, $t8))) || ((!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0)) && $IsEqual'num'(0, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#163, $t5) && $IsEqual'num'(0, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0) && $IsEqual'num'(0, $t8))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)));

    // abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_window<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
procedure {:timeLimit 40} $1_AccountLimits_publish_window'$1_XUS_XUS'$verify(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#161: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#162: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_Roles_RoleId_$memory#163: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#182: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$at(35,6165,6166)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($addr#$signer($t1));

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume Identical($t3, Signer::$address_of($t1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:585:9+39
    assume {:print "$at(40,25941,25980)"} true;
    assume ($t3 == $1_Signer_$address_of($t1));

    // assume Identical($t4, select Roles::RoleId.role_id(global<Roles::RoleId>($t3))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:587:9+43
    assume {:print "$at(40,26057,26100)"} true;
    assume ($t4 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)));

    // assume Identical($t5, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t5 == $1_Signer_$address_of($t0));

    // @163 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$at(35,6165,6166)"} true;
    $1_Roles_RoleId_$memory#163 := $1_Roles_RoleId_$memory;

    // @161 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#161 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @162 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#162 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[dr_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,0):", $t0} $t0 == $t0;

    // trace_local[to_limit]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,1):", $t1} $t1 == $t1;

    // trace_local[limit_address]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,2):", $t2} $t2 == $t2;

    // assume Identical($t6, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t6 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume {:print "$at(35,6306,6341)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::$address_of($t0), a550c18), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::$address_of($t0), a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816)));

    // if ($t7) goto L7 else goto L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(0, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(0, $t8))), And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume ((((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(0, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'num'(0, $t8))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)));

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume {:print "$at(35,6306,6341)"} true;
    assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    goto L5;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:17+6
    assume {:print "$at(35,6359,6365)"} true;
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t2);

    // if ($t9) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101

    // $t10 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:90+18
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := opaque begin: Errors::not_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41

    // assume WellFormed($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41
    assume $IsEqual'u64'($t11, 0);

    // $t11 := opaque end: Errors::not_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    assume {:print "$at(35,6351,6452)"} true;
    assume {:print "$track_abort(20,10):", $t11} $t11 == $t11;

    // $t8 := move($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    $t8 := $t11;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    goto L5;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:49+8
    assume {:print "$at(35,6502,6510)"} true;
L0:

    // assume Identical($t12, Signer::$address_of($t1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:585:9+39
    assume {:print "$at(40,25941,25980)"} true;
    assume ($t12 == $1_Signer_$address_of($t1));

    // assume Identical($t13, select Roles::RoleId.role_id(global<Roles::RoleId>($t12))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:587:9+43
    assume {:print "$at(40,26057,26100)"} true;
    assume ($t13 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)));

    // opaque begin: Roles::assert_parent_vasp_or_child_vasp($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume {:print "$at(35,6462,6511)"} true;

    // assume Identical($t14, Or(Not(exists<Roles::RoleId>($t12)), And(Neq<u64>($t13, 0), Neq<u64>($t13, 0)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume ($t14 == (!$ResourceExists($1_Roles_RoleId_$memory, $t12) || (!$IsEqual'u64'($t13, 0) && !$IsEqual'u64'($t13, 0))));

    // if ($t14) goto L9 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    if ($t14) { goto L9; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t12)), Eq(0, $t8)), And(And(Neq<u64>($t13, 0), Neq<u64>($t13, 0)), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(0, $t8)) || ((!$IsEqual'u64'($t13, 0) && !$IsEqual'u64'($t13, 0)) && $IsEqual'num'(0, $t8)));

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume {:print "$at(35,6462,6511)"} true;
    assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    goto L5;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
L8:

    // opaque end: Roles::assert_parent_vasp_or_child_vasp($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49

    // $t15 := Signer::address_of($t1) on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:39+28
    assume {:print "$at(35,6568,6596)"} true;
    call $t15 := $1_Signer_address_of($t1);
    if ($abort_flag) {
        assume {:print "$at(35,6568,6596)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t16 := exists<AccountLimits::Window<#0>>($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:14+6
    $t16 := $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t15);

    // $t17 := !($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:13+1
    call $t17 := $Not($t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    assume {:print "$at(35,6521,6655)"} true;
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134

    // $t18 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:39+7
    assume {:print "$at(35,6637,6644)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::already_published($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34

    // assume WellFormed($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34
    assume $IsEqual'u64'($t19, 0);

    // $t19 := opaque end: Errors::already_published($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34

    // trace_abort($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    assume {:print "$at(35,6521,6655)"} true;
    assume {:print "$track_abort(20,10):", $t19} $t19 == $t19;

    // $t8 := move($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    $t8 := $t19;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    goto L5;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:158:13+8
    assume {:print "$at(35,6686,6694)"} true;
L2:

    // $t20 := AccountLimits::current_time() on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:160:31+14
    assume {:print "$at(35,6757,6771)"} true;
    call $t20 := $1_AccountLimits_current_time();
    if ($abort_flag) {
        assume {:print "$at(35,6757,6771)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t21 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:161:32+1
    assume {:print "$at(35,6804,6805)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:162:33+1
    assume {:print "$at(35,6839,6840)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:163:34+1
    assume {:print "$at(35,6875,6876)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := pack AccountLimits::Window<#0>($t20, $t21, $t22, $t23, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:159:13+214
    assume {:print "$at(35,6708,6922)"} true;
    $t24 := $1_AccountLimits_Window'$1_XUS_XUS'($t20, $t21, $t22, $t23, $t2);

    // @182 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // state save for global update invariants
    assume {:print "$at(35,6165,6938)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#182 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // move_to<AccountLimits::Window<#0>>($t24, $t1) on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:157:9+7
    assume {:print "$at(35,6665,6672)"} true;
    if ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $addr#$signer($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $addr#$signer($t1), $t24);
    }
    if ($abort_flag) {
        assume {:print "$at(35,6665,6672)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // assert forall window_addr: TypeDomain<address>() where exists[@182]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#182, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:167:5+1
    assume {:print "$at(35,6937,6938)"} true;
L4:

    // assert Not(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:179:9+88
    assume {:print "$at(35,7462,7550)"} true;
    assert {:msg "assert_failed(35,7462,7550): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#161, $t2);

    // assert Not(exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:180:9+96
    assume {:print "$at(35,7559,7655)"} true;
    assert {:msg "assert_failed(35,7559,7655): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#162, $1_Signer_$address_of($t1));

    // assert Not(Not(exists[@163]<Roles::RoleId>($t3))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:586:9+59
    assume {:print "$at(40,25989,26048)"} true;
    assert {:msg "assert_failed(40,25989,26048): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#163, $t3);

    // assert Not(And(Neq<u64>($t4, 0), Neq<u64>($t4, 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:588:9+113
    assume {:print "$at(40,26109,26222)"} true;
    assert {:msg "assert_failed(40,26109,26222): function does not abort under this condition"}
      !(!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0));

    // assert Not(Not(exists[@163]<Roles::RoleId>($t5))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:542:9+59
    assume {:print "$at(40,24116,24175)"} true;
    assert {:msg "assert_failed(40,24116,24175): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#163, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:543:9+87
    assume {:print "$at(40,24184,24271)"} true;
    assert {:msg "assert_failed(40,24184,24271): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    assume {:print "$at(28,1380,1461)"} true;
    assert {:msg "assert_failed(28,1380,1461): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 173345816);

    // return () at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    return;

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:167:5+1
    assume {:print "$at(35,6937,6938)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2)), exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1))), Not(exists[@163]<Roles::RoleId>($t3))), And(Neq<u64>($t4, 0), Neq<u64>($t4, 0))), Not(exists[@163]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    assume {:print "$at(35,6943,7019)"} true;
    assert {:msg "assert_failed(35,6943,7019): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#161, $t2) || $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#162, $1_Signer_$address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#163, $t3)) || (!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0))) || !$ResourceExists($1_Roles_RoleId_$memory#163, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2)), Eq(0, $t8)), And(exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1)), Eq(0, $t8))), And(Not(exists[@163]<Roles::RoleId>($t3)), Eq(0, $t8))), And(And(Neq<u64>($t4, 0), Neq<u64>($t4, 0)), Eq(0, $t8))), And(Not(exists[@163]<Roles::RoleId>($t5)), Eq(0, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0), Eq(0, $t8))), And(Neq<address>(Signer::$address_of[]($t0), a550c18), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    assert {:msg "assert_failed(35,6943,7019): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#161, $t2) && $IsEqual'num'(0, $t8)) || ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#162, $1_Signer_$address_of($t1)) && $IsEqual'num'(0, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#163, $t3) && $IsEqual'num'(0, $t8))) || ((!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0)) && $IsEqual'num'(0, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#163, $t5) && $IsEqual'num'(0, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0) && $IsEqual'num'(0, $t8))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)));

    // abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_window<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
procedure {:timeLimit 40} $1_AccountLimits_publish_window'$1_XDX_XDX'$verify(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#161: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#162: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_Roles_RoleId_$memory#163: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#182: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$at(35,6165,6166)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($addr#$signer($t1));

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume Identical($t3, Signer::$address_of($t1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:585:9+39
    assume {:print "$at(40,25941,25980)"} true;
    assume ($t3 == $1_Signer_$address_of($t1));

    // assume Identical($t4, select Roles::RoleId.role_id(global<Roles::RoleId>($t3))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:587:9+43
    assume {:print "$at(40,26057,26100)"} true;
    assume ($t4 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t3)));

    // assume Identical($t5, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t5 == $1_Signer_$address_of($t0));

    // @163 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$at(35,6165,6166)"} true;
    $1_Roles_RoleId_$memory#163 := $1_Roles_RoleId_$memory;

    // @161 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#161 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @162 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#162 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[dr_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,0):", $t0} $t0 == $t0;

    // trace_local[to_limit]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,1):", $t1} $t1 == $t1;

    // trace_local[limit_address]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+1
    assume {:print "$track_local(20,10,2):", $t2} $t2 == $t2;

    // assume Identical($t6, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:541:9+39
    assume {:print "$at(40,24068,24107)"} true;
    assume ($t6 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume {:print "$at(35,6306,6341)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::$address_of($t0), a550c18), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::$address_of($t0), a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816)));

    // if ($t7) goto L7 else goto L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(0, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(0, $t8))), And(Neq<address>(Signer::$address_of($t0), a550c18), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume ((((!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(0, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'num'(0, $t8))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)));

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    assume {:print "$at(35,6306,6341)"} true;
    assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
    goto L5;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:150:9+35

    // $t9 := exists<AccountLimits::LimitsDefinition<#0>>($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:17+6
    assume {:print "$at(35,6359,6365)"} true;
    $t9 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t2);

    // if ($t9) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
L1:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101

    // $t10 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:90+18
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := opaque begin: Errors::not_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41

    // assume WellFormed($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41
    assume $IsEqual'u64'($t11, 0);

    // $t11 := opaque end: Errors::not_published($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:68+41

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    assume {:print "$at(35,6351,6452)"} true;
    assume {:print "$track_abort(20,10):", $t11} $t11 == $t11;

    // $t8 := move($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    $t8 := $t11;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:151:9+101
    goto L5;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:49+8
    assume {:print "$at(35,6502,6510)"} true;
L0:

    // assume Identical($t12, Signer::$address_of($t1)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:585:9+39
    assume {:print "$at(40,25941,25980)"} true;
    assume ($t12 == $1_Signer_$address_of($t1));

    // assume Identical($t13, select Roles::RoleId.role_id(global<Roles::RoleId>($t12))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:587:9+43
    assume {:print "$at(40,26057,26100)"} true;
    assume ($t13 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)));

    // opaque begin: Roles::assert_parent_vasp_or_child_vasp($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume {:print "$at(35,6462,6511)"} true;

    // assume Identical($t14, Or(Not(exists<Roles::RoleId>($t12)), And(Neq<u64>($t13, 0), Neq<u64>($t13, 0)))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume ($t14 == (!$ResourceExists($1_Roles_RoleId_$memory, $t12) || (!$IsEqual'u64'($t13, 0) && !$IsEqual'u64'($t13, 0))));

    // if ($t14) goto L9 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    if ($t14) { goto L9; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t12)), Eq(0, $t8)), And(And(Neq<u64>($t13, 0), Neq<u64>($t13, 0)), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(0, $t8)) || ((!$IsEqual'u64'($t13, 0) && !$IsEqual'u64'($t13, 0)) && $IsEqual'num'(0, $t8)));

    // trace_abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    assume {:print "$at(35,6462,6511)"} true;
    assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
    goto L5;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49
L8:

    // opaque end: Roles::assert_parent_vasp_or_child_vasp($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:152:9+49

    // $t15 := Signer::address_of($t1) on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:39+28
    assume {:print "$at(35,6568,6596)"} true;
    call $t15 := $1_Signer_address_of($t1);
    if ($abort_flag) {
        assume {:print "$at(35,6568,6596)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t16 := exists<AccountLimits::Window<#0>>($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:14+6
    $t16 := $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t15);

    // $t17 := !($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:154:13+1
    call $t17 := $Not($t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    assume {:print "$at(35,6521,6655)"} true;
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
L3:

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134

    // $t18 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:39+7
    assume {:print "$at(35,6637,6644)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::already_published($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34

    // assume WellFormed($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34
    assume $IsEqual'u64'($t19, 0);

    // $t19 := opaque end: Errors::already_published($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:155:13+34

    // trace_abort($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    assume {:print "$at(35,6521,6655)"} true;
    assume {:print "$track_abort(20,10):", $t19} $t19 == $t19;

    // $t8 := move($t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    $t8 := $t19;

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:153:9+134
    goto L5;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:158:13+8
    assume {:print "$at(35,6686,6694)"} true;
L2:

    // $t20 := AccountLimits::current_time() on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:160:31+14
    assume {:print "$at(35,6757,6771)"} true;
    call $t20 := $1_AccountLimits_current_time();
    if ($abort_flag) {
        assume {:print "$at(35,6757,6771)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t21 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:161:32+1
    assume {:print "$at(35,6804,6805)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:162:33+1
    assume {:print "$at(35,6839,6840)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:163:34+1
    assume {:print "$at(35,6875,6876)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := pack AccountLimits::Window<#0>($t20, $t21, $t22, $t23, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:159:13+214
    assume {:print "$at(35,6708,6922)"} true;
    $t24 := $1_AccountLimits_Window'$1_XDX_XDX'($t20, $t21, $t22, $t23, $t2);

    // @182 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:145:5+773
    // state save for global update invariants
    assume {:print "$at(35,6165,6938)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#182 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // move_to<AccountLimits::Window<#0>>($t24, $t1) on_abort goto L5 with $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:157:9+7
    assume {:print "$at(35,6665,6672)"} true;
    if ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $addr#$signer($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $addr#$signer($t1), $t24);
    }
    if ($abort_flag) {
        assume {:print "$at(35,6665,6672)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(20,10):", $t8} $t8 == $t8;
        goto L5;
    }

    // assert forall window_addr: TypeDomain<address>() where exists[@182]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#182, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:167:5+1
    assume {:print "$at(35,6937,6938)"} true;
L4:

    // assert Not(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:179:9+88
    assume {:print "$at(35,7462,7550)"} true;
    assert {:msg "assert_failed(35,7462,7550): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#161, $t2);

    // assert Not(exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:180:9+96
    assume {:print "$at(35,7559,7655)"} true;
    assert {:msg "assert_failed(35,7559,7655): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#162, $1_Signer_$address_of($t1));

    // assert Not(Not(exists[@163]<Roles::RoleId>($t3))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:586:9+59
    assume {:print "$at(40,25989,26048)"} true;
    assert {:msg "assert_failed(40,25989,26048): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#163, $t3);

    // assert Not(And(Neq<u64>($t4, 0), Neq<u64>($t4, 0))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:588:9+113
    assume {:print "$at(40,26109,26222)"} true;
    assert {:msg "assert_failed(40,26109,26222): function does not abort under this condition"}
      !(!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0));

    // assert Not(Not(exists[@163]<Roles::RoleId>($t5))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:542:9+59
    assume {:print "$at(40,24116,24175)"} true;
    assert {:msg "assert_failed(40,24116,24175): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#163, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:543:9+87
    assume {:print "$at(40,24184,24271)"} true;
    assert {:msg "assert_failed(40,24184,24271): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    assume {:print "$at(28,1380,1461)"} true;
    assert {:msg "assert_failed(28,1380,1461): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 173345816);

    // return () at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:31:9+81
    return;

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:167:5+1
    assume {:print "$at(35,6937,6938)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2)), exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1))), Not(exists[@163]<Roles::RoleId>($t3))), And(Neq<u64>($t4, 0), Neq<u64>($t4, 0))), Not(exists[@163]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::$address_of[]($t0), a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    assume {:print "$at(35,6943,7019)"} true;
    assert {:msg "assert_failed(35,6943,7019): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#161, $t2) || $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#162, $1_Signer_$address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#163, $t3)) || (!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0))) || !$ResourceExists($1_Roles_RoleId_$memory#163, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@161]<AccountLimits::LimitsDefinition<#0>>($t2)), Eq(0, $t8)), And(exists[@162]<AccountLimits::Window<#0>>(Signer::$address_of[]($t1)), Eq(0, $t8))), And(Not(exists[@163]<Roles::RoleId>($t3)), Eq(0, $t8))), And(And(Neq<u64>($t4, 0), Neq<u64>($t4, 0)), Eq(0, $t8))), And(Not(exists[@163]<Roles::RoleId>($t5)), Eq(0, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@163]<Roles::RoleId>($t5)), 0), Eq(0, $t8))), And(Neq<address>(Signer::$address_of[]($t0), a550c18), Eq(0, $t8))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    assert {:msg "assert_failed(35,6943,7019): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#161, $t2) && $IsEqual'num'(0, $t8)) || ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#162, $1_Signer_$address_of($t1)) && $IsEqual'num'(0, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#163, $t3) && $IsEqual'num'(0, $t8))) || ((!$IsEqual'u64'($t4, 0) && !$IsEqual'u64'($t4, 0)) && $IsEqual'num'(0, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#163, $t5) && $IsEqual'num'(0, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#163, $t5)), 0) && $IsEqual'num'(0, $t8))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 173345816) && $IsEqual'num'(0, $t8)));

    // abort($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:168:5+76
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::reset_window [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
procedure {:timeLimit 40} $1_AccountLimits_reset_window$verify(_$t0: $Mutation ($1_AccountLimits_Window'#0'), _$t1: $1_AccountLimits_LimitsDefinition'#0') returns ($ret0: $Mutation ($1_AccountLimits_Window'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: $1_AccountLimits_Window'#0';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: $Mutation (int);
    var $t0: $Mutation ($1_AccountLimits_Window'#0');
    var $t1: $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'u64': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#152: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t20));
    assume IsEmptyVec(p#$Mutation($t22));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume {:print "$at(35,14848,14849)"} true;
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t0));

    // assume And(WellFormed($t1), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($t1), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($t1), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($t1), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($t1), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume ($IsValid'$1_AccountLimits_LimitsDefinition'#0''($t1) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0)));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+506
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // @152 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#152 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // $t3 := read_ref($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    $t3 := $Dereference($t0);

    // trace_local[window]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t0);
    assume {:print "$track_local(20,11,0):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // trace_local[limits_definition]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:311:5+1
    assume {:print "$track_local(20,11,1):", $t1} $t1 == $t1;

    // $t4 := opaque begin: DiemTimestamp::now_microseconds() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    assume {:print "$at(35,14983,15016)"} true;

    // assume Identical($t5, Not(DiemTimestamp::$is_operating())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    assume ($t5 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L10 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    if ($t5) { goto L10; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
L9:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(0, $t6)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(0, $t6));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    assume {:print "$at(35,14983,15016)"} true;
    assume {:print "$track_abort(20,11):", $t6} $t6 == $t6;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    goto L7;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
L8:

    // assume WellFormed($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    assume $IsValid'u64'($t4);

    // assume Eq<u64>($t4, DiemTimestamp::spec_now_microseconds()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33
    assume $IsEqual'u64'($t4, $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // $t4 := opaque end: DiemTimestamp::now_microseconds() at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:28+33

    // trace_local[current_time]($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:312:13+12
    assume {:print "$track_local(20,11,2):", $t4} $t4 == $t4;

    // $t7 := get_field<AccountLimits::Window<#0>>.window_start($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:17+19
    assume {:print "$at(35,15034,15053)"} true;
    $t7 := $window_start#$1_AccountLimits_Window'#0'($Dereference($t0));

    // $t8 := 18446744073709551615 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:40+7
    $t8 := 18446744073709551615;
    assume $IsValid'u64'($t8);

    // $t9 := get_field<AccountLimits::LimitsDefinition<#0>>.time_period($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:50+29
    $t9 := $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1);

    // $t10 := -($t8, $t9) on_abort goto L7 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:48+1
    call $t10 := $Sub($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(35,15065,15066)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,11):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t11 := <=($t7, $t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:37+2
    call $t11 := $Le($t7, $t10);

    // if ($t11) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104
L1:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104

    // destroy($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104

    // $t12 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:104+7
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::limit_exceeded($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:81+31

    // assume WellFormed($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:81+31
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:81+31
    assume $IsEqual'u64'($t13, 0);

    // $t13 := opaque end: Errors::limit_exceeded($t12) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:81+31

    // trace_abort($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104
    assume {:print "$at(35,15026,15130)"} true;
    assume {:print "$track_abort(20,11):", $t13} $t13 == $t13;

    // $t6 := move($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104
    $t6 := $t13;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:313:9+104
    goto L7;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:13+12
    assume {:print "$at(35,15144,15156)"} true;
L0:

    // $t14 := get_field<AccountLimits::Window<#0>>.window_start($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:28+19
    $t14 := $window_start#$1_AccountLimits_Window'#0'($Dereference($t0));

    // $t15 := get_field<AccountLimits::LimitsDefinition<#0>>.time_period($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:50+29
    $t15 := $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1);

    // $t16 := +($t14, $t15) on_abort goto L7 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:48+1
    call $t16 := $AddU64($t14, $t15);
    if ($abort_flag) {
        assume {:print "$at(35,15179,15180)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,11):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t17 := >($t4, $t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:26+1
    call $t17 := $Gt($t4, $t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
L3:

    // goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
    goto L4;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
L2:

    // destroy($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
    goto L5;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:315:35+12
    assume {:print "$at(35,15248,15260)"} true;
L4:

    // $t18 := borrow_field<AccountLimits::Window<#0>>.window_start($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:315:13+19
    $t18 := $ChildMutation($t0, 0, $window_start#$1_AccountLimits_Window'#0'($Dereference($t0)));

    // write_ref($t18, $t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:315:13+34
    $t18 := $UpdateMutation($t18, $t4);

    // write_back[Reference($t0).window_start (u64)]($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:315:13+34
    $t0 := $UpdateMutation($t0, $Update'$1_AccountLimits_Window'#0''_window_start($Dereference($t0), $Dereference($t18)));

    // $t19 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:316:36+1
    assume {:print "$at(35,15297,15298)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := borrow_field<AccountLimits::Window<#0>>.window_inflow($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:316:13+20
    $t20 := $ChildMutation($t0, 1, $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t0)));

    // write_ref($t20, $t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:316:13+24
    $t20 := $UpdateMutation($t20, $t19);

    // write_back[Reference($t0).window_inflow (u64)]($t20) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:316:13+24
    $t0 := $UpdateMutation($t0, $Update'$1_AccountLimits_Window'#0''_window_inflow($Dereference($t0), $Dereference($t20)));

    // $t21 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:317:37+1
    assume {:print "$at(35,15336,15337)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := borrow_field<AccountLimits::Window<#0>>.window_outflow($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:317:13+21
    $t22 := $ChildMutation($t0, 2, $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t0)));

    // write_ref($t22, $t21) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:317:13+25
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).window_outflow (u64)]($t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:317:13+25
    $t0 := $UpdateMutation($t0, $Update'$1_AccountLimits_Window'#0''_window_outflow($Dereference($t0), $Dereference($t22)));

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
    assume {:print "$at(35,15140,15348)"} true;
L5:

    // trace_local[window]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:314:9+208
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t0);
    assume {:print "$track_local(20,11,0):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:319:5+1
    assume {:print "$at(35,15353,15354)"} true;
L6:

    // assert Not(Gt(Add(select AccountLimits::Window.window_start($t3), select AccountLimits::LimitsDefinition.time_period($t1)), MaxU64())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(($window_start#$1_AccountLimits_Window'#0'($t3) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1)) > $MAX_U64);

    // assert Not(Not(DiemTimestamp::$is_operating[@152]())) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#152);

    // assert Eq<AccountLimits::Window<#0>>($t0, AccountLimits::spec_window_reset_with_limits[@152]<#0>($t3, $t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:334:9+80
    assume {:print "$at(35,15952,16032)"} true;
    assert {:msg "assert_failed(35,15952,16032): post-condition does not hold"}
      $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t0), $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#152, $t3, $t1));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:334:9+80
    $ret0 := $t0;
    return;

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:319:5+1
    assume {:print "$at(35,15353,15354)"} true;
L7:

    // assert Or(Gt(Add(select AccountLimits::Window.window_start($t3), select AccountLimits::LimitsDefinition.time_period($t1)), MaxU64()), Not(DiemTimestamp::$is_operating[@152]())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:320:5+141
    assume {:print "$at(35,15359,15500)"} true;
    assert {:msg "assert_failed(35,15359,15500): abort not covered by any of the `aborts_if` clauses"}
      ((($window_start#$1_AccountLimits_Window'#0'($t3) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#152));

    // assert Or(And(Gt(Add(select AccountLimits::Window.window_start($t3), select AccountLimits::LimitsDefinition.time_period($t1)), MaxU64()), Eq(0, $t6)), And(Not(DiemTimestamp::$is_operating[@152]()), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:320:5+141
    assert {:msg "assert_failed(35,15359,15500): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($window_start#$1_AccountLimits_Window'#0'($t3) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1)) > $MAX_U64) && $IsEqual'num'(0, $t6)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#152) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:320:5+141
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

}

// fun AccountLimits::update_deposit_limits [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
procedure {:timeLimit 40} $1_AccountLimits_update_deposit_limits$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_AccountLimits_Window'#0');
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'#0';
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#167: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#168: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'#0'_$memory#184: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$at(35,3164,3165)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    assume {:print "$at(35,3632,3672)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$t1];

    // @169 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @168 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_AccountLimits_LimitsDefinition'#0'_$memory#168 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @167 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_AccountLimits_Window'#0'_$memory#167 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$at(35,3164,3165)"} true;
    assume {:print "$track_local(20,12,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$track_local(20,12,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$track_local(20,12,2):", $t2} $t2 == $t2;

    // $t3 := exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:17+6
    assume {:print "$at(35,3363,3369)"} true;
    $t3 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // if ($t3) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:71+7
L1:

    // $t4 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:71+7
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := opaque begin: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30
    assume $IsEqual'u64'($t5, 0);

    // $t5 := opaque end: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30

    // trace_abort($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    assume {:print "$at(35,3355,3426)"} true;
    assume {:print "$track_abort(20,12):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    $t6 := $t5;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:83:13+6
    assume {:print "$at(35,3489,3495)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:84:13+17
    assume {:print "$at(35,3509,3526)"} true;
    assert {:msg "assert_failed(35,3509,3526): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t1];

    // $t7 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:84:13+17
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,3509,3526)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,12):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := opaque begin: AccountLimits::can_receive_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;

    // $t9 := read_ref($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    $t9 := $Dereference($t7);

    // assume Identical($t10, Or(Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume ($t10 == ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t7))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t10) goto L5 else goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
L5:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), Eq(0, $t6)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t7))) && $IsEqual'num'(0, $t6)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(0, $t6)));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    assume {:print "$track_abort(20,12):", $t6} $t6 == $t6;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    goto L3;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
L4:

    // havoc[mut]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t7 := $UpdateMutation($t7, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t7));

    // assume WellFormed($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t7));

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsValid'bool'($t8);

    // assume Eq<bool>($t8, AccountLimits::spec_receiving_limits_ok<#0>($t9, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsEqual'bool'($t8, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9, $t0));

    // assume (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t7, $t9))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t7), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t7), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t7), $t9))));

    // $t8 := opaque end: AccountLimits::can_receive_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125

    // @184 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // state save for global update invariants
    assume {:print "$at(35,3164,3567)"} true;
    $1_AccountLimits_Window'#0'_$memory#184 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // assert forall window_addr: TypeDomain<address>() where exists[@184]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#184, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_return[0]($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    assume {:print "$track_return(20,12,0):", $t8} $t8 == $t8;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:86:5+1
    assume {:print "$at(35,3566,3567)"} true;
L2:

    // assert Not(Not(exists[@167]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:104:9+69
    assume {:print "$at(35,4312,4381)"} true;
    assert {:msg "assert_failed(35,4312,4381): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'#0'_$memory#167, $t1);

    // assert Not(Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:398:9+98
    assume {:print "$at(35,19068,19166)"} true;
    assert {:msg "assert_failed(35,19068,19166): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:408:9+102
    assume {:print "$at(35,19563,19665)"} true;
    assert {:msg "assert_failed(35,19563,19665): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:409:9+104
    assume {:print "$at(35,19674,19778)"} true;
    assert {:msg "assert_failed(35,19674,19778): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169));

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:90:9+39
    assume {:print "$at(35,3681,3720)"} true;
    assert {:msg "assert_failed(35,3681,3720): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // assert Eq<address>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t1)), select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:91:9+118
    assume {:print "$at(35,3729,3847)"} true;
    assert {:msg "assert_failed(35,3729,3847): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1)), $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)));

    // assert Eq<bool>($t8, AccountLimits::spec_receiving_limits_ok<#0>(global[@167]<AccountLimits::Window<#0>>($t1), $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:415:9+67
    assume {:print "$at(35,19919,19986)"} true;
    assert {:msg "assert_failed(35,19919,19986): post-condition does not hold"}
      $IsEqual'bool'($t8, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1), $t0));

    // assert (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>(global[@167]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@167]<AccountLimits::Window<#0>>($t1)))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    assume {:print "$at(35,19995,20274)"} true;
    assert {:msg "assert_failed(35,19995,20274): post-condition does not hold"}
      (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)))));

    // return $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    $ret0 := $t8;
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:86:5+1
    assume {:print "$at(35,3566,3567)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Not(exists[@167]<AccountLimits::Window<#0>>($t1)), Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    assume {:print "$at(35,3572,3996)"} true;
    assert {:msg "assert_failed(35,3572,3996): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#167, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169)));

    // assert Or(Or(Or(Or(Or(And(Not(exists[@167]<AccountLimits::Window<#0>>($t1)), Eq(0, $t6)), And(Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1)))), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    assert {:msg "assert_failed(35,3572,3996): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#167, $t1) && $IsEqual'num'(0, $t6)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#168, $ResourceValue($1_AccountLimits_Window'#0'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169)) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_deposit_limits<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
procedure {:timeLimit 40} $1_AccountLimits_update_deposit_limits'$1_XUS_XUS'$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#167: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#184: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$at(35,3164,3165)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    assume {:print "$at(35,3632,3672)"} true;
    assume $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // @169 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @168 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @167 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#167 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$at(35,3164,3165)"} true;
    assume {:print "$track_local(20,12,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$track_local(20,12,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$track_local(20,12,2):", $t2} $t2 == $t2;

    // $t3 := exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:17+6
    assume {:print "$at(35,3363,3369)"} true;
    $t3 := $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // if ($t3) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:71+7
L1:

    // $t4 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:71+7
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := opaque begin: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30
    assume $IsEqual'u64'($t5, 0);

    // $t5 := opaque end: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30

    // trace_abort($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    assume {:print "$at(35,3355,3426)"} true;
    assume {:print "$track_abort(20,12):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    $t6 := $t5;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:83:13+6
    assume {:print "$at(35,3489,3495)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:84:13+17
    assume {:print "$at(35,3509,3526)"} true;
    assert {:msg "assert_failed(35,3509,3526): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // $t7 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:84:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,3509,3526)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,12):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := opaque begin: AccountLimits::can_receive_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;

    // $t9 := read_ref($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    $t9 := $Dereference($t7);

    // assume Identical($t10, Or(Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume ($t10 == ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t10) goto L5 else goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
L5:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), Eq(0, $t6)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7))) && $IsEqual'num'(0, $t6)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(0, $t6)));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    assume {:print "$track_abort(20,12):", $t6} $t6 == $t6;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    goto L3;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
L4:

    // havoc[mut]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t7 := $UpdateMutation($t7, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7));

    // assume WellFormed($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7));

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsValid'bool'($t8);

    // assume Eq<bool>($t8, AccountLimits::spec_receiving_limits_ok<#0>($t9, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsEqual'bool'($t8, $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9, $t0));

    // assume (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t7, $t9))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7), $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7), $t9))));

    // $t8 := opaque end: AccountLimits::can_receive_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125

    // @184 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // state save for global update invariants
    assume {:print "$at(35,3164,3567)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#184 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // assert forall window_addr: TypeDomain<address>() where exists[@184]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#184, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_return[0]($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    assume {:print "$track_return(20,12,0):", $t8} $t8 == $t8;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:86:5+1
    assume {:print "$at(35,3566,3567)"} true;
L2:

    // assert Not(Not(exists[@167]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:104:9+69
    assume {:print "$at(35,4312,4381)"} true;
    assert {:msg "assert_failed(35,4312,4381): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1);

    // assert Not(Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:398:9+98
    assume {:print "$at(35,19068,19166)"} true;
    assert {:msg "assert_failed(35,19068,19166): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:408:9+102
    assume {:print "$at(35,19563,19665)"} true;
    assert {:msg "assert_failed(35,19563,19665): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:409:9+104
    assume {:print "$at(35,19674,19778)"} true;
    assert {:msg "assert_failed(35,19674,19778): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169));

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:90:9+39
    assume {:print "$at(35,3681,3720)"} true;
    assert {:msg "assert_failed(35,3681,3720): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // assert Eq<address>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t1)), select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:91:9+118
    assume {:print "$at(35,3729,3847)"} true;
    assert {:msg "assert_failed(35,3729,3847): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)));

    // assert Eq<bool>($t8, AccountLimits::spec_receiving_limits_ok<#0>(global[@167]<AccountLimits::Window<#0>>($t1), $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:415:9+67
    assume {:print "$at(35,19919,19986)"} true;
    assert {:msg "assert_failed(35,19919,19986): post-condition does not hold"}
      $IsEqual'bool'($t8, $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1), $t0));

    // assert (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>(global[@167]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@167]<AccountLimits::Window<#0>>($t1)))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    assume {:print "$at(35,19995,20274)"} true;
    assert {:msg "assert_failed(35,19995,20274): post-condition does not hold"}
      (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)))));

    // return $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    $ret0 := $t8;
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:86:5+1
    assume {:print "$at(35,3566,3567)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Not(exists[@167]<AccountLimits::Window<#0>>($t1)), Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    assume {:print "$at(35,3572,3996)"} true;
    assert {:msg "assert_failed(35,3572,3996): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169)));

    // assert Or(Or(Or(Or(Or(And(Not(exists[@167]<AccountLimits::Window<#0>>($t1)), Eq(0, $t6)), And(Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1)))), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    assert {:msg "assert_failed(35,3572,3996): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1) && $IsEqual'num'(0, $t6)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169)) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_deposit_limits<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
procedure {:timeLimit 40} $1_AccountLimits_update_deposit_limits'$1_XDX_XDX'$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#167: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#184: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$at(35,3164,3165)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    assume {:print "$at(35,3632,3672)"} true;
    assume $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // @169 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @168 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @167 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:89:9+40
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#167 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$at(35,3164,3165)"} true;
    assume {:print "$track_local(20,12,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$track_local(20,12,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+1
    assume {:print "$track_local(20,12,2):", $t2} $t2 == $t2;

    // $t3 := exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:17+6
    assume {:print "$at(35,3363,3369)"} true;
    $t3 := $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // if ($t3) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:71+7
L1:

    // $t4 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:71+7
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := opaque begin: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30
    assume $IsEqual'u64'($t5, 0);

    // $t5 := opaque end: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:49+30

    // trace_abort($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    assume {:print "$at(35,3355,3426)"} true;
    assume {:print "$track_abort(20,12):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    $t6 := $t5;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:81:9+71
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:83:13+6
    assume {:print "$at(35,3489,3495)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:84:13+17
    assume {:print "$at(35,3509,3526)"} true;
    assert {:msg "assert_failed(35,3509,3526): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // $t7 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:84:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,3509,3526)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,12):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := opaque begin: AccountLimits::can_receive_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;

    // $t9 := read_ref($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    $t9 := $Dereference($t7);

    // assume Identical($t10, Or(Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume ($t10 == ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t10) goto L5 else goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
L5:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), Eq(0, $t6)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t7)), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7))) && $IsEqual'num'(0, $t6)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(0, $t6)));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    assume {:print "$track_abort(20,12):", $t6} $t6 == $t6;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    goto L3;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
L4:

    // havoc[mut]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t7 := $UpdateMutation($t7, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7));

    // assume WellFormed($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7));

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsValid'bool'($t8);

    // assume Eq<bool>($t8, AccountLimits::spec_receiving_limits_ok<#0>($t9, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume $IsEqual'bool'($t8, $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9, $t0));

    // assume (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t7, $t9))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7), $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7), $t9))));

    // $t8 := opaque end: AccountLimits::can_receive_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125

    // @184 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:76:5+403
    // state save for global update invariants
    assume {:print "$at(35,3164,3567)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#184 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // assert forall window_addr: TypeDomain<address>() where exists[@184]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#184, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_return[0]($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:82:9+125
    assume {:print "$at(35,3436,3561)"} true;
    assume {:print "$track_return(20,12,0):", $t8} $t8 == $t8;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:86:5+1
    assume {:print "$at(35,3566,3567)"} true;
L2:

    // assert Not(Not(exists[@167]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:104:9+69
    assume {:print "$at(35,4312,4381)"} true;
    assert {:msg "assert_failed(35,4312,4381): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1);

    // assert Not(Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:398:9+98
    assume {:print "$at(35,19068,19166)"} true;
    assert {:msg "assert_failed(35,19068,19166): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:408:9+102
    assume {:print "$at(35,19563,19665)"} true;
    assert {:msg "assert_failed(35,19563,19665): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:409:9+104
    assume {:print "$at(35,19674,19778)"} true;
    assert {:msg "assert_failed(35,19674,19778): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169));

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:90:9+39
    assume {:print "$at(35,3681,3720)"} true;
    assert {:msg "assert_failed(35,3681,3720): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // assert Eq<address>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t1)), select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:91:9+118
    assume {:print "$at(35,3729,3847)"} true;
    assert {:msg "assert_failed(35,3729,3847): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)));

    // assert Eq<bool>($t8, AccountLimits::spec_receiving_limits_ok<#0>(global[@167]<AccountLimits::Window<#0>>($t1), $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:415:9+67
    assume {:print "$at(35,19919,19986)"} true;
    assert {:msg "assert_failed(35,19919,19986): post-condition does not hold"}
      $IsEqual'bool'($t8, $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1), $t0));

    // assert (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>(global[@167]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@167]<AccountLimits::Window<#0>>($t1)))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    assume {:print "$at(35,19995,20274)"} true;
    assert {:msg "assert_failed(35,19995,20274): post-condition does not hold"}
      (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)))));

    // return $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:416:9+279
    $ret0 := $t8;
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:86:5+1
    assume {:print "$at(35,3566,3567)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Not(exists[@167]<AccountLimits::Window<#0>>($t1)), Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    assume {:print "$at(35,3572,3996)"} true;
    assert {:msg "assert_failed(35,3572,3996): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169)));

    // assert Or(Or(Or(Or(Or(And(Not(exists[@167]<AccountLimits::Window<#0>>($t1)), Eq(0, $t6)), And(Not(exists[@168]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@167]<AccountLimits::Window<#0>>($t1)))), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@169, @168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@167]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@168]<#0>(global[@167]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@169]())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    assert {:msg "assert_failed(35,3572,3996): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1) && $IsEqual'num'(0, $t6)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#168, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#167, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#169)) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:87:5+424
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_limits_definition [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
procedure {:timeLimit 40} $1_AccountLimits_update_limits_definition$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: $Mutation ($1_AccountLimits_LimitsDefinition'#0');
    var $t7: $1_AccountLimits_LimitsDefinition'#0';
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_AccountLimits_LimitsDefinition'#0');
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: bool;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: bool;
    var $t27: $Mutation (int);
    var $t28: $1_AccountLimits_LimitsDefinition'#0';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $1_AccountLimits_LimitsDefinition'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#150: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#151: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#180: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#181: $Memory $1_AccountLimits_LimitsDefinition'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$at(35,9793,9794)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t7, global<AccountLimits::LimitsDefinition<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:254:9+71
    assume {:print "$at(35,11175,11246)"} true;
    assume ($t7 == $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1));

    // assume Identical($t8, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t8 == $1_Signer_$address_of($t0));

    // assume CanModify<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    assume {:print "$at(35,10868,10927)"} true;
    assume $1_AccountLimits_LimitsDefinition'#0'_$modifies[$t1];

    // @150 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    $1_Roles_RoleId_$memory#150 := $1_Roles_RoleId_$memory;

    // @151 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    $1_AccountLimits_LimitsDefinition'#0'_$memory#151 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // trace_local[tc_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$at(35,9793,9794)"} true;
    assume {:print "$track_local(20,13,0):", $t0} $t0 == $t0;

    // trace_local[limit_address]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,1):", $t1} $t1 == $t1;

    // trace_local[new_max_inflow]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,2):", $t2} $t2 == $t2;

    // trace_local[new_max_outflow]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,3):", $t3} $t3 == $t3;

    // trace_local[new_max_holding_balance]($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,4):", $t4} $t4 == $t4;

    // trace_local[new_time_period]($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,5):", $t5} $t5 == $t5;

    // assume Identical($t9, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t9 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume {:print "$at(35,10070,10115)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::$address_of($t0), b1e55ed))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)));

    // if ($t10) goto L21 else goto L20 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    if ($t10) { goto L21; } else { goto L20; }

    // label L21 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
L21:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(0, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(0, $t11))), And(Neq<address>(Signer::$address_of($t0), b1e55ed), Eq(0, $t11))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(0, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'num'(0, $t11))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t11)));

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume {:print "$at(35,10070,10115)"} true;
    assume {:print "$track_abort(20,13):", $t11} $t11 == $t11;

    // goto L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    goto L19;

    // label L20 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
L20:

    // opaque end: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45

    // $t12 := exists<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:17+6
    assume {:print "$at(35,10133,10139)"} true;
    $t12 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1);

    // if ($t12) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:90+18
L1:

    // $t13 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:90+18
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41

    // assume WellFormed($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41
    assume $IsEqual'u64'($t14, 0);

    // $t14 := opaque end: Errors::not_published($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41

    // trace_abort($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    assume {:print "$at(35,10125,10226)"} true;
    assume {:print "$track_abort(20,13):", $t14} $t14 == $t14;

    // $t11 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    $t11 := $t14;

    // goto L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    goto L19;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:72+13
    assume {:print "$at(35,10473,10486)"} true;
L0:

    // assert CanModify<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:26+17
    assert {:msg "assert_failed(35,10427,10444): caller does not have permission to modify `AccountLimits::LimitsDefinition<#0>` at given address"}
      $1_AccountLimits_LimitsDefinition'#0'_$modifies[$t1];

    // $t15 := borrow_global<AccountLimits::LimitsDefinition<#0>>($t1) on_abort goto L19 with $t11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:26+17
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,10427,10444)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(20,13):", $t11} $t11 == $t11;
        goto L19;
    }

    // trace_local[limits_def]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:13+10
    $temp_0'$1_AccountLimits_LimitsDefinition'#0'' := $Dereference($t15);
    assume {:print "$track_local(20,13,6):", $temp_0'$1_AccountLimits_LimitsDefinition'#0''} $temp_0'$1_AccountLimits_LimitsDefinition'#0'' == $temp_0'$1_AccountLimits_LimitsDefinition'#0'';

    // $t16 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:30+1
    assume {:print "$at(35,10518,10519)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t2, $t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:28+1
    call $t17 := $Gt($t2, $t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
L3:

    // goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    goto L4;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
L2:

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    goto L5;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:59+14
L4:

    // $t18 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+21
    $t18 := $ChildMutation($t15, 0, $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t18, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+38
    $t18 := $UpdateMutation($t18, $t2);

    // write_back[Reference($t15).max_inflow (u64)]($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+38
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow($Dereference($t15), $Dereference($t18)));

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:13+15
    assume {:print "$at(35,10577,10592)"} true;
L5:

    // $t19 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:31+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := >($t3, $t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:29+1
    call $t20 := $Gt($t3, $t19);

    // if ($t20) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    if ($t20) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
L7:

    // goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    goto L8;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
L6:

    // goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    goto L9;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:61+15
L8:

    // $t21 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+22
    $t21 := $ChildMutation($t15, 1, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t21, $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+40
    $t21 := $UpdateMutation($t21, $t3);

    // write_back[Reference($t15).max_outflow (u64)]($t21) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow($Dereference($t15), $Dereference($t21)));

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:13+23
    assume {:print "$at(35,10656,10679)"} true;
L9:

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:39+1
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := >($t4, $t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:37+1
    call $t23 := $Gt($t4, $t22);

    // if ($t23) goto L10 else goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    if ($t23) { goto L10; } else { goto L11; }

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
L11:

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    goto L12;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
L10:

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    goto L13;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:69+23
L12:

    // $t24 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+22
    $t24 := $ChildMutation($t15, 3, $max_holding#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t24, $t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+48
    $t24 := $UpdateMutation($t24, $t4);

    // write_back[Reference($t15).max_holding (u64)]($t24) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+48
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding($Dereference($t15), $Dereference($t24)));

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:13+15
    assume {:print "$at(35,10751,10766)"} true;
L13:

    // $t25 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:31+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t5, $t25) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:29+1
    call $t26 := $Gt($t5, $t25);

    // if ($t26) goto L14 else goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    if ($t26) { goto L14; } else { goto L15; }

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
L15:

    // goto L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    goto L16;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
L14:

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // @180 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // state save for global update invariants
    assume {:print "$at(35,9793,10823)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory#180 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    assume {:print "$at(35,10747,10816)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'#0'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@180]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#180, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume {:print "$at(8,2643,2769)"} true;
    assert {:msg "assert_failed(8,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume {:print "$at(8,2853,2986)"} true;
    assert {:msg "assert_failed(8,2853,2986): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume {:print "$at(30,7351,7477)"} true;
    assert {:msg "assert_failed(30,7351,7477): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume {:print "$at(30,7561,7694)"} true;
    assert {:msg "assert_failed(30,7561,7694): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // destroy($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    assume {:print "$at(35,10747,10816)"} true;

    // goto L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    goto L17;

    // label L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:61+15
L16:

    // $t27 := borrow_field<AccountLimits::LimitsDefinition<#0>>.time_period($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+22
    $t27 := $ChildMutation($t15, 2, $time_period#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t27, $t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    $t27 := $UpdateMutation($t27, $t5);

    // write_back[Reference($t15).time_period (u64)]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period($Dereference($t15), $Dereference($t27)));

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // @181 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // state save for global update invariants
    assume {:print "$at(30,7561,7694)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory#181 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    assume {:print "$at(35,10774,10814)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'#0'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@181]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#181, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume {:print "$at(8,2643,2769)"} true;
    assert {:msg "assert_failed(8,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume {:print "$at(8,2853,2986)"} true;
    assert {:msg "assert_failed(8,2853,2986): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume {:print "$at(30,7351,7477)"} true;
    assert {:msg "assert_failed(30,7351,7477): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume {:print "$at(30,7561,7694)"} true;
    assert {:msg "assert_failed(30,7561,7694): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // label L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:78+1
    assume {:print "$at(35,10816,10817)"} true;
L17:

    // label L18 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:248:5+1
    assume {:print "$at(35,10822,10823)"} true;
L18:

    // assume Identical($t28, global<AccountLimits::LimitsDefinition<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:255:9+76
    assume {:print "$at(35,11255,11331)"} true;
    assume ($t28 == $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1));

    // assert Not(Not(exists[@150]<Roles::RoleId>($t8))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:550:9+59
    assume {:print "$at(40,24470,24529)"} true;
    assert {:msg "assert_failed(40,24470,24529): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#150, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:551:9+97
    assume {:print "$at(40,24538,24635)"} true;
    assert {:msg "assert_failed(40,24538,24635): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:49:9+103
    assume {:print "$at(28,2054,2157)"} true;
    assert {:msg "assert_failed(28,2054,2157): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 186537453);

    // assert Not(Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:252:9+88
    assume {:print "$at(35,11011,11099)"} true;
    assert {:msg "assert_failed(35,11011,11099): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#151, $t1);

    // assert exists<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:253:9+58
    assume {:print "$at(35,11108,11166)"} true;
    assert {:msg "assert_failed(35,11108,11166): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1);

    // assert Implies(Gt($t2, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_inflow($t28), $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:256:9+75
    assume {:print "$at(35,11340,11415)"} true;
    assert {:msg "assert_failed(35,11340,11415): post-condition does not hold"}
      (($t2 > 0) ==> $IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t28), $t2));

    // assert Implies(Eq<u64>($t2, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_inflow($t28), select AccountLimits::LimitsDefinition.max_inflow($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:257:9+87
    assume {:print "$at(35,11424,11511)"} true;
    assert {:msg "assert_failed(35,11424,11511): post-condition does not hold"}
      ($IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t28), $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t7)));

    // assert Implies(Gt($t3, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_outflow($t28), $t3)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:258:9+78
    assume {:print "$at(35,11520,11598)"} true;
    assert {:msg "assert_failed(35,11520,11598): post-condition does not hold"}
      (($t3 > 0) ==> $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t28), $t3));

    // assert Implies(Eq<u64>($t3, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_outflow($t28), select AccountLimits::LimitsDefinition.max_outflow($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:259:9+90
    assume {:print "$at(35,11607,11697)"} true;
    assert {:msg "assert_failed(35,11607,11697): post-condition does not hold"}
      ($IsEqual'u64'($t3, 0) ==> $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t28), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t7)));

    // assert Implies(Gt($t4, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_holding($t28), $t4)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:260:9+94
    assume {:print "$at(35,11706,11800)"} true;
    assert {:msg "assert_failed(35,11706,11800): post-condition does not hold"}
      (($t4 > 0) ==> $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t28), $t4));

    // assert Implies(Eq<u64>($t4, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_holding($t28), select AccountLimits::LimitsDefinition.max_holding($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:261:9+98
    assume {:print "$at(35,11809,11907)"} true;
    assert {:msg "assert_failed(35,11809,11907): post-condition does not hold"}
      ($IsEqual'u64'($t4, 0) ==> $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t28), $max_holding#$1_AccountLimits_LimitsDefinition'#0'($t7)));

    // assert Implies(Gt($t5, 0), Eq<u64>(select AccountLimits::LimitsDefinition.time_period($t28), $t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:262:9+78
    assume {:print "$at(35,11916,11994)"} true;
    assert {:msg "assert_failed(35,11916,11994): post-condition does not hold"}
      (($t5 > 0) ==> $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'($t28), $t5));

    // assert Implies(Eq<u64>($t5, 0), Eq<u64>(select AccountLimits::LimitsDefinition.time_period($t28), select AccountLimits::LimitsDefinition.time_period($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:263:9+90
    assume {:print "$at(35,12003,12093)"} true;
    assert {:msg "assert_failed(35,12003,12093): post-condition does not hold"}
      ($IsEqual'u64'($t5, 0) ==> $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'($t28), $time_period#$1_AccountLimits_LimitsDefinition'#0'($t7)));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:263:9+90
    return;

    // label L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:248:5+1
    assume {:print "$at(35,10822,10823)"} true;
L19:

    // assert Or(Or(Or(Not(exists[@150]<Roles::RoleId>($t8)), Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::$address_of[]($t0), b1e55ed)), Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    assume {:print "$at(35,10828,12099)"} true;
    assert {:msg "assert_failed(35,10828,12099): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Roles_RoleId_$memory#150, $t8) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#151, $t1));

    // assert Or(Or(Or(And(Not(exists[@150]<Roles::RoleId>($t8)), Eq(0, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0), Eq(0, $t11))), And(Neq<address>(Signer::$address_of[]($t0), b1e55ed), Eq(0, $t11))), And(Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1)), Eq(0, $t11))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    assert {:msg "assert_failed(35,10828,12099): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#150, $t8) && $IsEqual'num'(0, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0) && $IsEqual'num'(0, $t11))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t11))) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#151, $t1) && $IsEqual'num'(0, $t11)));

    // abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_limits_definition<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
procedure {:timeLimit 40} $1_AccountLimits_update_limits_definition'$1_XUS_XUS'$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XUS_XUS');
    var $t7: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XUS_XUS');
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: bool;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: bool;
    var $t27: $Mutation (int);
    var $t28: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'': $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#150: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#180: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#181: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$at(35,9793,9794)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t7, global<AccountLimits::LimitsDefinition<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:254:9+71
    assume {:print "$at(35,11175,11246)"} true;
    assume ($t7 == $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1));

    // assume Identical($t8, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t8 == $1_Signer_$address_of($t0));

    // assume CanModify<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    assume {:print "$at(35,10868,10927)"} true;
    assume $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$modifies[$t1];

    // @150 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    $1_Roles_RoleId_$memory#150 := $1_Roles_RoleId_$memory;

    // @151 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // trace_local[tc_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$at(35,9793,9794)"} true;
    assume {:print "$track_local(20,13,0):", $t0} $t0 == $t0;

    // trace_local[limit_address]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,1):", $t1} $t1 == $t1;

    // trace_local[new_max_inflow]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,2):", $t2} $t2 == $t2;

    // trace_local[new_max_outflow]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,3):", $t3} $t3 == $t3;

    // trace_local[new_max_holding_balance]($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,4):", $t4} $t4 == $t4;

    // trace_local[new_time_period]($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,5):", $t5} $t5 == $t5;

    // assume Identical($t9, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t9 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume {:print "$at(35,10070,10115)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::$address_of($t0), b1e55ed))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)));

    // if ($t10) goto L21 else goto L20 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    if ($t10) { goto L21; } else { goto L20; }

    // label L21 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
L21:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(0, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(0, $t11))), And(Neq<address>(Signer::$address_of($t0), b1e55ed), Eq(0, $t11))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(0, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'num'(0, $t11))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t11)));

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume {:print "$at(35,10070,10115)"} true;
    assume {:print "$track_abort(20,13):", $t11} $t11 == $t11;

    // goto L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    goto L19;

    // label L20 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
L20:

    // opaque end: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45

    // $t12 := exists<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:17+6
    assume {:print "$at(35,10133,10139)"} true;
    $t12 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1);

    // if ($t12) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:90+18
L1:

    // $t13 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:90+18
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41

    // assume WellFormed($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41
    assume $IsEqual'u64'($t14, 0);

    // $t14 := opaque end: Errors::not_published($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41

    // trace_abort($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    assume {:print "$at(35,10125,10226)"} true;
    assume {:print "$track_abort(20,13):", $t14} $t14 == $t14;

    // $t11 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    $t11 := $t14;

    // goto L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    goto L19;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:72+13
    assume {:print "$at(35,10473,10486)"} true;
L0:

    // assert CanModify<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:26+17
    assert {:msg "assert_failed(35,10427,10444): caller does not have permission to modify `AccountLimits::LimitsDefinition<#0>` at given address"}
      $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$modifies[$t1];

    // $t15 := borrow_global<AccountLimits::LimitsDefinition<#0>>($t1) on_abort goto L19 with $t11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:26+17
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,10427,10444)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(20,13):", $t11} $t11 == $t11;
        goto L19;
    }

    // trace_local[limits_def]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:13+10
    $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'' := $Dereference($t15);
    assume {:print "$track_local(20,13,6):", $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''} $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'';

    // $t16 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:30+1
    assume {:print "$at(35,10518,10519)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t2, $t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:28+1
    call $t17 := $Gt($t2, $t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
L3:

    // goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    goto L4;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
L2:

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    goto L5;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:59+14
L4:

    // $t18 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+21
    $t18 := $ChildMutation($t15, 0, $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t18, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+38
    $t18 := $UpdateMutation($t18, $t2);

    // write_back[Reference($t15).max_inflow (u64)]($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+38
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow($Dereference($t15), $Dereference($t18)));

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:13+15
    assume {:print "$at(35,10577,10592)"} true;
L5:

    // $t19 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:31+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := >($t3, $t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:29+1
    call $t20 := $Gt($t3, $t19);

    // if ($t20) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    if ($t20) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
L7:

    // goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    goto L8;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
L6:

    // goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    goto L9;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:61+15
L8:

    // $t21 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+22
    $t21 := $ChildMutation($t15, 1, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t21, $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+40
    $t21 := $UpdateMutation($t21, $t3);

    // write_back[Reference($t15).max_outflow (u64)]($t21) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow($Dereference($t15), $Dereference($t21)));

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:13+23
    assume {:print "$at(35,10656,10679)"} true;
L9:

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:39+1
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := >($t4, $t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:37+1
    call $t23 := $Gt($t4, $t22);

    // if ($t23) goto L10 else goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    if ($t23) { goto L10; } else { goto L11; }

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
L11:

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    goto L12;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
L10:

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    goto L13;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:69+23
L12:

    // $t24 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+22
    $t24 := $ChildMutation($t15, 3, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t24, $t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+48
    $t24 := $UpdateMutation($t24, $t4);

    // write_back[Reference($t15).max_holding (u64)]($t24) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+48
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding($Dereference($t15), $Dereference($t24)));

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:13+15
    assume {:print "$at(35,10751,10766)"} true;
L13:

    // $t25 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:31+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t5, $t25) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:29+1
    call $t26 := $Gt($t5, $t25);

    // if ($t26) goto L14 else goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    if ($t26) { goto L14; } else { goto L15; }

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
L15:

    // goto L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    goto L16;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
L14:

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // @180 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // state save for global update invariants
    assume {:print "$at(35,9793,10823)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#180 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    assume {:print "$at(35,10747,10816)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@180]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#180, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume {:print "$at(8,2643,2769)"} true;
    assert {:msg "assert_failed(8,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume {:print "$at(8,2853,2986)"} true;
    assert {:msg "assert_failed(8,2853,2986): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume {:print "$at(30,7351,7477)"} true;
    assert {:msg "assert_failed(30,7351,7477): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume {:print "$at(30,7561,7694)"} true;
    assert {:msg "assert_failed(30,7561,7694): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // destroy($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    assume {:print "$at(35,10747,10816)"} true;

    // goto L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    goto L17;

    // label L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:61+15
L16:

    // $t27 := borrow_field<AccountLimits::LimitsDefinition<#0>>.time_period($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+22
    $t27 := $ChildMutation($t15, 2, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t27, $t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    $t27 := $UpdateMutation($t27, $t5);

    // write_back[Reference($t15).time_period (u64)]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period($Dereference($t15), $Dereference($t27)));

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // @181 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // state save for global update invariants
    assume {:print "$at(30,7561,7694)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#181 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    assume {:print "$at(35,10774,10814)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@181]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#181, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume {:print "$at(8,2643,2769)"} true;
    assert {:msg "assert_failed(8,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume {:print "$at(8,2853,2986)"} true;
    assert {:msg "assert_failed(8,2853,2986): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume {:print "$at(30,7351,7477)"} true;
    assert {:msg "assert_failed(30,7351,7477): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume {:print "$at(30,7561,7694)"} true;
    assert {:msg "assert_failed(30,7561,7694): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // label L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:78+1
    assume {:print "$at(35,10816,10817)"} true;
L17:

    // label L18 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:248:5+1
    assume {:print "$at(35,10822,10823)"} true;
L18:

    // assume Identical($t28, global<AccountLimits::LimitsDefinition<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:255:9+76
    assume {:print "$at(35,11255,11331)"} true;
    assume ($t28 == $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1));

    // assert Not(Not(exists[@150]<Roles::RoleId>($t8))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:550:9+59
    assume {:print "$at(40,24470,24529)"} true;
    assert {:msg "assert_failed(40,24470,24529): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#150, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:551:9+97
    assume {:print "$at(40,24538,24635)"} true;
    assert {:msg "assert_failed(40,24538,24635): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:49:9+103
    assume {:print "$at(28,2054,2157)"} true;
    assert {:msg "assert_failed(28,2054,2157): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 186537453);

    // assert Not(Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:252:9+88
    assume {:print "$at(35,11011,11099)"} true;
    assert {:msg "assert_failed(35,11011,11099): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151, $t1);

    // assert exists<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:253:9+58
    assume {:print "$at(35,11108,11166)"} true;
    assert {:msg "assert_failed(35,11108,11166): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1);

    // assert Implies(Gt($t2, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_inflow($t28), $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:256:9+75
    assume {:print "$at(35,11340,11415)"} true;
    assert {:msg "assert_failed(35,11340,11415): post-condition does not hold"}
      (($t2 > 0) ==> $IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $t2));

    // assert Implies(Eq<u64>($t2, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_inflow($t28), select AccountLimits::LimitsDefinition.max_inflow($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:257:9+87
    assume {:print "$at(35,11424,11511)"} true;
    assert {:msg "assert_failed(35,11424,11511): post-condition does not hold"}
      ($IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t7)));

    // assert Implies(Gt($t3, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_outflow($t28), $t3)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:258:9+78
    assume {:print "$at(35,11520,11598)"} true;
    assert {:msg "assert_failed(35,11520,11598): post-condition does not hold"}
      (($t3 > 0) ==> $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $t3));

    // assert Implies(Eq<u64>($t3, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_outflow($t28), select AccountLimits::LimitsDefinition.max_outflow($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:259:9+90
    assume {:print "$at(35,11607,11697)"} true;
    assert {:msg "assert_failed(35,11607,11697): post-condition does not hold"}
      ($IsEqual'u64'($t3, 0) ==> $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t7)));

    // assert Implies(Gt($t4, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_holding($t28), $t4)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:260:9+94
    assume {:print "$at(35,11706,11800)"} true;
    assert {:msg "assert_failed(35,11706,11800): post-condition does not hold"}
      (($t4 > 0) ==> $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $t4));

    // assert Implies(Eq<u64>($t4, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_holding($t28), select AccountLimits::LimitsDefinition.max_holding($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:261:9+98
    assume {:print "$at(35,11809,11907)"} true;
    assert {:msg "assert_failed(35,11809,11907): post-condition does not hold"}
      ($IsEqual'u64'($t4, 0) ==> $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t7)));

    // assert Implies(Gt($t5, 0), Eq<u64>(select AccountLimits::LimitsDefinition.time_period($t28), $t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:262:9+78
    assume {:print "$at(35,11916,11994)"} true;
    assert {:msg "assert_failed(35,11916,11994): post-condition does not hold"}
      (($t5 > 0) ==> $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $t5));

    // assert Implies(Eq<u64>($t5, 0), Eq<u64>(select AccountLimits::LimitsDefinition.time_period($t28), select AccountLimits::LimitsDefinition.time_period($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:263:9+90
    assume {:print "$at(35,12003,12093)"} true;
    assert {:msg "assert_failed(35,12003,12093): post-condition does not hold"}
      ($IsEqual'u64'($t5, 0) ==> $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t28), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t7)));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:263:9+90
    return;

    // label L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:248:5+1
    assume {:print "$at(35,10822,10823)"} true;
L19:

    // assert Or(Or(Or(Not(exists[@150]<Roles::RoleId>($t8)), Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::$address_of[]($t0), b1e55ed)), Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    assume {:print "$at(35,10828,12099)"} true;
    assert {:msg "assert_failed(35,10828,12099): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Roles_RoleId_$memory#150, $t8) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151, $t1));

    // assert Or(Or(Or(And(Not(exists[@150]<Roles::RoleId>($t8)), Eq(0, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0), Eq(0, $t11))), And(Neq<address>(Signer::$address_of[]($t0), b1e55ed), Eq(0, $t11))), And(Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1)), Eq(0, $t11))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    assert {:msg "assert_failed(35,10828,12099): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#150, $t8) && $IsEqual'num'(0, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0) && $IsEqual'num'(0, $t11))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t11))) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151, $t1) && $IsEqual'num'(0, $t11)));

    // abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_limits_definition<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
procedure {:timeLimit 40} $1_AccountLimits_update_limits_definition'$1_XDX_XDX'$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XDX_XDX');
    var $t7: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XDX_XDX');
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: bool;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: bool;
    var $t27: $Mutation (int);
    var $t28: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'': $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#150: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#151: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#180: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#181: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$at(35,9793,9794)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume $IsValid'u64'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t7, global<AccountLimits::LimitsDefinition<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:254:9+71
    assume {:print "$at(35,11175,11246)"} true;
    assume ($t7 == $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1));

    // assume Identical($t8, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t8 == $1_Signer_$address_of($t0));

    // assume CanModify<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    assume {:print "$at(35,10868,10927)"} true;
    assume $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$modifies[$t1];

    // @150 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    $1_Roles_RoleId_$memory#150 := $1_Roles_RoleId_$memory;

    // @151 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:250:9+59
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#151 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$at(35,9793,9794)"} true;
    assume {:print "$track_local(20,13,0):", $t0} $t0 == $t0;

    // trace_local[limit_address]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,1):", $t1} $t1 == $t1;

    // trace_local[new_max_inflow]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,2):", $t2} $t2 == $t2;

    // trace_local[new_max_outflow]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,3):", $t3} $t3 == $t3;

    // trace_local[new_max_holding_balance]($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,4):", $t4} $t4 == $t4;

    // trace_local[new_time_period]($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1
    assume {:print "$track_local(20,13,5):", $t5} $t5 == $t5;

    // assume Identical($t9, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t9 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume {:print "$at(35,10070,10115)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::$address_of($t0), b1e55ed))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)));

    // if ($t10) goto L21 else goto L20 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    if ($t10) { goto L21; } else { goto L20; }

    // label L21 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
L21:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(0, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 0), Eq(0, $t11))), And(Neq<address>(Signer::$address_of($t0), b1e55ed), Eq(0, $t11))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(0, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 0) && $IsEqual'num'(0, $t11))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t11)));

    // trace_abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    assume {:print "$at(35,10070,10115)"} true;
    assume {:print "$track_abort(20,13):", $t11} $t11 == $t11;

    // goto L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
    goto L19;

    // label L20 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45
L20:

    // opaque end: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:238:9+45

    // $t12 := exists<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:17+6
    assume {:print "$at(35,10133,10139)"} true;
    $t12 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1);

    // if ($t12) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:90+18
L1:

    // $t13 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:90+18
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41

    // assume WellFormed($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41
    assume $IsEqual'u64'($t14, 0);

    // $t14 := opaque end: Errors::not_published($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:68+41

    // trace_abort($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    assume {:print "$at(35,10125,10226)"} true;
    assume {:print "$track_abort(20,13):", $t14} $t14 == $t14;

    // $t11 := move($t14) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    $t11 := $t14;

    // goto L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:239:9+101
    goto L19;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:72+13
    assume {:print "$at(35,10473,10486)"} true;
L0:

    // assert CanModify<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:26+17
    assert {:msg "assert_failed(35,10427,10444): caller does not have permission to modify `AccountLimits::LimitsDefinition<#0>` at given address"}
      $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$modifies[$t1];

    // $t15 := borrow_global<AccountLimits::LimitsDefinition<#0>>($t1) on_abort goto L19 with $t11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:26+17
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,10427,10444)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(20,13):", $t11} $t11 == $t11;
        goto L19;
    }

    // trace_local[limits_def]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:243:13+10
    $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'' := $Dereference($t15);
    assume {:print "$track_local(20,13,6):", $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''} $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'';

    // $t16 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:30+1
    assume {:print "$at(35,10518,10519)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t2, $t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:28+1
    call $t17 := $Gt($t2, $t16);

    // if ($t17) goto L2 else goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
L3:

    // goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    goto L4;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
L2:

    // goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:9+66
    goto L5;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:59+14
L4:

    // $t18 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+21
    $t18 := $ChildMutation($t15, 0, $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t18, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+38
    $t18 := $UpdateMutation($t18, $t2);

    // write_back[Reference($t15).max_inflow (u64)]($t18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:244:35+38
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow($Dereference($t15), $Dereference($t18)));

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:13+15
    assume {:print "$at(35,10577,10592)"} true;
L5:

    // $t19 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:31+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := >($t3, $t19) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:29+1
    call $t20 := $Gt($t3, $t19);

    // if ($t20) goto L6 else goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    if ($t20) { goto L6; } else { goto L7; }

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
L7:

    // goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    goto L8;

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
L6:

    // goto L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:9+69
    goto L9;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:61+15
L8:

    // $t21 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+22
    $t21 := $ChildMutation($t15, 1, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t21, $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+40
    $t21 := $UpdateMutation($t21, $t3);

    // write_back[Reference($t15).max_outflow (u64)]($t21) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:245:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow($Dereference($t15), $Dereference($t21)));

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:13+23
    assume {:print "$at(35,10656,10679)"} true;
L9:

    // $t22 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:39+1
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := >($t4, $t22) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:37+1
    call $t23 := $Gt($t4, $t22);

    // if ($t23) goto L10 else goto L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    if ($t23) { goto L10; } else { goto L11; }

    // label L11 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
L11:

    // goto L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    goto L12;

    // label L10 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
L10:

    // goto L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:9+85
    goto L13;

    // label L12 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:69+23
L12:

    // $t24 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+22
    $t24 := $ChildMutation($t15, 3, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t24, $t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+48
    $t24 := $UpdateMutation($t24, $t4);

    // write_back[Reference($t15).max_holding (u64)]($t24) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:246:44+48
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding($Dereference($t15), $Dereference($t24)));

    // label L13 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:13+15
    assume {:print "$at(35,10751,10766)"} true;
L13:

    // $t25 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:31+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t5, $t25) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:29+1
    call $t26 := $Gt($t5, $t25);

    // if ($t26) goto L14 else goto L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    if ($t26) { goto L14; } else { goto L15; }

    // label L15 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
L15:

    // goto L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    goto L16;

    // label L14 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
L14:

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // @180 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:230:5+1030
    // state save for global update invariants
    assume {:print "$at(35,9793,10823)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#180 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    assume {:print "$at(35,10747,10816)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@180]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#180, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume {:print "$at(8,2643,2769)"} true;
    assert {:msg "assert_failed(8,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume {:print "$at(8,2853,2986)"} true;
    assert {:msg "assert_failed(8,2853,2986): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume {:print "$at(30,7351,7477)"} true;
    assert {:msg "assert_failed(30,7351,7477): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume {:print "$at(30,7561,7694)"} true;
    assert {:msg "assert_failed(30,7561,7694): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // destroy($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    assume {:print "$at(35,10747,10816)"} true;

    // goto L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:9+69
    goto L17;

    // label L16 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:61+15
L16:

    // $t27 := borrow_field<AccountLimits::LimitsDefinition<#0>>.time_period($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+22
    $t27 := $ChildMutation($t15, 2, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t27, $t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    $t27 := $UpdateMutation($t27, $t5);

    // write_back[Reference($t15).time_period (u64)]($t27) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period($Dereference($t15), $Dereference($t27)));

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:30:9+25
    assume {:print "$at(35,1303,1328)"} true;
    assert {:msg "assert_failed(35,1303,1328): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:31:9+26
    assume {:print "$at(35,1337,1363)"} true;
    assert {:msg "assert_failed(35,1337,1363): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:32:9+26
    assume {:print "$at(35,1372,1398)"} true;
    assert {:msg "assert_failed(35,1372,1398): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    // data invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:33:9+26
    assume {:print "$at(35,1407,1433)"} true;
    assert {:msg "assert_failed(35,1407,1433): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // @181 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // state save for global update invariants
    assume {:print "$at(30,7561,7694)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#181 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:36+40
    assume {:print "$at(35,10774,10814)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@181]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:571:9+170
    assume {:print "$at(35,27076,27246)"} true;
    assert {:msg "assert_failed(35,27076,27246): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#181, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume {:print "$at(8,2643,2769)"} true;
    assert {:msg "assert_failed(8,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume {:print "$at(8,2853,2986)"} true;
    assert {:msg "assert_failed(8,2853,2986): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume {:print "$at(30,7351,7477)"} true;
    assert {:msg "assert_failed(30,7351,7477): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume {:print "$at(30,7561,7694)"} true;
    assert {:msg "assert_failed(30,7561,7694): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // label L17 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:247:78+1
    assume {:print "$at(35,10816,10817)"} true;
L17:

    // label L18 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:248:5+1
    assume {:print "$at(35,10822,10823)"} true;
L18:

    // assume Identical($t28, global<AccountLimits::LimitsDefinition<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:255:9+76
    assume {:print "$at(35,11255,11331)"} true;
    assume ($t28 == $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1));

    // assert Not(Not(exists[@150]<Roles::RoleId>($t8))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:550:9+59
    assume {:print "$at(40,24470,24529)"} true;
    assert {:msg "assert_failed(40,24470,24529): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#150, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:551:9+97
    assume {:print "$at(40,24538,24635)"} true;
    assert {:msg "assert_failed(40,24538,24635): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:49:9+103
    assume {:print "$at(28,2054,2157)"} true;
    assert {:msg "assert_failed(28,2054,2157): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 186537453);

    // assert Not(Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:252:9+88
    assume {:print "$at(35,11011,11099)"} true;
    assert {:msg "assert_failed(35,11011,11099): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#151, $t1);

    // assert exists<AccountLimits::LimitsDefinition<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:253:9+58
    assume {:print "$at(35,11108,11166)"} true;
    assert {:msg "assert_failed(35,11108,11166): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1);

    // assert Implies(Gt($t2, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_inflow($t28), $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:256:9+75
    assume {:print "$at(35,11340,11415)"} true;
    assert {:msg "assert_failed(35,11340,11415): post-condition does not hold"}
      (($t2 > 0) ==> $IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $t2));

    // assert Implies(Eq<u64>($t2, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_inflow($t28), select AccountLimits::LimitsDefinition.max_inflow($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:257:9+87
    assume {:print "$at(35,11424,11511)"} true;
    assert {:msg "assert_failed(35,11424,11511): post-condition does not hold"}
      ($IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t7)));

    // assert Implies(Gt($t3, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_outflow($t28), $t3)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:258:9+78
    assume {:print "$at(35,11520,11598)"} true;
    assert {:msg "assert_failed(35,11520,11598): post-condition does not hold"}
      (($t3 > 0) ==> $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $t3));

    // assert Implies(Eq<u64>($t3, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_outflow($t28), select AccountLimits::LimitsDefinition.max_outflow($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:259:9+90
    assume {:print "$at(35,11607,11697)"} true;
    assert {:msg "assert_failed(35,11607,11697): post-condition does not hold"}
      ($IsEqual'u64'($t3, 0) ==> $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t7)));

    // assert Implies(Gt($t4, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_holding($t28), $t4)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:260:9+94
    assume {:print "$at(35,11706,11800)"} true;
    assert {:msg "assert_failed(35,11706,11800): post-condition does not hold"}
      (($t4 > 0) ==> $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $t4));

    // assert Implies(Eq<u64>($t4, 0), Eq<u64>(select AccountLimits::LimitsDefinition.max_holding($t28), select AccountLimits::LimitsDefinition.max_holding($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:261:9+98
    assume {:print "$at(35,11809,11907)"} true;
    assert {:msg "assert_failed(35,11809,11907): post-condition does not hold"}
      ($IsEqual'u64'($t4, 0) ==> $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t7)));

    // assert Implies(Gt($t5, 0), Eq<u64>(select AccountLimits::LimitsDefinition.time_period($t28), $t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:262:9+78
    assume {:print "$at(35,11916,11994)"} true;
    assert {:msg "assert_failed(35,11916,11994): post-condition does not hold"}
      (($t5 > 0) ==> $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $t5));

    // assert Implies(Eq<u64>($t5, 0), Eq<u64>(select AccountLimits::LimitsDefinition.time_period($t28), select AccountLimits::LimitsDefinition.time_period($t7))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:263:9+90
    assume {:print "$at(35,12003,12093)"} true;
    assert {:msg "assert_failed(35,12003,12093): post-condition does not hold"}
      ($IsEqual'u64'($t5, 0) ==> $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t28), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t7)));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:263:9+90
    return;

    // label L19 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:248:5+1
    assume {:print "$at(35,10822,10823)"} true;
L19:

    // assert Or(Or(Or(Not(exists[@150]<Roles::RoleId>($t8)), Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0)), Neq<address>(Signer::$address_of[]($t0), b1e55ed)), Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    assume {:print "$at(35,10828,12099)"} true;
    assert {:msg "assert_failed(35,10828,12099): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_Roles_RoleId_$memory#150, $t8) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#151, $t1));

    // assert Or(Or(Or(And(Not(exists[@150]<Roles::RoleId>($t8)), Eq(0, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global[@150]<Roles::RoleId>($t8)), 0), Eq(0, $t11))), And(Neq<address>(Signer::$address_of[]($t0), b1e55ed), Eq(0, $t11))), And(Not(exists[@151]<AccountLimits::LimitsDefinition<#0>>($t1)), Eq(0, $t11))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    assert {:msg "assert_failed(35,10828,12099): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#150, $t8) && $IsEqual'num'(0, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#150, $t8)), 0) && $IsEqual'num'(0, $t11))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t11))) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#151, $t1) && $IsEqual'num'(0, $t11)));

    // abort($t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:249:5+1271
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_window_info [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
procedure {:timeLimit 40} $1_AccountLimits_update_window_info$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $Mutation ($1_AccountLimits_Window'#0');
    var $t5: $1_AccountLimits_Window'#0';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation ($1_AccountLimits_Window'#0');
    var $t11: int;
    var $t12: bool;
    var $t13: $Mutation (int);
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t18: $1_AccountLimits_Window'#0';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#147: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'#0'_$memory#148: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#149: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_Window'#0'_$memory#178: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_Window'#0'_$memory#179: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$at(35,12880,12881)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'address'($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t5, global<AccountLimits::Window<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:294:9+58
    assume {:print "$at(35,13852,13910)"} true;
    assume ($t5 == $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));

    // assume Identical($t6, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t6 == $1_Signer_$address_of($t0));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    assume {:print "$at(35,13498,13548)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$t1];

    // @147 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_Roles_RoleId_$memory#147 := $1_Roles_RoleId_$memory;

    // @149 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_AccountLimits_LimitsDefinition'#0'_$memory#149 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @148 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_AccountLimits_Window'#0'_$memory#148 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[tc_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$at(35,12880,12881)"} true;
    assume {:print "$track_local(20,14,0):", $t0} $t0 == $t0;

    // trace_local[window_address]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,1):", $t1} $t1 == $t1;

    // trace_local[aggregate_balance]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,2):", $t2} $t2 == $t2;

    // trace_local[new_limit_address]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,3):", $t3} $t3 == $t3;

    // assume Identical($t7, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t7 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume {:print "$at(35,13083,13128)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::$address_of($t0), b1e55ed))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)));

    // if ($t8) goto L9 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    if ($t8) { goto L9; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
L9:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(0, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0), Eq(0, $t9))), And(Neq<address>(Signer::$address_of($t0), b1e55ed), Eq(0, $t9))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(0, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0) && $IsEqual'num'(0, $t9))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t9)));

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume {:print "$at(35,13083,13128)"} true;
    assume {:print "$track_abort(20,14):", $t9} $t9 == $t9;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    goto L7;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
L8:

    // opaque end: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:22+17
    assume {:print "$at(35,13151,13168)"} true;
    assert {:msg "assert_failed(35,13151,13168): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t1];

    // $t10 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L7 with $t9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:22+17
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,13151,13168)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(20,14):", $t9} $t9 == $t9;
        goto L7;
    }

    // trace_local[window]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:13+6
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t10);
    assume {:print "$track_local(20,14,4):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t11 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:34+1
    assume {:print "$at(35,13237,13238)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t2, $t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:31+2
    $t12 := !$IsEqual'u64'($t2, $t11);

    // if ($t12) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
L1:

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    goto L2;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
L0:

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    goto L3;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:65+17
L2:

    // $t13 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+22
    $t13 := $ChildMutation($t10, 3, $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t10)));

    // write_ref($t13, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+42
    $t13 := $UpdateMutation($t13, $t2);

    // write_back[Reference($t10).tracked_balance (u64)]($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+42
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'#0''_tracked_balance($Dereference($t10), $Dereference($t13)));

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:52+17
    assume {:print "$at(35,13340,13357)"} true;
L3:

    // $t14 := exists<AccountLimits::LimitsDefinition<#0>>($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:17+6
    $t14 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t3);

    // if ($t14) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    if ($t14) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
L5:

    // @178 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // state save for global update invariants
    assume {:print "$at(35,12880,13459)"} true;
    $1_AccountLimits_Window'#0'_$memory#178 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@178]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#178, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // destroy($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;

    // $t15 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:94+18
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: Errors::not_published($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41

    // assume WellFormed($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41
    assume $IsEqual'u64'($t16, 0);

    // $t16 := opaque end: Errors::not_published($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41

    // trace_abort($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;
    assume {:print "$track_abort(20,14):", $t16} $t16 == $t16;

    // $t9 := move($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    $t9 := $t16;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    goto L7;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:32+17
    assume {:print "$at(35,13435,13452)"} true;
L4:

    // $t17 := borrow_field<AccountLimits::Window<#0>>.limit_address($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+20
    $t17 := $ChildMutation($t10, 4, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t10)));

    // write_ref($t17, $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    $t17 := $UpdateMutation($t17, $t3);

    // write_back[Reference($t10).limit_address (address)]($t17) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'#0''_limit_address($Dereference($t10), $Dereference($t17)));

    // @179 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // state save for global update invariants
    assume {:print "$at(35,27994,28304)"} true;
    $1_AccountLimits_Window'#0'_$memory#179 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    assume {:print "$at(35,13412,13452)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@179]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#179, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:287:5+1
    assume {:print "$at(35,13458,13459)"} true;
L6:

    // assume Identical($t18, global<AccountLimits::Window<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:295:9+63
    assume {:print "$at(35,13919,13982)"} true;
    assume ($t18 == $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));

    // assert Not(Not(exists[@147]<Roles::RoleId>($t6))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:550:9+59
    assume {:print "$at(40,24470,24529)"} true;
    assert {:msg "assert_failed(40,24470,24529): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#147, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:551:9+97
    assume {:print "$at(40,24538,24635)"} true;
    assert {:msg "assert_failed(40,24538,24635): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:49:9+103
    assume {:print "$at(28,2054,2157)"} true;
    assert {:msg "assert_failed(28,2054,2157): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 186537453);

    // assert Not(Not(exists[@148]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:291:9+52
    assume {:print "$at(35,13632,13684)"} true;
    assert {:msg "assert_failed(35,13632,13684): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'#0'_$memory#148, $t1);

    // assert Not(Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:292:9+92
    assume {:print "$at(35,13693,13785)"} true;
    assert {:msg "assert_failed(35,13693,13785): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#149, $t3);

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:293:9+49
    assume {:print "$at(35,13794,13843)"} true;
    assert {:msg "assert_failed(35,13794,13843): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // assert Implies(Neq<u64>($t2, 0), Eq<u64>(select AccountLimits::Window.tracked_balance($t18), $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:296:9+83
    assume {:print "$at(35,13991,14074)"} true;
    assert {:msg "assert_failed(35,13991,14074): post-condition does not hold"}
      (!$IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($tracked_balance#$1_AccountLimits_Window'#0'($t18), $t2));

    // assert Implies(Eq<u64>($t2, 0), Eq<u64>(select AccountLimits::Window.tracked_balance($t18), select AccountLimits::Window.tracked_balance($t5))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:297:9+92
    assume {:print "$at(35,14083,14175)"} true;
    assert {:msg "assert_failed(35,14083,14175): post-condition does not hold"}
      ($IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($tracked_balance#$1_AccountLimits_Window'#0'($t18), $tracked_balance#$1_AccountLimits_Window'#0'($t5)));

    // assert Eq<address>(select AccountLimits::Window.limit_address($t18), $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:298:9+54
    assume {:print "$at(35,14184,14238)"} true;
    assert {:msg "assert_failed(35,14184,14238): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'#0'($t18), $t3);

    // assert Eq<u64>(select AccountLimits::Window.window_start($t18), select AccountLimits::Window.window_start($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:299:9+59
    assume {:print "$at(35,14247,14306)"} true;
    assert {:msg "assert_failed(35,14247,14306): post-condition does not hold"}
      $IsEqual'u64'($window_start#$1_AccountLimits_Window'#0'($t18), $window_start#$1_AccountLimits_Window'#0'($t5));

    // assert Eq<u64>(select AccountLimits::Window.window_inflow($t18), select AccountLimits::Window.window_inflow($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:300:9+61
    assume {:print "$at(35,14315,14376)"} true;
    assert {:msg "assert_failed(35,14315,14376): post-condition does not hold"}
      $IsEqual'u64'($window_inflow#$1_AccountLimits_Window'#0'($t18), $window_inflow#$1_AccountLimits_Window'#0'($t5));

    // assert Eq<u64>(select AccountLimits::Window.window_outflow($t18), select AccountLimits::Window.window_outflow($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:301:9+63
    assume {:print "$at(35,14385,14448)"} true;
    assert {:msg "assert_failed(35,14385,14448): post-condition does not hold"}
      $IsEqual'u64'($window_outflow#$1_AccountLimits_Window'#0'($t18), $window_outflow#$1_AccountLimits_Window'#0'($t5));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:301:9+63
    return;

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:287:5+1
    assume {:print "$at(35,13458,13459)"} true;
L7:

    // assert Or(Or(Or(Or(Not(exists[@147]<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::$address_of[]($t0), b1e55ed)), Not(exists[@148]<AccountLimits::Window<#0>>($t1))), Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    assume {:print "$at(35,13464,14454)"} true;
    assert {:msg "assert_failed(35,13464,14454): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#147, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)) || !$ResourceExists($1_AccountLimits_Window'#0'_$memory#148, $t1)) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#149, $t3));

    // assert Or(Or(Or(Or(And(Not(exists[@147]<Roles::RoleId>($t6)), Eq(0, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0), Eq(0, $t9))), And(Neq<address>(Signer::$address_of[]($t0), b1e55ed), Eq(0, $t9))), Not(exists[@148]<AccountLimits::Window<#0>>($t1))), And(Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3)), Eq(0, $t9))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    assert {:msg "assert_failed(35,13464,14454): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_Roles_RoleId_$memory#147, $t6) && $IsEqual'num'(0, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0) && $IsEqual'num'(0, $t9))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t9))) || !$ResourceExists($1_AccountLimits_Window'#0'_$memory#148, $t1)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#149, $t3) && $IsEqual'num'(0, $t9)));

    // abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_window_info<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
procedure {:timeLimit 40} $1_AccountLimits_update_window_info'$1_XUS_XUS'$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t5: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t11: int;
    var $t12: bool;
    var $t13: $Mutation (int);
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t18: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#147: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#148: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#149: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#178: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#179: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$at(35,12880,12881)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'address'($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t5, global<AccountLimits::Window<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:294:9+58
    assume {:print "$at(35,13852,13910)"} true;
    assume ($t5 == $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));

    // assume Identical($t6, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t6 == $1_Signer_$address_of($t0));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    assume {:print "$at(35,13498,13548)"} true;
    assume $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // @147 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_Roles_RoleId_$memory#147 := $1_Roles_RoleId_$memory;

    // @149 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#149 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @148 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#148 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[tc_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$at(35,12880,12881)"} true;
    assume {:print "$track_local(20,14,0):", $t0} $t0 == $t0;

    // trace_local[window_address]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,1):", $t1} $t1 == $t1;

    // trace_local[aggregate_balance]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,2):", $t2} $t2 == $t2;

    // trace_local[new_limit_address]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,3):", $t3} $t3 == $t3;

    // assume Identical($t7, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t7 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume {:print "$at(35,13083,13128)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::$address_of($t0), b1e55ed))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)));

    // if ($t8) goto L9 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    if ($t8) { goto L9; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
L9:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(0, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0), Eq(0, $t9))), And(Neq<address>(Signer::$address_of($t0), b1e55ed), Eq(0, $t9))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(0, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0) && $IsEqual'num'(0, $t9))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t9)));

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume {:print "$at(35,13083,13128)"} true;
    assume {:print "$track_abort(20,14):", $t9} $t9 == $t9;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    goto L7;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
L8:

    // opaque end: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:22+17
    assume {:print "$at(35,13151,13168)"} true;
    assert {:msg "assert_failed(35,13151,13168): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // $t10 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L7 with $t9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:22+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,13151,13168)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(20,14):", $t9} $t9 == $t9;
        goto L7;
    }

    // trace_local[window]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:13+6
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t10);
    assume {:print "$track_local(20,14,4):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t11 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:34+1
    assume {:print "$at(35,13237,13238)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t2, $t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:31+2
    $t12 := !$IsEqual'u64'($t2, $t11);

    // if ($t12) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
L1:

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    goto L2;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
L0:

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    goto L3;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:65+17
L2:

    // $t13 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+22
    $t13 := $ChildMutation($t10, 3, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t10)));

    // write_ref($t13, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+42
    $t13 := $UpdateMutation($t13, $t2);

    // write_back[Reference($t10).tracked_balance (u64)]($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+42
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Dereference($t10), $Dereference($t13)));

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:52+17
    assume {:print "$at(35,13340,13357)"} true;
L3:

    // $t14 := exists<AccountLimits::LimitsDefinition<#0>>($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:17+6
    $t14 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t3);

    // if ($t14) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    if ($t14) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
L5:

    // @178 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // state save for global update invariants
    assume {:print "$at(35,12880,13459)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#178 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@178]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#178, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // destroy($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;

    // $t15 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:94+18
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: Errors::not_published($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41

    // assume WellFormed($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41
    assume $IsEqual'u64'($t16, 0);

    // $t16 := opaque end: Errors::not_published($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41

    // trace_abort($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;
    assume {:print "$track_abort(20,14):", $t16} $t16 == $t16;

    // $t9 := move($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    $t9 := $t16;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    goto L7;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:32+17
    assume {:print "$at(35,13435,13452)"} true;
L4:

    // $t17 := borrow_field<AccountLimits::Window<#0>>.limit_address($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+20
    $t17 := $ChildMutation($t10, 4, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t10)));

    // write_ref($t17, $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    $t17 := $UpdateMutation($t17, $t3);

    // write_back[Reference($t10).limit_address (address)]($t17) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address($Dereference($t10), $Dereference($t17)));

    // @179 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // state save for global update invariants
    assume {:print "$at(35,27994,28304)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#179 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    assume {:print "$at(35,13412,13452)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@179]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#179, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:287:5+1
    assume {:print "$at(35,13458,13459)"} true;
L6:

    // assume Identical($t18, global<AccountLimits::Window<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:295:9+63
    assume {:print "$at(35,13919,13982)"} true;
    assume ($t18 == $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));

    // assert Not(Not(exists[@147]<Roles::RoleId>($t6))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:550:9+59
    assume {:print "$at(40,24470,24529)"} true;
    assert {:msg "assert_failed(40,24470,24529): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#147, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:551:9+97
    assume {:print "$at(40,24538,24635)"} true;
    assert {:msg "assert_failed(40,24538,24635): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:49:9+103
    assume {:print "$at(28,2054,2157)"} true;
    assert {:msg "assert_failed(28,2054,2157): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 186537453);

    // assert Not(Not(exists[@148]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:291:9+52
    assume {:print "$at(35,13632,13684)"} true;
    assert {:msg "assert_failed(35,13632,13684): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#148, $t1);

    // assert Not(Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:292:9+92
    assume {:print "$at(35,13693,13785)"} true;
    assert {:msg "assert_failed(35,13693,13785): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#149, $t3);

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:293:9+49
    assume {:print "$at(35,13794,13843)"} true;
    assert {:msg "assert_failed(35,13794,13843): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // assert Implies(Neq<u64>($t2, 0), Eq<u64>(select AccountLimits::Window.tracked_balance($t18), $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:296:9+83
    assume {:print "$at(35,13991,14074)"} true;
    assert {:msg "assert_failed(35,13991,14074): post-condition does not hold"}
      (!$IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($t18), $t2));

    // assert Implies(Eq<u64>($t2, 0), Eq<u64>(select AccountLimits::Window.tracked_balance($t18), select AccountLimits::Window.tracked_balance($t5))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:297:9+92
    assume {:print "$at(35,14083,14175)"} true;
    assert {:msg "assert_failed(35,14083,14175): post-condition does not hold"}
      ($IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($t18), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($t5)));

    // assert Eq<address>(select AccountLimits::Window.limit_address($t18), $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:298:9+54
    assume {:print "$at(35,14184,14238)"} true;
    assert {:msg "assert_failed(35,14184,14238): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t18), $t3);

    // assert Eq<u64>(select AccountLimits::Window.window_start($t18), select AccountLimits::Window.window_start($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:299:9+59
    assume {:print "$at(35,14247,14306)"} true;
    assert {:msg "assert_failed(35,14247,14306): post-condition does not hold"}
      $IsEqual'u64'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t18), $window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t5));

    // assert Eq<u64>(select AccountLimits::Window.window_inflow($t18), select AccountLimits::Window.window_inflow($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:300:9+61
    assume {:print "$at(35,14315,14376)"} true;
    assert {:msg "assert_failed(35,14315,14376): post-condition does not hold"}
      $IsEqual'u64'($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($t18), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($t5));

    // assert Eq<u64>(select AccountLimits::Window.window_outflow($t18), select AccountLimits::Window.window_outflow($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:301:9+63
    assume {:print "$at(35,14385,14448)"} true;
    assert {:msg "assert_failed(35,14385,14448): post-condition does not hold"}
      $IsEqual'u64'($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($t18), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($t5));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:301:9+63
    return;

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:287:5+1
    assume {:print "$at(35,13458,13459)"} true;
L7:

    // assert Or(Or(Or(Or(Not(exists[@147]<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::$address_of[]($t0), b1e55ed)), Not(exists[@148]<AccountLimits::Window<#0>>($t1))), Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    assume {:print "$at(35,13464,14454)"} true;
    assert {:msg "assert_failed(35,13464,14454): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#147, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)) || !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#148, $t1)) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#149, $t3));

    // assert Or(Or(Or(Or(And(Not(exists[@147]<Roles::RoleId>($t6)), Eq(0, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0), Eq(0, $t9))), And(Neq<address>(Signer::$address_of[]($t0), b1e55ed), Eq(0, $t9))), Not(exists[@148]<AccountLimits::Window<#0>>($t1))), And(Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3)), Eq(0, $t9))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    assert {:msg "assert_failed(35,13464,14454): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_Roles_RoleId_$memory#147, $t6) && $IsEqual'num'(0, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0) && $IsEqual'num'(0, $t9))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t9))) || !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#148, $t1)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#149, $t3) && $IsEqual'num'(0, $t9)));

    // abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_window_info<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
procedure {:timeLimit 40} $1_AccountLimits_update_window_info'$1_XDX_XDX'$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t5: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t11: int;
    var $t12: bool;
    var $t13: $Mutation (int);
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t18: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#147: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#148: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#149: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#178: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#179: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$at(35,12880,12881)"} true;
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($addr#$signer($t0));

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume $IsValid'address'($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 0), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 0) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 0), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 0))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 0))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:436:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:442:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:450:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:454:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:458:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:462:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:466:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:470:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:474:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorOperatorConfig.move:82:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:340:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:345:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ValidatorConfig.move:352:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_mint_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:92:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Diem::spec_has_burn_capability<XUS::XUS>(a), Roles::spec_has_treasury_compliance_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:125:9+169
    assume (forall a: int :: $IsValid'address'(a) ==> (($1_Diem_spec_has_burn_capability'$1_XUS_XUS'($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, a) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))));

    // assume forall a: TypeDomain<address>(): Implies(Or(Diem::spec_has_preburn_queue<XUS::XUS>(a), Diem::spec_has_preburn<XUS::XUS>(a)), Roles::spec_has_designated_dealer_role_addr(a)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:163:9+201
    assume (forall a: int :: $IsValid'address'(a) ==> ((($1_Diem_spec_has_preburn_queue'$1_XUS_XUS'($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, a) || $1_Diem_spec_has_preburn'$1_XUS_XUS'($1_Diem_Preburn'$1_XUS_XUS'_$memory, a)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, a))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2390:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2408:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2412:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2422:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2427:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2431:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2455:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2459:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2463:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2467:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2471:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Identical($t5, global<AccountLimits::Window<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:294:9+58
    assume {:print "$at(35,13852,13910)"} true;
    assume ($t5 == $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));

    // assume Identical($t6, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t6 == $1_Signer_$address_of($t0));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    assume {:print "$at(35,13498,13548)"} true;
    assume $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // @147 := save_mem(Roles::RoleId) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_Roles_RoleId_$memory#147 := $1_Roles_RoleId_$memory;

    // @149 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#149 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @148 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:289:9+50
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#148 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$at(35,12880,12881)"} true;
    assume {:print "$track_local(20,14,0):", $t0} $t0 == $t0;

    // trace_local[window_address]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,1):", $t1} $t1 == $t1;

    // trace_local[aggregate_balance]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,2):", $t2} $t2 == $t2;

    // trace_local[new_limit_address]($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+1
    assume {:print "$track_local(20,14,3):", $t3} $t3 == $t3;

    // assume Identical($t7, Signer::$address_of($t0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:549:9+39
    assume {:print "$at(40,24422,24461)"} true;
    assume ($t7 == $1_Signer_$address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume {:print "$at(35,13083,13128)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0)), Neq<address>(Signer::$address_of($t0), b1e55ed))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)));

    // if ($t8) goto L9 else goto L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    if ($t8) { goto L9; } else { goto L8; }

    // label L9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
L9:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(0, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 0), Eq(0, $t9))), And(Neq<address>(Signer::$address_of($t0), b1e55ed), Eq(0, $t9))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(0, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 0) && $IsEqual'num'(0, $t9))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t9)));

    // trace_abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    assume {:print "$at(35,13083,13128)"} true;
    assume {:print "$track_abort(20,14):", $t9} $t9 == $t9;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
    goto L7;

    // label L8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45
L8:

    // opaque end: Roles::assert_treasury_compliance($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:282:9+45

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:22+17
    assume {:print "$at(35,13151,13168)"} true;
    assert {:msg "assert_failed(35,13151,13168): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // $t10 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L7 with $t9 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:22+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,13151,13168)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(20,14):", $t9} $t9 == $t9;
        goto L7;
    }

    // trace_local[window]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:283:13+6
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t10);
    assume {:print "$track_local(20,14,4):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t11 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:34+1
    assume {:print "$at(35,13237,13238)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t2, $t11) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:31+2
    $t12 := !$IsEqual'u64'($t2, $t11);

    // if ($t12) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
L1:

    // goto L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    goto L2;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
L0:

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:9+75
    goto L3;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:65+17
L2:

    // $t13 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+22
    $t13 := $ChildMutation($t10, 3, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t10)));

    // write_ref($t13, $t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+42
    $t13 := $UpdateMutation($t13, $t2);

    // write_back[Reference($t10).tracked_balance (u64)]($t13) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:284:40+42
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Dereference($t10), $Dereference($t13)));

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:52+17
    assume {:print "$at(35,13340,13357)"} true;
L3:

    // $t14 := exists<AccountLimits::LimitsDefinition<#0>>($t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:17+6
    $t14 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t3);

    // if ($t14) goto L4 else goto L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    if ($t14) { goto L4; } else { goto L5; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
L5:

    // @178 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:276:5+579
    // state save for global update invariants
    assume {:print "$at(35,12880,13459)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#178 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@178]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#178, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // destroy($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;

    // $t15 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:94+18
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: Errors::not_published($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41

    // assume WellFormed($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41
    assume $IsEqual'u64'($t16, 0);

    // $t16 := opaque end: Errors::not_published($t15) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:72+41

    // trace_abort($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    assume {:print "$at(35,13297,13402)"} true;
    assume {:print "$track_abort(20,14):", $t16} $t16 == $t16;

    // $t9 := move($t16) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    $t9 := $t16;

    // goto L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:285:9+105
    goto L7;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:32+17
    assume {:print "$at(35,13435,13452)"} true;
L4:

    // $t17 := borrow_field<AccountLimits::Window<#0>>.limit_address($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+20
    $t17 := $ChildMutation($t10, 4, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t10)));

    // write_ref($t17, $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    $t17 := $UpdateMutation($t17, $t3);

    // write_back[Reference($t10).limit_address (address)]($t17) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address($Dereference($t10), $Dereference($t17)));

    // @179 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // state save for global update invariants
    assume {:print "$at(35,27994,28304)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#179 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:286:9+40
    assume {:print "$at(35,13412,13452)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@179]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#179, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // label L6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:287:5+1
    assume {:print "$at(35,13458,13459)"} true;
L6:

    // assume Identical($t18, global<AccountLimits::Window<#0>>($t1)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:295:9+63
    assume {:print "$at(35,13919,13982)"} true;
    assume ($t18 == $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));

    // assert Not(Not(exists[@147]<Roles::RoleId>($t6))) at ../../../../diem-move/diem-framework/core/sources/Roles.move:550:9+59
    assume {:print "$at(40,24470,24529)"} true;
    assert {:msg "assert_failed(40,24470,24529): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#147, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0)) at ../../../../diem-move/diem-framework/core/sources/Roles.move:551:9+97
    assume {:print "$at(40,24538,24635)"} true;
    assert {:msg "assert_failed(40,24538,24635): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0);

    // assert Not(Neq<address>(Signer::$address_of[]($t0), b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/CoreAddresses.move:49:9+103
    assume {:print "$at(28,2054,2157)"} true;
    assert {:msg "assert_failed(28,2054,2157): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_$address_of($t0), 186537453);

    // assert Not(Not(exists[@148]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:291:9+52
    assume {:print "$at(35,13632,13684)"} true;
    assert {:msg "assert_failed(35,13632,13684): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#148, $t1);

    // assert Not(Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:292:9+92
    assume {:print "$at(35,13693,13785)"} true;
    assert {:msg "assert_failed(35,13693,13785): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#149, $t3);

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:293:9+49
    assume {:print "$at(35,13794,13843)"} true;
    assert {:msg "assert_failed(35,13794,13843): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // assert Implies(Neq<u64>($t2, 0), Eq<u64>(select AccountLimits::Window.tracked_balance($t18), $t2)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:296:9+83
    assume {:print "$at(35,13991,14074)"} true;
    assert {:msg "assert_failed(35,13991,14074): post-condition does not hold"}
      (!$IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($t18), $t2));

    // assert Implies(Eq<u64>($t2, 0), Eq<u64>(select AccountLimits::Window.tracked_balance($t18), select AccountLimits::Window.tracked_balance($t5))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:297:9+92
    assume {:print "$at(35,14083,14175)"} true;
    assert {:msg "assert_failed(35,14083,14175): post-condition does not hold"}
      ($IsEqual'u64'($t2, 0) ==> $IsEqual'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($t18), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($t5)));

    // assert Eq<address>(select AccountLimits::Window.limit_address($t18), $t3) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:298:9+54
    assume {:print "$at(35,14184,14238)"} true;
    assert {:msg "assert_failed(35,14184,14238): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t18), $t3);

    // assert Eq<u64>(select AccountLimits::Window.window_start($t18), select AccountLimits::Window.window_start($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:299:9+59
    assume {:print "$at(35,14247,14306)"} true;
    assert {:msg "assert_failed(35,14247,14306): post-condition does not hold"}
      $IsEqual'u64'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t18), $window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t5));

    // assert Eq<u64>(select AccountLimits::Window.window_inflow($t18), select AccountLimits::Window.window_inflow($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:300:9+61
    assume {:print "$at(35,14315,14376)"} true;
    assert {:msg "assert_failed(35,14315,14376): post-condition does not hold"}
      $IsEqual'u64'($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($t18), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($t5));

    // assert Eq<u64>(select AccountLimits::Window.window_outflow($t18), select AccountLimits::Window.window_outflow($t5)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:301:9+63
    assume {:print "$at(35,14385,14448)"} true;
    assert {:msg "assert_failed(35,14385,14448): post-condition does not hold"}
      $IsEqual'u64'($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($t18), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($t5));

    // return () at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:301:9+63
    return;

    // label L7 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:287:5+1
    assume {:print "$at(35,13458,13459)"} true;
L7:

    // assert Or(Or(Or(Or(Not(exists[@147]<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::$address_of[]($t0), b1e55ed)), Not(exists[@148]<AccountLimits::Window<#0>>($t1))), Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    assume {:print "$at(35,13464,14454)"} true;
    assert {:msg "assert_failed(35,13464,14454): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_Roles_RoleId_$memory#147, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0)) || !$IsEqual'address'($1_Signer_$address_of($t0), 186537453)) || !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#148, $t1)) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#149, $t3));

    // assert Or(Or(Or(Or(And(Not(exists[@147]<Roles::RoleId>($t6)), Eq(0, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global[@147]<Roles::RoleId>($t6)), 0), Eq(0, $t9))), And(Neq<address>(Signer::$address_of[]($t0), b1e55ed), Eq(0, $t9))), Not(exists[@148]<AccountLimits::Window<#0>>($t1))), And(Not(exists[@149]<AccountLimits::LimitsDefinition<#0>>($t3)), Eq(0, $t9))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    assert {:msg "assert_failed(35,13464,14454): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_Roles_RoleId_$memory#147, $t6) && $IsEqual'num'(0, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#147, $t6)), 0) && $IsEqual'num'(0, $t9))) || (!$IsEqual'address'($1_Signer_$address_of($t0), 186537453) && $IsEqual'num'(0, $t9))) || !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#148, $t1)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#149, $t3) && $IsEqual'num'(0, $t9)));

    // abort($t9) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:288:5+990
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_withdrawal_limits [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
procedure {:timeLimit 40} $1_AccountLimits_update_withdrawal_limits$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_AccountLimits_Window'#0');
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'#0';
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#164: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#165: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'#0'_$memory#183: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$at(35,4774,4775)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    assume {:print "$at(35,5249,5289)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$t1];

    // @166 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @165 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_AccountLimits_LimitsDefinition'#0'_$memory#165 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @164 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_AccountLimits_Window'#0'_$memory#164 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$at(35,4774,4775)"} true;
    assume {:print "$track_local(20,15,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$track_local(20,15,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$track_local(20,15,2):", $t2} $t2 == $t2;

    // $t3 := exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:17+6
    assume {:print "$at(35,4976,4982)"} true;
    $t3 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // if ($t3) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:71+7
L1:

    // $t4 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:71+7
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := opaque begin: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30
    assume $IsEqual'u64'($t5, 0);

    // $t5 := opaque end: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30

    // trace_abort($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    assume {:print "$at(35,4968,5039)"} true;
    assume {:print "$track_abort(20,15):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    $t6 := $t5;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:120:13+6
    assume {:print "$at(35,5103,5109)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:121:13+17
    assume {:print "$at(35,5123,5140)"} true;
    assert {:msg "assert_failed(35,5123,5140): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t1];

    // $t7 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:121:13+17
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,5123,5140)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,15):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := opaque begin: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;

    // $t9 := read_ref($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    $t9 := $Dereference($t7);

    // assume Identical($t10, Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume ($t10 == (((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t7))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t10) goto L5 else goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
L5:

    // assume Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), Eq(0, $t6)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), 18446744073709551615)), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t7))) && $IsEqual'num'(0, $t6)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7))) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(0, $t6)));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    assume {:print "$track_abort(20,15):", $t6} $t6 == $t6;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    goto L3;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
L4:

    // havoc[mut]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t7 := $UpdateMutation($t7, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t7));

    // assume WellFormed($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t7));

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsValid'bool'($t8);

    // assume Eq<bool>($t8, AccountLimits::spec_withdrawal_limits_ok<#0>($t9, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsEqual'bool'($t8, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9, $t0));

    // assume (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t7, $t9))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t7), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t7), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t7), $t9))));

    // $t8 := opaque end: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126

    // @183 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // state save for global update invariants
    assume {:print "$at(35,4774,5181)"} true;
    $1_AccountLimits_Window'#0'_$memory#183 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // assert forall window_addr: TypeDomain<address>() where exists[@183]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#183, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_return[0]($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    assume {:print "$track_return(20,15,0):", $t8} $t8 == $t8;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:123:5+1
    assume {:print "$at(35,5180,5181)"} true;
L2:

    // assert Not(Not(exists[@164]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:104:9+69
    assume {:print "$at(35,4312,4381)"} true;
    assert {:msg "assert_failed(35,4312,4381): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'#0'_$memory#164, $t1);

    // assert Not(Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1))))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:482:9+96
    assume {:print "$at(35,23408,23504)"} true;
    assert {:msg "assert_failed(35,23408,23504): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:492:9+99
    assume {:print "$at(35,23890,23989)"} true;
    assert {:msg "assert_failed(35,23890,23989): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1))) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166));

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:127:9+39
    assume {:print "$at(35,5298,5337)"} true;
    assert {:msg "assert_failed(35,5298,5337): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // assert Eq<bool>($t8, AccountLimits::spec_withdrawal_limits_ok<#0>(global[@164]<AccountLimits::Window<#0>>($t1), $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:498:9+66
    assume {:print "$at(35,24134,24200)"} true;
    assert {:msg "assert_failed(35,24134,24200): post-condition does not hold"}
      $IsEqual'bool'($t8, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1), $t0));

    // assert (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>(global[@164]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@164]<AccountLimits::Window<#0>>($t1)))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    assume {:print "$at(35,24209,24475)"} true;
    assert {:msg "assert_failed(35,24209,24475): post-condition does not hold"}
      (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)))));

    // return $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    $ret0 := $t8;
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:123:5+1
    assume {:print "$at(35,5180,5181)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@164]<AccountLimits::Window<#0>>($t1)), Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    assume {:print "$at(35,5186,5488)"} true;
    assert {:msg "assert_failed(35,5186,5488): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#164, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166)));

    // assert Or(Or(Or(Or(And(Not(exists[@164]<AccountLimits::Window<#0>>($t1)), Eq(0, $t6)), And(Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1)))), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615)), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    assert {:msg "assert_failed(35,5186,5488): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#164, $t1) && $IsEqual'num'(0, $t6)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1))) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1))) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#165, $ResourceValue($1_AccountLimits_Window'#0'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166)) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_withdrawal_limits<XUS::XUS> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
procedure {:timeLimit 40} $1_AccountLimits_update_withdrawal_limits'$1_XUS_XUS'$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#164: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#183: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$at(35,4774,4775)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    assume {:print "$at(35,5249,5289)"} true;
    assume $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // @166 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @165 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @164 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#164 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$at(35,4774,4775)"} true;
    assume {:print "$track_local(20,15,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$track_local(20,15,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$track_local(20,15,2):", $t2} $t2 == $t2;

    // $t3 := exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:17+6
    assume {:print "$at(35,4976,4982)"} true;
    $t3 := $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // if ($t3) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:71+7
L1:

    // $t4 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:71+7
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := opaque begin: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30
    assume $IsEqual'u64'($t5, 0);

    // $t5 := opaque end: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30

    // trace_abort($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    assume {:print "$at(35,4968,5039)"} true;
    assume {:print "$track_abort(20,15):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    $t6 := $t5;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:120:13+6
    assume {:print "$at(35,5103,5109)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:121:13+17
    assume {:print "$at(35,5123,5140)"} true;
    assert {:msg "assert_failed(35,5123,5140): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // $t7 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:121:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,5123,5140)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,15):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := opaque begin: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;

    // $t9 := read_ref($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    $t9 := $Dereference($t7);

    // assume Identical($t10, Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume ($t10 == (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t10) goto L5 else goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
L5:

    // assume Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), Eq(0, $t6)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), 18446744073709551615)), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7))) && $IsEqual'num'(0, $t6)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7))) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(0, $t6)));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    assume {:print "$track_abort(20,15):", $t6} $t6 == $t6;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    goto L3;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
L4:

    // havoc[mut]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t7 := $UpdateMutation($t7, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7));

    // assume WellFormed($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7));

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsValid'bool'($t8);

    // assume Eq<bool>($t8, AccountLimits::spec_withdrawal_limits_ok<#0>($t9, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsEqual'bool'($t8, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9, $t0));

    // assume (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t7, $t9))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7), $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t7), $t9))));

    // $t8 := opaque end: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126

    // @183 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // state save for global update invariants
    assume {:print "$at(35,4774,5181)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#183 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // assert forall window_addr: TypeDomain<address>() where exists[@183]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#183, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_return[0]($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    assume {:print "$track_return(20,15,0):", $t8} $t8 == $t8;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:123:5+1
    assume {:print "$at(35,5180,5181)"} true;
L2:

    // assert Not(Not(exists[@164]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:104:9+69
    assume {:print "$at(35,4312,4381)"} true;
    assert {:msg "assert_failed(35,4312,4381): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1);

    // assert Not(Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1))))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:482:9+96
    assume {:print "$at(35,23408,23504)"} true;
    assert {:msg "assert_failed(35,23408,23504): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:492:9+99
    assume {:print "$at(35,23890,23989)"} true;
    assert {:msg "assert_failed(35,23890,23989): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1))) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166));

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:127:9+39
    assume {:print "$at(35,5298,5337)"} true;
    assert {:msg "assert_failed(35,5298,5337): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // assert Eq<bool>($t8, AccountLimits::spec_withdrawal_limits_ok<#0>(global[@164]<AccountLimits::Window<#0>>($t1), $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:498:9+66
    assume {:print "$at(35,24134,24200)"} true;
    assert {:msg "assert_failed(35,24134,24200): post-condition does not hold"}
      $IsEqual'bool'($t8, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1), $t0));

    // assert (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>(global[@164]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@164]<AccountLimits::Window<#0>>($t1)))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    assume {:print "$at(35,24209,24475)"} true;
    assert {:msg "assert_failed(35,24209,24475): post-condition does not hold"}
      (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)))));

    // return $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    $ret0 := $t8;
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:123:5+1
    assume {:print "$at(35,5180,5181)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@164]<AccountLimits::Window<#0>>($t1)), Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    assume {:print "$at(35,5186,5488)"} true;
    assert {:msg "assert_failed(35,5186,5488): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166)));

    // assert Or(Or(Or(Or(And(Not(exists[@164]<AccountLimits::Window<#0>>($t1)), Eq(0, $t6)), And(Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1)))), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615)), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    assert {:msg "assert_failed(35,5186,5488): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1) && $IsEqual'num'(0, $t6)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1))) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1))) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166)) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_withdrawal_limits<XDX::XDX> [verification] at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
procedure {:timeLimit 40} $1_AccountLimits_update_withdrawal_limits'$1_XDX_XDX'$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t10: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#164: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#183: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$at(35,4774,4775)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::Configuration>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_Configuration_$memory, $a_0);
    ($IsValid'$1_DiemConfig_Configuration'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemSystem::DiemSystem>>(): And(WellFormed($rsc), forall i: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))), j: Range(0, Len<DiemSystem::ValidatorInfo>(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)))): Implies(Eq<address>(select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), i)), select DiemSystem::ValidatorInfo.addr(Index(select DiemSystem::DiemSystem.validators(select DiemConfig::DiemConfig.payload($rsc)), j))), Eq<num>(i, j))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, $a_0);
    (($IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''($rsc) && (var $range_1 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (var $range_2 := $Range(0, LenVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)))); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), i)), $addr#$1_DiemSystem_ValidatorInfo(ReadVec($validators#$1_DiemSystem_DiemSystem($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($rsc)), j))) ==> $IsEqual'num'(i, j))))))))))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemConfig::DiemConfig<DiemVersion::DiemVersion>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, $a_0);
    ($IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemSystem::CapabilityHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemSystem_CapabilityHolder_$memory, $a_0);
    ($IsValid'$1_DiemSystem_CapabilityHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<XDX::Reserve>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_XDX_Reserve_$memory, $a_0)}(var $rsc := $ResourceValue($1_XDX_Reserve_$memory, $a_0);
    ($IsValid'$1_XDX_Reserve'($rsc))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<ChainId::ChainId>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_ChainId_ChainId_$memory, $a_0)}(var $rsc := $ResourceValue($1_ChainId_ChainId_$memory, $a_0);
    ($IsValid'$1_ChainId_ChainId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemWriteSetManager>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemWriteSetManager_$memory, $a_0);
    ($IsValid'$1_DiemAccount_DiemWriteSetManager'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemBlock::BlockMetadata>(): WellFormed($rsc) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemBlock_BlockMetadata_$memory, $a_0);
    ($IsValid'$1_DiemBlock_BlockMetadata'($rsc))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:182:9+72
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:437:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/Roles.move:444:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemConfig.move:436:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:65:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Not(Diem::$is_synthetic_currency<XUS::XUS>())) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:69:9+106
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> !$1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XUS::XUS>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:73:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XUS::XUS>()), 100)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:77:9+125
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), 100));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XUS::XUS>(), [88, 85, 83])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XUS.move:81:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), MakeVec3(88, 85, 83)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<FixedPoint32::FixedPoint32>(Diem::spec_xdx_exchange_rate<XDX::XDX>(), FixedPoint32::spec_create_from_rational(1, 1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:130:9+156
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'$1_FixedPoint32_FixedPoint32'($1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_FixedPoint32_spec_create_from_rational(1, 1)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_synthetic_currency<XDX::XDX>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:134:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.scaling_factor(Diem::spec_currency_info<XDX::XDX>()), 1000000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:138:9+128
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<u64>(select Diem::CurrencyInfo.fractional_part(Diem::spec_currency_info<XDX::XDX>()), 1000)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:142:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), 1000));

    // assume Implies(DiemTimestamp::$is_operating(), Eq<vector<u8>>(Diem::spec_currency_code<XDX::XDX>(), [88, 68, 88])) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:146:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), MakeVec3(88, 68, 88)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:160:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/XDX.move:164:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2367:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:2370:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // global invariant at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    assume {:print "$at(35,5249,5289)"} true;
    assume $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // @166 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @165 := save_mem(AccountLimits::LimitsDefinition<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @164 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:126:9+40
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#164 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[amount]($t0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$at(35,4774,4775)"} true;
    assume {:print "$track_local(20,15,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$track_local(20,15,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+1
    assume {:print "$track_local(20,15,2):", $t2} $t2 == $t2;

    // $t3 := exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:17+6
    assume {:print "$at(35,4976,4982)"} true;
    $t3 := $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // if ($t3) goto L0 else goto L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:71+7
L1:

    // $t4 := 0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:71+7
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := opaque begin: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30

    // assume WellFormed($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, 0) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30
    assume $IsEqual'u64'($t5, 0);

    // $t5 := opaque end: Errors::not_published($t4) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:49+30

    // trace_abort($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    assume {:print "$at(35,4968,5039)"} true;
    assume {:print "$track_abort(20,15):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    $t6 := $t5;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:118:9+71
    goto L3;

    // label L0 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:120:13+6
    assume {:print "$at(35,5103,5109)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:121:13+17
    assume {:print "$at(35,5123,5140)"} true;
    assert {:msg "assert_failed(35,5123,5140): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // $t7 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t6 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:121:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(35,5123,5140)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(20,15):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t8 := opaque begin: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;

    // $t9 := read_ref($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    $t9 := $Dereference($t7);

    // assume Identical($t10, Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume ($t10 == (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t10) goto L5 else goto L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
L5:

    // assume Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t7))), Eq(0, $t6)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t7)), $t0), 18446744073709551615)), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Gt(Add(select AccountLimits::Window.window_start($t7), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t7))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t7)), Not(DiemTimestamp::$is_operating())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7))) && $IsEqual'num'(0, $t6)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7))) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t7)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t7)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(0, $t6)));

    // trace_abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    assume {:print "$track_abort(20,15):", $t6} $t6 == $t6;

    // goto L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    goto L3;

    // label L4 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
L4:

    // havoc[mut]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t7 := $UpdateMutation($t7, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7));

    // assume WellFormed($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7));

    // assume WellFormed($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsValid'bool'($t8);

    // assume Eq<bool>($t8, AccountLimits::spec_withdrawal_limits_ok<#0>($t9, $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume $IsEqual'bool'($t8, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9, $t0));

    // assume (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t7, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t7, $t9))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7), $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t7), $t9))));

    // $t8 := opaque end: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126

    // @183 := save_mem(AccountLimits::Window<#0>) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:113:5+407
    // state save for global update invariants
    assume {:print "$at(35,4774,5181)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#183 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t7) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // assert forall window_addr: TypeDomain<address>() where exists[@183]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:576:9+171
    assume {:print "$at(35,27314,27485)"} true;
    assert {:msg "assert_failed(35,27314,27485): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#183, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:581:9+208
    assume {:print "$at(35,27570,27778)"} true;
    assert {:msg "assert_failed(35,27570,27778): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 0))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    // global invariant at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:590:9+310
    assume {:print "$at(35,27994,28304)"} true;
    assert {:msg "assert_failed(35,27994,28304): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 0)))));

    // trace_return[0]($t8) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:119:9+126
    assume {:print "$at(35,5049,5175)"} true;
    assume {:print "$track_return(20,15,0):", $t8} $t8 == $t8;

    // label L2 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:123:5+1
    assume {:print "$at(35,5180,5181)"} true;
L2:

    // assert Not(Not(exists[@164]<AccountLimits::Window<#0>>($t1))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:104:9+69
    assume {:print "$at(35,4312,4381)"} true;
    assert {:msg "assert_failed(35,4312,4381): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1);

    // assert Not(Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1))))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:482:9+96
    assume {:print "$at(35,23408,23504)"} true;
    assert {:msg "assert_failed(35,23408,23504): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:492:9+99
    assume {:print "$at(35,23890,23989)"} true;
    assert {:msg "assert_failed(35,23890,23989): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1))) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:329:9+102
    assume {:print "$at(35,15699,15801)"} true;
    assert {:msg "assert_failed(35,15699,15801): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]()))) at ../../../../diem-move/diem-framework/core/sources/DiemTimestamp.move:173:9+53
    assume {:print "$at(10,7047,7100)"} true;
    assert {:msg "assert_failed(10,7047,7100): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166));

    // assert exists<AccountLimits::Window<#0>>($t1) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:127:9+39
    assume {:print "$at(35,5298,5337)"} true;
    assert {:msg "assert_failed(35,5298,5337): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // assert Eq<bool>($t8, AccountLimits::spec_withdrawal_limits_ok<#0>(global[@164]<AccountLimits::Window<#0>>($t1), $t0)) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:498:9+66
    assume {:print "$at(35,24134,24200)"} true;
    assert {:msg "assert_failed(35,24134,24200): post-condition does not hold"}
      $IsEqual'bool'($t8, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1), $t0));

    // assert (if And($t8, Not(AccountLimits::spec_window_unrestricted<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>(global[@164]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@164]<AccountLimits::Window<#0>>($t1)))}) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    assume {:print "$at(35,24209,24475)"} true;
    assert {:msg "assert_failed(35,24209,24475): post-condition does not hold"}
      (if (($t8 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)))));

    // return $t8 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:499:9+266
    $ret0 := $t8;
    return;

    // label L3 at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:123:5+1
    assume {:print "$at(35,5180,5181)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@164]<AccountLimits::Window<#0>>($t1)), Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]()))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    assume {:print "$at(35,5186,5488)"} true;
    assert {:msg "assert_failed(35,5186,5488): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166)));

    // assert Or(Or(Or(Or(And(Not(exists[@164]<AccountLimits::Window<#0>>($t1)), Eq(0, $t6)), And(Not(exists[@165]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@164]<AccountLimits::Window<#0>>($t1)))), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@166, @165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615)), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@164]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(0, $t6))), And(And(Not(AccountLimits::spec_window_unrestricted[@165]<#0>(global[@164]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@166]())), Eq(0, $t6))) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    assert {:msg "assert_failed(35,5186,5488): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1) && $IsEqual'num'(0, $t6)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1))) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1))) + $t0) > 18446744073709551615)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)))) > $MAX_U64)) && $IsEqual'num'(0, $t6))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#165, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#164, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#166)) && $IsEqual'num'(0, $t6)));

    // abort($t6) at ../../../../diem-move/diem-framework/core/sources/AccountLimits.move:124:5+302
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct XUS::XUS at ../../../../diem-move/diem-framework/core/sources/XUS.move:10:5+14
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/XDX.move:111:5+67
function {:inline} $1_XDX_$reserve_address(): int {
    173345816
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/XDX.move:153:9+84
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, $1_XDX_$reserve_address())
}

// struct XDX::XDX at ../../../../diem-move/diem-framework/core/sources/XDX.move:15:5+14
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at ../../../../diem-move/diem-framework/core/sources/XDX.move:24:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// struct VASPDomain::VASPDomain at ../../../../diem-move/diem-framework/core/sources/VASPDomain.move:25:5+110
type {:datatype} $1_VASPDomain_VASPDomain;
function {:constructor} $1_VASPDomain_VASPDomain($domain: Vec (int)): $1_VASPDomain_VASPDomain;
function {:inline} $Update'$1_VASPDomain_VASPDomain'_domain(s: $1_VASPDomain_VASPDomain, x: Vec (int)): $1_VASPDomain_VASPDomain {
    $1_VASPDomain_VASPDomain(x)
}
function $IsValid'$1_VASPDomain_VASPDomain'(s: $1_VASPDomain_VASPDomain): bool {
    $IsValid'vec'u8''($domain#$1_VASPDomain_VASPDomain(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomain'(s1: $1_VASPDomain_VASPDomain, s2: $1_VASPDomain_VASPDomain): bool {
    $IsEqual'vec'u8''($domain#$1_VASPDomain_VASPDomain(s1), $domain#$1_VASPDomain_VASPDomain(s2))}

// struct VASPDomain::VASPDomainEvent at ../../../../diem-move/diem-framework/core/sources/VASPDomain.move:39:5+256
type {:datatype} $1_VASPDomain_VASPDomainEvent;
function {:constructor} $1_VASPDomain_VASPDomainEvent($removed: bool, $domain: $1_VASPDomain_VASPDomain, $address: int): $1_VASPDomain_VASPDomainEvent;
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_removed(s: $1_VASPDomain_VASPDomainEvent, x: bool): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent(x, $domain#$1_VASPDomain_VASPDomainEvent(s), $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_domain(s: $1_VASPDomain_VASPDomainEvent, x: $1_VASPDomain_VASPDomain): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), x, $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_address(s: $1_VASPDomain_VASPDomainEvent, x: int): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), $domain#$1_VASPDomain_VASPDomainEvent(s), x)
}
function $IsValid'$1_VASPDomain_VASPDomainEvent'(s: $1_VASPDomain_VASPDomainEvent): bool {
    $IsValid'bool'($removed#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'address'($address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainEvent'(s1: $1_VASPDomain_VASPDomainEvent, s2: $1_VASPDomain_VASPDomainEvent): bool {
    $IsEqual'bool'($removed#$1_VASPDomain_VASPDomainEvent(s1), $removed#$1_VASPDomain_VASPDomainEvent(s2))
    && $IsEqual'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s1), $domain#$1_VASPDomain_VASPDomainEvent(s2))
    && $IsEqual'address'($address#$1_VASPDomain_VASPDomainEvent(s1), $address#$1_VASPDomain_VASPDomainEvent(s2))}

// struct VASPDomain::VASPDomainManager at ../../../../diem-move/diem-framework/core/sources/VASPDomain.move:33:5+235
type {:datatype} $1_VASPDomain_VASPDomainManager;
function {:constructor} $1_VASPDomain_VASPDomainManager($vasp_domain_events: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager;
function {:inline} $Update'$1_VASPDomain_VASPDomainManager'_vasp_domain_events(s: $1_VASPDomain_VASPDomainManager, x: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager {
    $1_VASPDomain_VASPDomainManager(x)
}
function $IsValid'$1_VASPDomain_VASPDomainManager'(s: $1_VASPDomain_VASPDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''($vasp_domain_events#$1_VASPDomain_VASPDomainManager(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainManager'(s1: $1_VASPDomain_VASPDomainManager, s2: $1_VASPDomain_VASPDomainManager): bool {
    s1 == s2
}
var $1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager;

// struct VASPDomain::VASPDomains at ../../../../diem-move/diem-framework/core/sources/VASPDomain.move:12:5+142
type {:datatype} $1_VASPDomain_VASPDomains;
function {:constructor} $1_VASPDomain_VASPDomains($domains: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains;
function {:inline} $Update'$1_VASPDomain_VASPDomains'_domains(s: $1_VASPDomain_VASPDomains, x: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains {
    $1_VASPDomain_VASPDomains(x)
}
function $IsValid'$1_VASPDomain_VASPDomains'(s: $1_VASPDomain_VASPDomains): bool {
    $IsValid'vec'$1_VASPDomain_VASPDomain''($domains#$1_VASPDomain_VASPDomains(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomains'(s1: $1_VASPDomain_VASPDomains, s2: $1_VASPDomain_VASPDomains): bool {
    $IsEqual'vec'$1_VASPDomain_VASPDomain''($domains#$1_VASPDomain_VASPDomains(s1), $domains#$1_VASPDomain_VASPDomains(s2))}
var $1_VASPDomain_VASPDomains_$memory: $Memory $1_VASPDomain_VASPDomains;

// spec fun at ../../../../diem-move/diem-framework/core/sources/VASP.move:164:5+80
function {:inline} $1_VASP_$is_child($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, addr: int): bool {
    $ResourceExists($1_VASP_ChildVASP_$memory, addr)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/VASP.move:154:5+82
function {:inline} $1_VASP_$is_parent($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $ResourceExists($1_VASP_ParentVASP_$memory, addr)
}

// struct VASP::ChildVASP at ../../../../diem-move/diem-framework/core/sources/VASP.move:21:5+54
type {:datatype} $1_VASP_ChildVASP;
function {:constructor} $1_VASP_ChildVASP($parent_vasp_addr: int): $1_VASP_ChildVASP;
function {:inline} $Update'$1_VASP_ChildVASP'_parent_vasp_addr(s: $1_VASP_ChildVASP, x: int): $1_VASP_ChildVASP {
    $1_VASP_ChildVASP(x)
}
function $IsValid'$1_VASP_ChildVASP'(s: $1_VASP_ChildVASP): bool {
    $IsValid'address'($parent_vasp_addr#$1_VASP_ChildVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ChildVASP'(s1: $1_VASP_ChildVASP, s2: $1_VASP_ChildVASP): bool {
    s1 == s2
}
var $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP;

// struct VASP::ParentVASP at ../../../../diem-move/diem-framework/core/sources/VASP.move:15:5+121
type {:datatype} $1_VASP_ParentVASP;
function {:constructor} $1_VASP_ParentVASP($num_children: int): $1_VASP_ParentVASP;
function {:inline} $Update'$1_VASP_ParentVASP'_num_children(s: $1_VASP_ParentVASP, x: int): $1_VASP_ParentVASP {
    $1_VASP_ParentVASP(x)
}
function $IsValid'$1_VASP_ParentVASP'(s: $1_VASP_ParentVASP): bool {
    $IsValid'u64'($num_children#$1_VASP_ParentVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ParentVASP'(s1: $1_VASP_ParentVASP, s2: $1_VASP_ParentVASP): bool {
    s1 == s2
}
var $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP;

// spec fun at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:44:5+118
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:48:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// spec fun at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:121:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:545:9+78
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, 173345816)
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:550:9+104
function {:inline} $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): int {
    $micro_xdx_limit#$1_DualAttestation_Limit($ResourceValue($1_DualAttestation_Limit_$memory, 173345816))
}

// struct DualAttestation::BaseUrlRotationEvent at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:57:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsEqual'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s1), $new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s2))
    && $IsEqual'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s1), $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s2))}

// struct DualAttestation::ComplianceKeyRotationEvent at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:49:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsEqual'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s1), $new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s2))
    && $IsEqual'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s1), $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s2))}

// struct DualAttestation::Credential at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:19:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    $IsEqual'vec'u8''($human_name#$1_DualAttestation_Credential(s1), $human_name#$1_DualAttestation_Credential(s2))
    && $IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential(s1), $base_url#$1_DualAttestation_Credential(s2))
    && $IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s1), $compliance_public_key#$1_DualAttestation_Credential(s2))
    && $IsEqual'u64'($expiration_date#$1_DualAttestation_Credential(s1), $expiration_date#$1_DualAttestation_Credential(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s1), $compliance_key_rotation_events#$1_DualAttestation_Credential(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s1), $base_url_rotation_events#$1_DualAttestation_Credential(s2))}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at ../../../../diem-move/diem-framework/core/sources/DualAttestation.move:44:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at ../../../../diem-move/diem-framework/core/sources/DiemTransactionPublishingOption.move:24:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsEqual'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s1), $script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s2))
    && $IsEqual'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s1), $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s2))}

// struct DesignatedDealer::Dealer at ../../../../diem-move/diem-framework/core/sources/DesignatedDealer.move:14:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    s1 == s2
}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at ../../../../diem-move/diem-framework/core/sources/DesignatedDealer.move:38:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsEqual'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s1), $currency_code#$1_DesignatedDealer_ReceivedMintEvent(s2))
    && $IsEqual'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s1), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s2))
    && $IsEqual'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s1), $amount#$1_DesignatedDealer_ReceivedMintEvent(s2))}

// struct ChainId::ChainId at ../../../../diem-move/diem-framework/core/sources/ChainId.move:10:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:231:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:22:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:16:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:11:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at ../../../../diem-move/diem-framework/core/sources/AccountFreezing.move:30:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:1636:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// struct DiemAccount::DiemAccount at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:37:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s1), $authentication_key#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s1), $withdraw_capability#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s1), $key_rotation_capability#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s1), $received_events#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s1), $sent_events#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'u64'($sequence_number#$1_DiemAccount_DiemAccount(s1), $sequence_number#$1_DiemAccount_DiemAccount(s2))}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:94:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    s1 == s2
}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:130:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::Balance<XUS::XUS> at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XUS_XUS';
function {:constructor} $1_DiemAccount_Balance'$1_XUS_XUS'($coin: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin(s: $1_DiemAccount_Balance'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS' {
    $1_DiemAccount_Balance'$1_XUS_XUS'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''(s: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''(s1: $1_DiemAccount_Balance'$1_XUS_XUS', s2: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';

// struct DiemAccount::Balance<XDX::XDX> at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XDX_XDX';
function {:constructor} $1_DiemAccount_Balance'$1_XDX_XDX'($coin: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XDX_XDX''_coin(s: $1_DiemAccount_Balance'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX' {
    $1_DiemAccount_Balance'$1_XDX_XDX'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''(s: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''(s1: $1_DiemAccount_Balance'$1_XDX_XDX', s2: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';

// struct DiemAccount::CreateAccountEvent at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:136:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:100:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    s1 == s2
}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:86:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:118:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsEqual'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s1), $amount#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s1), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s1), $payer#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s1), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s2))}

// struct DiemAccount::SentPaymentEvent at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:106:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    $IsEqual'u64'($amount#$1_DiemAccount_SentPaymentEvent(s1), $amount#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s1), $currency_code#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'address'($payee#$1_DiemAccount_SentPaymentEvent(s1), $payee#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s1), $metadata#$1_DiemAccount_SentPaymentEvent(s2))}

// struct DiemAccount::WithdrawCapability at ../../../../diem-move/diem-framework/core/sources/DiemAccount.move:77:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// spec fun at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:55:5+75
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, 173345816)
}

// struct DiemBlock::BlockMetadata at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:9:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    s1 == s2
}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at ../../../../diem-move/diem-framework/core/sources/DiemBlock.move:16:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    $IsEqual'u64'($round#$1_DiemBlock_NewBlockEvent(s1), $round#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'address'($proposer#$1_DiemBlock_NewBlockEvent(s1), $proposer#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s1), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s1), $time_microseconds#$1_DiemBlock_NewBlockEvent(s2))}

// struct DiemVMConfig::DiemVMConfig at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:13:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsEqual'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s1), $gas_schedule#$1_DiemVMConfig_DiemVMConfig(s2))}

// struct DiemVMConfig::GasConstants at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:35:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at ../../../../diem-move/diem-framework/core/sources/DiemVMConfig.move:29:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    $IsEqual'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s1), $instruction_schedule#$1_DiemVMConfig_GasSchedule(s2))
    && $IsEqual'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s1), $native_schedule#$1_DiemVMConfig_GasSchedule(s2))
    && $IsEqual'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s1), $gas_constants#$1_DiemVMConfig_GasSchedule(s2))}

// struct DiemVersion::DiemVersion at ../../../../diem-move/diem-framework/core/sources/DiemVersion.move:9:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}
